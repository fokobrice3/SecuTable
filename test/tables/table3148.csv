'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
13,"Subverting Environment Variable Values",Detailed,Stable,"The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:77::NATURE:CanPrecede:CAPEC ID:14::NATURE:PeerOf:CAPEC ID:10::","::STEP:1:PHASE:Explore:DESCRIPTION:[Probe target application] The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on. Most importantly, the adversary tries to determine what environment variables might be used by the underlying software, or even the application itself.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find user-controlled environment variables] Using the information found by probing the application, the adversary attempts to manipulate any user-controlled environment variables they have found are being used by the application, or suspect are being used by the application, and observe the effects of these changes. If the adversary notices any significant changes to the application, they will know that a certain environment variable is important to the application behavior and indicates a possible attack vector.:TECHNIQUE:Alter known environment variables such as $PATH, $HOSTNAME, or LD_LIBRARY_PATH and see if application behavior changes.::STEP:3:PHASE:Exploit:DESCRIPTION:[Manipulate user-controlled environment variables] The adversary manipulates the found environment variable(s) to abuse the normal flow of processes or to gain access to privileged resources.::","::An environment variable is accessible to the user.::An environment variable used by the application can be tainted with user supplied data.::Input data used in an environment variable is not validated properly.::The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an adversary may attempt to manipulate that variable.::","::SKILL:In a web based scenario, the client controls the data that it submitted to the server. So anybody can try to send malicious data and try to bypass the authentication mechanism.:LEVEL:Low::SKILL:Some more advanced attacks may require knowledge about protocols and probing technique which help controlling a variable. The malicious user may try to understand the authentication mechanism in order to defeat it.:LEVEL:High::","","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Accountability:TECHNICAL IMPACT:Hide Activities::","::Protect environment variables against unauthorized read and write access.::Protect the configuration files which contain environment variables against illegitimate read and write access.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.::","::Changing the LD_LIBRARY_PATH environment variable in TELNET will cause TELNET to use an alternate (possibly Trojan) version of a function library. The Trojan library must be accessible using the target file system and should include Trojan code that will allow the user to log in with a bad password. This requires that the adversary upload the Trojan library to a specific location on the target. As an alternative to uploading a Trojan file, some file systems support file paths that include remote addresses, such as 172.16.2.100shared_filestrojan_dll.dll. See also: Path Manipulation (CVE-1999-0073)::The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to ignorespace. HISTCONTROL can also be set to ignore duplicate commands by setting it to ignoredups. In some Linux systems, this is set by default to ignoreboth which covers both of the previous examples. This means that ls will not be saved, but ls would be saved by history. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.::","::353::285::302::74::15::73::20::200::","TAXONOMY NAME:ATTACK:ENTRY ID:1562.003:ENTRY NAME:Impair Defenses:Impair Command History Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.006:ENTRY NAME:Hijack Execution Flow:Dynamic Linker Hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.007:ENTRY NAME:Hijack Execution Flow:Path Interception by PATH Environment Variable::","",
130,"Excessive Allocation",Meta,Stable,"An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.","",Medium,Medium,"","","::The target must accept service requests from the attacker and the adversary must be able to control the resource allocation associated with this request to be in excess of the normal allocation. The latter is usually accomplished through the presence of a bug on the target that allows the adversary to manipulate variables used in the allocation.::","","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful excessive allocation attack forces the target system to exhaust its resources, thereby compromising the availability of its service.::","::Limit the amount of resources that are accessible to unprivileged users.::Assume all input is malicious. Consider all potentially relevant properties when validating input.::Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::Use resource-limiting settings, if possible.::","::In an Integer Attack, the adversary could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target.::","::404::770::1325::","TAXONOMY NAME:ATTACK:ENTRY ID:1499.003:ENTRY NAME:Endpoint Denial of Service:Application Exhaustion Flood::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::","",
131,"Resource Leak Exposure",Meta,Stable,"An adversary utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests.","",Medium,Medium,"","","::The target must have a resource leak that the adversary can repeatedly trigger.::","","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful resource leak exposure attack compromises the availability of the target system's services.::","::If possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated).::Memory should always be allocated/freed using matching functions (e.g., malloc/free, new/delete, etc.)::Implement best practices with respect to memory management, including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function.::","","::404::","TAXONOMY NAME:ATTACK:ENTRY ID:1499:ENTRY NAME:Endpoint Denial of Service::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::","",
132,"Symlink Attack",Detailed,Draft,"An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.","",Low,High,"::NATURE:ChildOf:CAPEC ID:159::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target] Adversary identifies the target application by determining whether there is sufficient check before writing data to a file and creating symlinks to files in different directories.:TECHNIQUE:The adversary writes to files in different directories to check whether the application has sufficient checking before file operations.:TECHNIQUE:The adversary creates symlinks to files in different directories.::STEP:2:PHASE:Experiment:DESCRIPTION:[Try to create symlinks to different files] The adversary then uses a variety of techniques, such as monitoring or guessing to create symlinks to the files accessed by the target application in the directories which are identified in the explore phase.:TECHNIQUE:The adversary monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the adversary can delay the operations by using sleep(2) and usleep() to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.:TECHNIQUE:The adversary may need a little guesswork on the filenames on which the target application would operate.:TECHNIQUE:The adversary tries to create symlinks to the various filenames.::STEP:3:PHASE:Exploit:DESCRIPTION:[Target application operates on created symlinks to sensitive files] The adversary is able to create symlinks to sensitive files while the target application is operating on the file.:TECHNIQUE:Create the symlink to the sensitive file such as configuration files, etc.::","::The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The adversary must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear.::","::SKILL:To create symlinks:LEVEL:Low::SKILL:To identify the files and create the symlinks during the file operation time window:LEVEL:High::","::None: No specialized resources are required to execute this type of attack. The only requirement is the ability to create the necessary symbolic link.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::","::Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.::Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions.::","::The adversary creates a symlink with the same name as the file which the application is intending to write to. The application will write to the file- causing the data to be written where the symlink is pointing. An attack like this can be demonstrated as follows: root# vulprog myFile {...program does some processing...] adversary# ln –s /etc/nologin myFile [...program writes to 'myFile', which points to /etc/nologin...] In the above example, the root user ran a program with poorly written file handling routines, providing the filename myFile to vulnprog for the relevant data to be written to. However, the adversary happened to be looking over the shoulder of root at the time, and created a link from myFile to /etc/nologin. The attack would make no user be able to login.::","::59::","TAXONOMY NAME:ATTACK:ENTRY ID:1547.009:ENTRY NAME:Boot or Logon Autostart Execution:Shortcut Modification::","",
133,"Try All Common Switches",Standard,Draft,"An attacker attempts to invoke all common switches and options in the target application for the purpose of discovering weaknesses in the target. For example, in some applications, adding a --debug switch causes debugging information to be displayed, which can sometimes reveal sensitive processing or configuration information to an attacker. This attack differs from other forms of API abuse in that the attacker is indiscriminately attempting to invoke options in the hope that one of them will work rather than specifically targeting a known option. Nonetheless, even if the attacker is familiar with the published options of a targeted application this attack method may still be fruitful as it might discover unpublicized functionality.","",,Medium,"::NATURE:ChildOf:CAPEC ID:113::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify application] Discover an application of interest by exploring service registry listings or by connecting on a known port or some similar means.:TECHNIQUE:Search via internet for known, published applications that allow option switches.:TECHNIQUE:Use automated tools to scan known ports to identify applications that might be accessible::STEP:2:PHASE:Explore:DESCRIPTION:[Authenticate to application] Authenticate to the application, if required, in order to explore it.:TECHNIQUE:Use published credentials to access system.:TECHNIQUE:Find unpublished credentails to access service.:TECHNIQUE:Use other attack pattern or weakness to bypass authentication.::STEP:3:PHASE:Experiment:DESCRIPTION:[Try all common switches] Using manual or automated means, attempt to run the application with many different known common switches. Observe the output to see if any switches seemed to put the application in a non production mode that might give more information.:TECHNIQUE:Manually execute the application with switches such as --debug, --test, --development, --verbose, etc.:TECHNIQUE:Use automated tools to run the application with common switches and observe the output::STEP:4:PHASE:Exploit:DESCRIPTION:[Use sensitive processing or configuration information] Once extra information is observed from an application through the use of a common switch, this information is used to aid other attacks on the application:TECHNIQUE:Using application information, formulate an attack on the application::","::The attacker must be able to control the options or switches sent to the target.::","","::None: No specialized resources are required to execute this type of attack. The only requirement is the ability to send requests to the target.::","","","::Design: Minimize switch and option functionality to only that necessary for correct function of the command.::Implementation: Remove all debug and testing options from production code.::","","::912::","","",
134,"Email Injection",Standard,Draft,"An adversary manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol.","",,Medium,"::NATURE:ChildOf:CAPEC ID:137::","","::The target application must allow the user to send email to some recipient, to specify the content at least one header field in the message, and must fail to sanitize against the injection of command separators.::The adversary must have the ability to access the target mail application.::","","::None: No specialized resources are required to execute this type of attack.::","","","","","::150::","TAXONOMY NAME:WASC:ENTRY ID:30:ENTRY NAME:Mail Command Injection::","",
135,"Format String Injection",Standard,Draft,"An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.","",High,High,"::NATURE:ChildOf:CAPEC ID:137::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey application] The adversary takes an inventory of the entry points of the application.:TECHNIQUE:Spider web sites for all available links:TECHNIQUE:List parameters, external variables, configuration files variables, etc. that are possibly used by the application.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine user-controllable input susceptible to format string injection] Determine the user-controllable input susceptible to format string injection. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.:TECHNIQUE:Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters.::STEP:3:PHASE:Exploit:DESCRIPTION:[Try to exploit the Format String Injection vulnerability] After determining that a given input is vulnerable to format string injection, hypothesize what the underlying usage looks like and the associated constraints.:TECHNIQUE:Insert various formatting characters to read or write the memory, e.g. overwrite return address, etc.::","::The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.::","::SKILL:In order to discover format string vulnerabilities it takes only low skill, however, converting this discovery into a working exploit requires advanced knowledge on the part of the adversary.:LEVEL:High::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::","::Limit the usage of formatting string functions.::Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.::","::Untrusted search path vulnerability in the add_filename_to_string function in intl/gettext/loadmsgcat.c for Elinks 0.11.1 allows local users to cause Elinks to use an untrusted gettext message catalog (.po file) in a ../po directory, which can be leveraged to conduct format string attacks. See also: CVE-2007-2027::","::134::20::74::","TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Format string attack::","",
136,"LDAP Injection",Standard,Draft,"An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.","",High,High,"::NATURE:ChildOf:CAPEC ID:248::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey application] The attacker takes an inventory of the entry points of the application.:TECHNIQUE:Spider web sites for all available links:TECHNIQUE:Sniff network communications with application using a utility such as WireShark.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine user-controllable input susceptible to LDAP injection] For each user-controllable input that the attacker suspects is vulnerable to LDAP injection, attempt to inject characters that have special meaning in LDAP (such as a single quote character, etc.). The goal is to create a LDAP query with an invalid syntax:TECHNIQUE:Use web browser to inject input through text fields or through HTTP GET parameters:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.:TECHNIQUE:Use modified client (modified by reverse engineering) to inject input.::STEP:3:PHASE:Experiment:DESCRIPTION:[Try to exploit the LDAP injection vulnerability] After determining that a given input is vulnerable to LDAP Injection, hypothesize what the underlying query looks like. Possibly using a tool, iteratively try to add logic to the query to extract information from the LDAP, or to modify or delete information in the LDAP.:TECHNIQUE:Add logic to the LDAP query to change the meaning of that command. Automated tools could be used to generate the LDAP injection strings.:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.::","::The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.::","::SKILL:The attacker needs to have knowledge of LDAP, especially its query syntax.:LEVEL:Medium::","","","::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::","::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.::","::PowerDNS before 2.9.18, when running with an LDAP backend, does not properly escape LDAP queries, which allows remote attackers to cause a denial of service (failure to answer ldap questions) and possibly conduct an LDAP injection attack. See also: CVE-2005-2301::","::77::90::20::","TAXONOMY NAME:WASC:ENTRY ID:29:ENTRY NAME:LDAP Injection::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:LDAP Injection::","",
137,"Parameter Injection",Meta,Stable,"An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value myInput&new_param=myValue, then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.","",Medium,Medium,"","","::The target application must use a parameter encoding where separators and parameter identifiers are expressed in regular text.::The target application must accept a string as user input, fail to sanitize characters that have a special meaning in the parameter encoding, and insert the user-supplied string in an encoding which is then processed.::","","::None: No specialized resources are required to execute this type of attack. The only requirement is the ability to provide string input to the target.::","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:Successful parameter injection attacks mean a compromise to integrity of the application.::","::Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.::Treat all user input as untrusted data that must be validated before use.::","","::88::","","",
138,"Reflection Injection",Standard,Draft,"An adversary supplies a value to the target application which is then used by reflection methods to identify a class, method, or field. For example, in the Java programming language the reflection libraries permit an application to inspect, load, and invoke classes and their components by name. If an adversary can control the input into these methods including the name of the class/method/field or the parameters passed to methods, they can cause the targeted application to invoke incorrect methods, read random fields, or even to load and utilize malicious classes that the adversary created. This can lead to the application revealing sensitive information, returning incorrect results, or even having the adversary take control of the targeted application.","",,Very High,"::NATURE:ChildOf:CAPEC ID:137::","","::The target application must utilize reflection libraries and allow users to directly control the parameters to these methods. If the adversary can host classes where the target can invoke them, more powerful variants of this attack are possible.::The target application must accept a string as user input, fail to sanitize characters that have a special meaning in the parameter encoding, and insert the user-supplied string in an encoding which is then processed.::","","::None: No specialized resources are required to execute this type of attack.::","","","","","::470::","","",
139,"Relative Path Traversal",Detailed,Draft,"An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or ) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.","",High,High,"::NATURE:ChildOf:CAPEC ID:126::","::STEP:1:PHASE:Explore:DESCRIPTION:[Fingerprinting of the operating system] In order to perform a valid path traversal, the adversary needs to know what the underlying OS is so that the proper file seperator is used.:TECHNIQUE:Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.:TECHNIQUE:TCP/IP Fingerprinting. The adversary uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.:TECHNIQUE:Induce errors to find informative error messages::STEP:2:PHASE:Explore:DESCRIPTION:[Survey application] Using manual or automated means, an adversary will survey the target application looking for all areas where user input is taken to specify a file name or path.:TECHNIQUE:Use a spidering tool to follow and record all links on a web page. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of a web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.:TECHNIQUE:Use a browser to manually explore a website and analyze how it is constructed. Many browser plug-ins are available to facilitate the analysis or automate the URL discovery.::STEP:3:PHASE:Experiment:DESCRIPTION:[Attempt variations on input parameters] Using manual or automated means, an adversary attempts varying relative file path combinations on all found user input locations and observes the responses.:TECHNIQUE:Provide ../ or .. at the beginning of any filename to traverse to the parent directory:TECHNIQUE:Use a list of probe strings as path traversal payload. Different strings may be used for different platforms. Strings contain relative path sequences such as ../.:TECHNIQUE:Use a proxy tool to record results of manual input of relative path traversal probes in known URLs.::STEP:4:PHASE:Exploit:DESCRIPTION:[Access, modify, or execute arbitrary files.] An adversary injects path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An adversary could be able to read directories or files which they are normally not allowed to read. The adversary could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the adversary accesses arbitrary files, they could also modify files. In particular situations, the adversary could also execute arbitrary code or system commands.:TECHNIQUE:Manipulate file and its path by injecting relative path sequences (e.g. ../).:TECHNIQUE:Download files, modify files, or try to execute shell commands (with binary files).::","::The target application must accept a string as user input, fail to sanitize combinations of characters in the input that have a special meaning in the context of path navigation, and insert the user-supplied string into path navigation commands.::","::SKILL:To inject the malicious payload in a web page:LEVEL:Low::SKILL:To bypass non trivial filters in the application:LEVEL:High::","","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::","::Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement::Implementation: Perform input validation for all remote content, including remote and user-generated content.::Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.::Implementation: Prefer working without user input when using file system calls::Implementation: Use indirect references rather than actual file names.::Implementation: Use possible permissions on file access when developing and deploying web applications.::","::The attacker uses relative path traversal to access files in the application. This is an example of accessing user's password file. http://www.example.com/getProfile.jsp?filename=../../../../etc/passwd However, the target application employs regular expressions to make sure no relative path sequences are being passed through the application to the web page. The application would replace all matches from this regex with the empty string. Then an attacker creates special payloads to bypass this filter: http://www.example.com/getProfile.jsp?filename=%2e%2e/%2e%2e/%2e%2e/%2e%2e /etc/passwd When the application gets this input string, it will be the desired vector by the attacker.::","::23::","","",
14,"Client-side Injection-induced Buffer Overflow",Detailed,Draft,"This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:100::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target client-side application] The adversary identifies a target client-side application to perform the buffer overflow on. The most common are browsers. If there is a known browser vulnerability an adversary could target that.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.:TECHNIQUE:Many times client side applications will be open source, so an adversary can examine the source code to identify possible injection vectors.:TECHNIQUE:Examine APIs of the client-side application and look for areas where a buffer overflow might be possible.::STEP:3:PHASE:Experiment:DESCRIPTION:[Create hostile service] The adversary creates a hostile service that will deliver content to the client-side application. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.:TECHNIQUE:If the client-side application is a browser, the adversary will create a service that delivers a malicious webpage to the browser.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary delivers the content to the client-side application using the hostile service and overflows the buffer.:TECHNIQUE:If the adversary is targeting a local client-side application, they just need to use the service themselves.:TECHNIQUE:If the adversary is attempting to cause an overflow on an external user's client-side application, they must get the user to attach to their service by some other means. This could be getting a user to visit their hostile webpage to target a user's browser.::","::The targeted client software communicates with an external server.::The targeted client software has a buffer overflow vulnerability.::","::SKILL:To achieve a denial of service, an attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap requires a more in-depth knowledge and higher skill level.:LEVEL:High::","","::An example of indicator is when the client software crashes after executing code downloaded from a hostile server.::","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::","::The client software should not install untrusted code from a non-authenticated server.::The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.::Perform input validation for length of buffer inputs.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Ensure all buffer uses are consistently bounds-checked.::Use OS-level preventative functionality. Not a complete solution.::","::Authors often use <EMBED> tags in HTML documents. For example <EMBED TYPE=audio/midi SRC=/path/file.mid AUTOSTART=true> In Internet Explorer 4.0 an adversary attacker supplies an overly long path in the SRC= directive, the mshtml.dll component will suffer a buffer overflow. This is a standard example of content in a Web page being directed to exploit a faulty module in the system. There are potentially thousands of different ways data can propagate into a given system, thus these kinds of attacks will continue to be found in the wild.::","::120::353::118::119::74::20::680::697::","","",
140,"Bypassing of Intermediate Forms in Multiple-Form Sets",Standard,Draft,"Some web applications require users to submit information through an ordered sequence of web forms. This is often done if there is a very large amount of information being collected or if information on earlier forms is used to pre-populate fields or determine which additional information the application needs to collect. An attacker who knows the names of the various forms in the sequence may be able to explicitly type in the name of a later form and navigate to it without first going through the previous forms. This can result in incomplete collection of information, incorrect assumptions about the information submitted by the attacker, or other problems that can impair the functioning of the application.","",,Medium,"::NATURE:ChildOf:CAPEC ID:74::","","::The target must collect information from the user in a series of forms where each form has its own URL that the attacker can anticipate and the application must fail to detect attempts to access intermediate forms without first filling out the previous forms.::","","::None: No specialized resources are required to execute this type of attack.::","","","","","::372::","","",
141,"Cache Poisoning",Standard,Draft,"An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.","",High,High,"::NATURE:ChildOf:CAPEC ID:161::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify and explore caches] Use tools to sniff traffic and scan a network in order to locate application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache) that may have vulnerabilities. Look for poisoning point in cache table entries.:TECHNIQUE:Run tools that check available entries in the cache.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause specific data to be cached] An attacker sends bogus request to the target, and then floods responses that trick a cache to remember malicious responses, which are wrong answers of queries.:TECHNIQUE:Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect users to malicious website] As the attacker succeeds in exploiting the vulnerability, they are able to manipulate and interpose malicious response data to targeted victim queries.:TECHNIQUE:Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).:TECHNIQUE:Adversary-in-the-Middle attacks (CAPEC-94) intercept secure communication between two parties.::","::The attacker must be able to modify the value stored in a cache to match a desired value.::The targeted application must not be able to detect the illicit modification of the cache and must trust the cache value in its calculations.::","::SKILL:To overwrite/modify targeted cache:LEVEL:Medium::","","","","::Configuration: Disable client side caching.::Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.::","::In this example, an attacker sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7. Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the attacker floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.::","::348::345::349::346::","TAXONOMY NAME:ATTACK:ENTRY ID:1557.002:ENTRY NAME:Adversary-in-the-Middle: ARP Cache Poisoning::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cache Poisoning::","",
142,"DNS Cache Poisoning",Detailed,Draft,"A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.","",High,High,"::NATURE:ChildOf:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:89::","::STEP:1:PHASE:Explore:DESCRIPTION:[Explore resolver caches] Check DNS caches on local DNS server and client's browser with DNS cache enabled.:TECHNIQUE:Run tools that check the resolver cache in the memory to see if it contains a target DNS entry.:TECHNIQUE:Figure out if the client's browser has DNS cache enabled.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt sending crafted records to DNS cache] A request is sent to the authoritative server for target website and wait for the iterative name resolver. An adversary sends bogus request to the DNS local server, and then floods responses that trick a DNS cache to remember malicious responses, which are wrong answers of DNS query.:TECHNIQUE:Adversary must know the transaction ID by intercepting a DNS query, or sending a bogus query with known transaction ID.:TECHNIQUE:If the transaction ID used to identify each query instance is randomized in some new DNS software, the attack must guess the transaction ID. Slow the response of the real DNS server by causing Denial-of-service. This gives adversaries enough time to guess transaction:TECHNIQUE:Adversary crafts DNS response with the same transaction ID as in the request. The adversary sends out DNS responses before the authorized DNS server. This forces DNS local cache stores fake DNS response (wrong answer). The fake DNS responses usually include a malicious website's IP address.::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect users to malicious website] As the adversary succeeds in exploiting the vulnerability, the victim connects to a malicious site using a good web site's domain name.:TECHNIQUE:Redirecting Web traffic to a site that looks enough like the original so as to not raise any suspicion.:TECHNIQUE:Adversary-in-the-Middle (CAPEC-94) intercepts secure communication between two parties.::","::A DNS cache must be vulnerable to some attack that allows the adversary to replace addresses in its lookup table.Client applications must trust the corrupted cashed values and utilize them for their domain name resolutions.::","::SKILL:To overwrite/modify targeted DNS cache:LEVEL:Medium::","::The adversary must have the resources to modify the targeted cache. In addition, in most cases the adversary will wish to host the sites to which users will be redirected, although in some cases redirecting to a third party site will accomplish the adversary's goals.::","","","::Configuration: Make sure your DNS servers have been updated to the latest versions::Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.::Configuration: Disable client side DNS caching.::","::In this example, an adversary sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7. Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the adversary floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.::","::348::345::349::346::350::","TAXONOMY NAME:ATTACK:ENTRY ID:1584.002:ENTRY NAME:Compromise Infrastructure: DNS Server::","",
143,"Detect Unpublicized Web Pages",Detailed,Draft,"An adversary searches a targeted web site for web pages that have not been publicized. In doing this, the adversary may be able to gain access to information that the targeted site did not intend to make public.","",,Low,"::NATURE:ChildOf:CAPEC ID:150::","::STEP:1:PHASE:Explore:DESCRIPTION:[Find target web site] An adversary finds a target web site that they think may have unpublicized web pages::STEP:2:PHASE:Explore:DESCRIPTION:[Map the published web site] The adversary will map the published web site either by using an automated tool or by manually accessing well-known debugging or logging pages, or otherwise predictable pages within the site tree:TECHNIQUE:Use Dirbuster to brute force directories and file names to find unpublicized pages:TECHNIQUE:Find a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked::STEP:3:PHASE:Experiment:DESCRIPTION:[Try to find weaknesses or information] The adversary will try to find weaknesses or information on the unpublicized pages that the targeted site did not intend to be public:TECHNIQUE:Manually analyze files or pages for information that could be useful in a further attack:TECHNIQUE:Use a static analysis tool to find weaknesses in unpublished web pages::STEP:4:PHASE:Exploit:DESCRIPTION:[Follow-up attack] Use any information or weaknesses found to carry out a follow-up attack::","::The targeted web site must include pages within its published tree that are not connected to its tree of links. The sensitivity of the content of these pages determines the severity of this attack.::","","::Spidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common page locations from known paths.::","","","","","::425::","","",
144,"Detect Unpublicized Web Services",Detailed,Draft,"An adversary searches a targeted web site for web services that have not been publicized. This attack can be especially dangerous since unpublished but available services may not have adequate security controls placed upon them given that an administrator may believe they are unreachable.","",,Low,"::NATURE:ChildOf:CAPEC ID:150::","::STEP:1:PHASE:Explore:DESCRIPTION:[Find target web site] An adversary finds a target web site that they think may have unpublicized web services::STEP:2:PHASE:Explore:DESCRIPTION:[Map the published web site] The adversary will map the published web site either by using an automated tool or by manually accessing well-known debugging or logging pages, or otherwise predictable pages within the site tree:TECHNIQUE:Use Dirbuster to brute force directories and file names to find unpublicized web services:TECHNIQUE:Find a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked::STEP:3:PHASE:Experiment:DESCRIPTION:[Try to find weaknesses or information] The adversary will try to find weaknesses in the unpublicized services that the targeted site did not intend to be public:TECHNIQUE:Use Nikto to look for web service vulnerabilities::STEP:4:PHASE:Exploit:DESCRIPTION:[Follow-up attack] Use any information or weaknesses found to carry out a follow-up attack::","::The targeted web site must include unpublished services within its web tree. The nature of these services determines the severity of this attack.::","","::Spidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common service queries from known paths.::","","","","","::425::","","",
145,"Checksum Spoofing",Detailed,Draft,"An adversary spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender's checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an adversary modifies the message body and then modifies the corresponding checksum so that the recipient's checksum calculation will match the checksum (created by the adversary) in the message. This would prevent the recipient from realizing that a change occurred.","",,Medium,"::NATURE:ChildOf:CAPEC ID:148::","","::The adversary must be able to intercept a message from the sender (keeping the recipient from getting it), modify it, and send the modified message to the recipient.::The sender and recipient must use a checksum to protect the integrity of their message and transmit this checksum in a manner where the adversary can intercept and modify it.::The checksum value must be computable using information known to the adversary. A cryptographic checksum, which uses a key known only to the sender and recipient, would thwart this attack.::","","::The adversary must have a utility that can intercept and modify messages between the sender and recipient.::","","","","","::354::","","",
146,"XML Schema Poisoning",Detailed,Stable,"An adversary corrupts or modifies the content of XML schema information passed between a client and server for the purpose of undermining the security of the target. XML Schemas provide the structure and content definitions for XML documents. Schema poisoning is the ability to manipulate a schema either by replacing or modifying it to compromise the programs that process documents that use this schema.","",Low,High,"::NATURE:ChildOf:CAPEC ID:271::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine if XML schema is local or remote] Because this attack differs slightly if the target uses remote XML schemas versus local schemas, the adversary first needs to determine which of the two are used.::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain access to XML schema] The adversary gains access to the XML schema so that they can modify the contents.:TECHNIQUE:For a local scenario, the adversary needs access to the machine that the schema is located on and needs to gain permissions to alter the contents of the file.:TECHNIQUE:For a remote scenario, the adversary needs to be able to sniff HTTP traffic that contains an XML schema.::STEP:3:PHASE:Exploit:DESCRIPTION:[Poison XML schema] Once the adversary gains access to the XML schema, they will alter it to achieve a desired effect. Locally, they can simply modify the file. For remote schemas, the adversary will alter the schema in transit by performing an adversary in the middle attack.:TECHNIQUE:Cause a denial of service by modifying the schema so that it does not contain required information for subsequent processing. For example, the unaltered schema may require a @name attribute in all submitted documents. If the adversary removes this attribute from the schema then documents created using the new grammar may lack this field, which may cause the processing application to enter an unexpected state or record incomplete data.:TECHNIQUE:Manipulation of the data types described in the schema may affect the results of calculations. For example, a float field could be changed to an int field.:TECHNIQUE:Change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might use a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B).::","::Some level of access to modify the target schema.::The schema used by the target application must be improperly secured against unauthorized modification and manipulation.::","","::Access to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema.::","","::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful schema poisoning attack can compromise the availability of the target system's service by exhausting its available resources.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Design: Protect the schema against unauthorized modification.::Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.::Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.::","::XML Schema Poisoning Attacks can often occur locally due to being embedded within the XML document itself or being located on the host within an improperaly protected file. In these cases, the adversary can simply edit the XML schema without the need for additional privileges. An example of the former can be seen below: <?xml version=1.0?> <!DOCTYPE contact [ <!ELEMENT contact (name,phone,email,address)> <!ELEMENT name (#PCDATA)> <!ELEMENT phone (#PCDATA)> <!ELEMENT email (#PCDATA)> <!ELEMENT address (#PCDATA)> ]> <note> <name>John Smith</name> <phone>555-1234</phone> <email>jsmith@email.com</email> <address>1 Example Lane</address> </note></capec:Code> If the 'name' attribute is required in all submitted documents and this field is removed by the adversary, the application may enter an unexpected state or record incomplete data. Additionally, if this data is needed to perform additional functions, a Denial of Service (DOS) may occur.::XML Schema Poisoning Attacks can also be executed remotely if the HTTP protocol is being used to transport data. : <?xml version=1.0?> <!DOCTYPE contact SYSTEM http://example.com/contact.dtd[ <note> <name>John Smith</name> <phone>555-1234</phone> <email>jsmith@email.com</email> <address>1 Example Lane</address> </note></capec:Code> The HTTP protocol does not encrypt the traffic it transports, so all communication occurs in plaintext. This traffic can be observed and modified by the adversary during transit to alter the XML schema before it reaches the end user. The adversary can perform a Adversary-in-the-Middle (CAPEC-94) Attack to alter the schema in the same way as the previous example and to acheive the same results.::","::15::472::","","",
147,"XML Ping of the Death",Detailed,Draft,"An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.","",Low,Medium,"::NATURE:ChildOf:CAPEC ID:528::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.:TECHNIQUE:Use an automated tool to record all instances of URLs to process XML requests.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes XML requests.::STEP:2:PHASE:Exploit:DESCRIPTION:[Launch a resource depletion attack] The attacker delivers a large number of small XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.:TECHNIQUE:Send a large number of crafted small XML messages to the target URL.::","::The target must receive and process XML transactions.::","::SKILL:To send small XML messages:LEVEL:Low::SKILL:To use distributed network to launch the attack:LEVEL:High::","::Transaction generator(s)/source(s) and ability to cause arrival of messages at the target with sufficient rapidity to overload target. Larger targets may be able to handle large volumes of requests so the attacker may require significant resources (such as a distributed network) to affect the target. However, the resources required of the attacker would be less than in the case of a simple flooding attack against the same target.::","","::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:DoS: resource consumption (other)::","::Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.::Implementation: Provide for network flow control and traffic shaping to control access to the resources.::","::Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.::","::400::770::","","",
148,"Content Spoofing",Meta,Stable,"An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.","",Medium,Medium,"","","::The target must provide content but fail to adequately protect it against modification.The adversary must have the means to alter data to which they are not authorized. If the content is to be modified in transit, the adversary must be able to intercept the targeted messages.::","","::If the content is to be modified in transit, the adversary requires a tool capable of intercepting the target's communication and generating/creating custom packets to impact the communications. In some variants, the targeted content is altered so that all or some of it is redirected towards content published by the attacker (for example, images and frames in the target's web site might be modified to be loaded from a source controlled by the attacker). In these cases, the attacker requires the necessary resources to host the replacement content.::","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful content spoofing attack compromises the integrity of the application data.::","","","::345::","TAXONOMY NAME:ATTACK:ENTRY ID:1491:ENTRY NAME:Defacement::::TAXONOMY NAME:WASC:ENTRY ID:12:ENTRY NAME:Content Spoofing::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Content Spoofing::","",
149,"Explore for Predictable Temporary File Names",Detailed,Draft,"An attacker explores a target to identify the names and locations of predictable temporary files for the purpose of launching further attacks against the target. This involves analyzing naming conventions and storage locations of the temporary files created by a target application. If an attacker can predict the names of temporary files they can use this information to mount other attacks, such as information gathering and symlink attacks.","",,Medium,"::NATURE:ChildOf:CAPEC ID:497::NATURE:CanPrecede:CAPEC ID:155::","","::The targeted application must create names for temporary files using a predictable procedure, e.g. using sequentially increasing numbers.::The attacker must be able to see the names of the files the target is creating.::","","::None: No specialized resources are required to execute this type of attack.::","","","","","::377::","","",
15,"Command Delimiters",Standard,Draft,"An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.","",High,High,"::NATURE:ChildOf:CAPEC ID:137::","::STEP:1:PHASE:Explore:DESCRIPTION:[Assess Target Runtime Environment] In situations where the runtime environment is not implicitly known, the attacker makes connections to the target system and tries to determine the system's runtime environment. Knowing the environment is vital to choosing the correct delimiters.:TECHNIQUE:Port mapping using network connection-based software (e.g., nmap, nessus, etc.):TECHNIQUE:Port mapping by exploring the operating system (netstat, sockstat, etc.):TECHNIQUE:TCP/IP Fingerprinting:TECHNIQUE:Induce errors to find informative error messages::STEP:2:PHASE:Explore:DESCRIPTION:[Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated user:TECHNIQUE:Spidering web sites for all available links:TECHNIQUE:Inventory all application inputs::STEP:3:PHASE:Experiment:DESCRIPTION:[Attempt delimiters in inputs] The attacker systematically attempts variations of delimiters on known inputs, observing the application's response each time.:TECHNIQUE:Inject command delimiters using network packet injection tools (netcat, nemesis, etc.):TECHNIQUE:Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.):TECHNIQUE:Enter command delimiters directly in input fields.::STEP:4:PHASE:Exploit:DESCRIPTION:[Use malicious command delimiters] The attacker uses combinations of payload and carefully placed command delimiters to attack the software.::","::Software's input validation or filtering must not detect and block presence of additional malicious command.::","::SKILL:The attacker has to identify injection vector, identify the specific commands, and optionally collect the output, i.e. from an interactive session.:LEVEL:Medium::","::Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Design: Perform allowlist validation against a positive specification for command length, type, and parameters.::Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account::Implementation: Perform input validation for all remote content.::Implementation: Use type conversions such as JDBC prepared statements.::","::By appending special characters, such as a semicolon or other commands that are executed by the target process, the attacker is able to execute a wide variety of malicious commands in the target process space, utilizing the target's inherited permissions, against any resource the host has access to. The possibilities are vast including injection attacks against RDBMS (SQL Injection), directory servers (LDAP Injection), XML documents (XPath and XQuery Injection), and command line shells. In many injection attacks, the results are converted back to strings and displayed to the client process such as a web browser without tripping any security alarms, so the network firewall does not log any out of the ordinary behavior. LDAP servers house critical identity assets such as user, profile, password, and group information that is used to authenticate and authorize users. An attacker that can query the directory at will and execute custom commands against the directory server is literally working with the keys to the kingdom in many enterprises. When user, organizational units, and other directory objects are queried by building the query string directly from user input with no validation, or other conversion, then the attacker has the ability to use any LDAP commands to query, filter, list, and crawl against the LDAP server directly in the same manner as SQL injection gives the ability to the attacker to run SQL commands on the database.::","::146::77::184::78::185::93::140::157::138::154::697::","","",
150,"Collect Data from Common Resource Locations",Standard,Draft,"An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.","",,Medium,"::NATURE:ChildOf:CAPEC ID:116::","","::The targeted applications must either expect files to be located at a specific location or, if the location of the files can be configured by the user, the user either failed to move the files from the default location or placed them in a conventional location for files of the given type.::","","::None: No specialized resources are required to execute this type of attack. In some cases, the attacker need not even have direct access to the locations on the target computer where the targeted resources reside.::","","","","::An adversary can use a technique called Bluesnarfing to retrieve data from Bluetooth enabled devices in which they know where the data is located. This is done by connecting to the device’s Object Exchange (OBEX) Push Profile and making OBEX GET requests for known filenames (contact lists, photos, recent calls). Bluesnarfing was patched shortly after its discovery in 2003 and will only work on devices created before or during this time.::","::552::1239::1258::1266::1272::1323::1330::","TAXONOMY NAME:ATTACK:ENTRY ID:1003:ENTRY NAME:OS Credential Dumping::::TAXONOMY NAME:ATTACK:ENTRY ID:1119:ENTRY NAME:Automated Collection::::TAXONOMY NAME:ATTACK:ENTRY ID:1213:ENTRY NAME:Data from Information Repositories::::TAXONOMY NAME:ATTACK:ENTRY ID:1530:ENTRY NAME:Data from Cloud Storage Object::::TAXONOMY NAME:ATTACK:ENTRY ID:1555:ENTRY NAME:Credentials from Password Stores::::TAXONOMY NAME:ATTACK:ENTRY ID:1602:ENTRY NAME:Data from Configuration Repository::","",
151,"Identity Spoofing",Meta,Stable,"Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.","",Medium,Medium,"","","::The identity associated with the message or resource must be removable or modifiable in an undetectable way.::","","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Authentication:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges::","::Employ robust authentication processes (e.g., multi-factor authentication).::","","::287::","","",
153,"Input Data Manipulation",Meta,Draft,"An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.","",,Medium,"","","::The target must accept user data for processing and the manner in which this data is processed must depend on some aspect of the format or flags that the attacker can control.::","","::None: No specialized resources are required to execute this type of attack.::","","","","","::20::","","",
154,"Resource Location Spoofing",Meta,Stable,"An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.","",Medium,Medium,"","","::None. All applications rely on file paths and therefore, in theory, they or their resources could be affected by this type of attack.::","","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::","::Monitor network activity to detect any anomalous or unauthorized communication exchanges.::","","::451::","","",
155,"Screen Temporary Files for Sensitive Information",Detailed,Draft,"An adversary exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application's routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application's temporary files, an adversary might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the adversary could recover this from the web cache.","",Medium,Medium,"::NATURE:ChildOf:CAPEC ID:150::","::STEP:1:PHASE:Explore:DESCRIPTION:[Look for temporary files in target application] An adversary will try to discover temporary files in a target application. Knowledge of where the temporary files are being stored is important information.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt to read temporary files] An adversary will attempt to read any temporary files they may have discovered through normal means.:TECHNIQUE:Attempt to get the file by querying the file path to a web server:TECHNIQUE:Using a remote shell into an application, read temporary files and send out information remotely if necessary:TECHNIQUE:Recover temporary information from a user's browser cache::STEP:3:PHASE:Exploit:DESCRIPTION:[Use function weaknesses to gain access to temporary files] If normal means to read temporary files did not work, an adversary will attempt to exploit weak temporary file functions to gain access to temporary files.:TECHNIQUE:Some C functions such as tmpnam(), tempnam(), and mktemp() will create a temporary file with a unique name, but do not stop an adversary from creating a file of the same name before it is opened by the application. Because these functions do not create file names that are sufficiently random, an adversary will try to make a file of the same name, causing a collision, and possibly altering file permissions for the temporary file so that it is able to be read.:TECHNIQUE:Similar to the last technique, an adversary might also create a file name collision using a linked file in a unix system such that the temporary file contents written out by the application write to a file of the adversaries choosing, allowing them to read the file contents.::","::The target application must utilize temporary files and must fail to adequately secure them against other parties reading them.::","","::Because some application may have a large number of temporary files and/or these temporary files may be very large, an adversary may need tools that help them quickly search these files for sensitive information. If the adversary can simply copy the files to another location and if the speed of the search is not important, the adversary can still perform the attack without any special resources.::","","","","","::377::","","",
157,"Sniffing Attacks",Standard,Draft,"In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.","",,Medium,"::NATURE:ChildOf:CAPEC ID:117::NATURE:CanPrecede:CAPEC ID:652::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Communication Mechanism] The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.:TECHNIQUE:Look for application documentation that might describe a communication mechanism used by a target.::STEP:2:PHASE:Experiment:DESCRIPTION:[Position In Between Targets] The adversary positions themselves somewhere in the middle of the two components. If the communication is encrypted, the adversary will need to act as a proxy and route traffic between the components, exploiting a flaw in the encryption mechanism. Otherwise, the adversary can just observe the communication at either end.:TECHNIQUE:Use Wireshark or some other packet capturing tool to capture traffic on a network.:TECHNIQUE:Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client.:TECHNIQUE:Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL.::STEP:3:PHASE:Exploit:DESCRIPTION:[Listen to Communication] The adversary observes communication, but does not alter or block it. The adversary gains access to sensitive information and can potentially utilize this information in a malicious way.::","::The target data stream must be transmitted on a medium to which the adversary has access.::","","::The adversary must be able to intercept the transmissions containing the data of interest. Depending on the medium of transmission and the path the data takes between the sender and recipient, the adversary may require special equipment and/or require that this equipment be placed in specific locations (e.g., a network sniffing tool)::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Encrypt sensitive information when transmitted on insecure mediums to prevent interception.::","","::311::","","",
158,"Sniffing Network Traffic",Detailed,Draft,"In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information.","",,Medium,"::NATURE:ChildOf:CAPEC ID:157::","","::The target must be communicating on a network protocol visible by a network sniffing application.::The adversary must obtain a logical position on the network from intercepting target network traffic is possible. Depending on the network topology, traffic sniffing may be simple or challenging. If both the target sender and target recipient are members of a single subnet, the adversary must also be on that subnet in order to see their traffic communication.::","::SKILL:Adversaries can obtain and set up open-source network sniffing tools easily.:LEVEL:Low::","::A tool with the capability of presenting network communication traffic (e.g., Wireshark, tcpdump, Cain and Abel, etc.).::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Obfuscate network traffic through encryption to prevent its readability by network sniffers.::Employ appropriate levels of segmentation to your network in accordance with best practices.::","","::311::","TAXONOMY NAME:ATTACK:ENTRY ID:1040:ENTRY NAME:Network Sniffing::::TAXONOMY NAME:ATTACK:ENTRY ID:1111:ENTRY NAME:Multi-Factor Authentication Interception::","",
159,"Redirect Access to Libraries",Standard,Stable,"An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:185::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target] The adversary identifies the target application and determines what libraries are being used.:TECHNIQUE:Find public source code and identify library dependencies.:TECHNIQUE:Gain access to the system hosting the application and look for libraries in common locations.::STEP:2:PHASE:Experiment:DESCRIPTION:[Deploy Malicious Libraries] The adversary crafts malicious libraries and deploys them on the system where the application is running, or in a remote location that can be loaded by the application.::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect Library Calls to Malicious Library] Once the malicious library crafted by the adversary is deployed, the adversary will manipulate the flow of the application such that it calls the malicious library. This can be done in a variety of ways based on how the application is loading and calling libraries.:TECHNIQUE:Poison the DNS cache of the system so that it loads a malicious library from a remote location hosted by the adversary instead of the legitimate location:TECHNIQUE:Create a symlink that tricks the application into thinking that a malicious library is the legitimate library.:TECHNIQUE:Use DLL side-loading to place a malicious verison of a DLL in the windows directory.::","::The target must utilize external libraries and must fail to verify the integrity of these libraries before using them.::","::SKILL:To modify the entries in the configuration file pointing to malicious libraries:LEVEL:Low::SKILL:To force symlink and timing issues for redirecting access to libraries:LEVEL:Medium::SKILL:To reverse engineering the libraries and inject malicious code into the libraries:LEVEL:High::","","","::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::","::Implementation: Restrict the permission to modify the entries in the configuration file.::Implementation: Check the integrity of the dynamically linked libraries before use them.::Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.::","::In this example, the attacker using ELF infection that redirects the Procedure Linkage Table (PLT) of an executable allowing redirection to be resident outside of the infected executable. The algorithm at the entry point code is as follows... • mark the text segment writeable • save the PLT(GOT) entry • replace the PLT(GOT) entry with the address of the new lib call The algorithm in the new library call is as follows... • do the payload of the new lib call • restore the original PLT(GOT) entry • call the lib call • save the PLT(GOT) entry again (if its changed) • replace the PLT(GOT) entry with the address of the new lib call::","::706::","TAXONOMY NAME:ATTACK:ENTRY ID:1574.008:ENTRY NAME:Hijack Execution Flow:Path Interception by Search Order Hijacking::","",