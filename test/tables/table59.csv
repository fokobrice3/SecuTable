CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description
5,J2EE Misconfiguration: Data Transmission Without Encryption,Variant,Draft,Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted.,
6,J2EE Misconfiguration: Insufficient Session-ID Length,Variant,Incomplete,The J2EE application is configured to use an insufficient session ID length.,If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking). The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID.
7,J2EE Misconfiguration: Missing Custom Error Page,Variant,Incomplete,The default error page of a web application should not display sensitive information about the product.,A Web application must define a default error page for 4xx errors (e.g. 404), 5xx (e.g. 500) errors and catch java.lang.Throwable exceptions to prevent attackers from mining information from the application container's built-in error response. When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks.
8,J2EE Misconfiguration: Entity Bean Declared Remote,Variant,Incomplete,When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean's data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application's expectations, potentially leading to other vulnerabilities.,
9,J2EE Misconfiguration: Weak Access Permissions for EJB Methods,Variant,Draft,If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the product.,If the EJB deployment descriptor contains one or more method permissions that grant access to the special ANYONE role, it indicates that access control for the application has not been fully thought through or that the application is structured in such a way that reasonable access control restrictions are impossible.
11,ASP.NET Misconfiguration: Creating Debug Binary,Variant,Draft,Debugging messages help attackers learn about the system and plan a form of attack.,ASP .NET applications can be configured to produce debug binaries. These binaries give detailed debugging messages and should not be used in production environments. Debug binaries are meant to be used in a development or testing environment and can pose a security risk if they are deployed to production.
12,ASP.NET Misconfiguration: Missing Custom Error Page,Variant,Draft,An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the framework's built-in responses.,
13,ASP.NET Misconfiguration: Password in Configuration File,Variant,Draft,Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers.,
14,Compiler Removal of Code to Clear Buffers,Variant,Draft,Sensitive memory is cleared according to the source code, but compiler optimizations leave the memory untouched when it is not read from again, aka dead store removal.,This compiler optimization error occurs when: 1. Secret data are stored in memory. 2. The secret data are scrubbed from memory by overwriting its contents. 3. The source code is compiled using an optimizing compiler, which identifies and removes the function that overwrites the contents as a dead store because the memory is not used subsequently.
15,External Control of System or Configuration Setting,Base,Incomplete,One or more system settings or configuration elements can be externally controlled by a user.,Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways.
20,Improper Input Validation,Class,Stable,The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.,Input validation is a frequently-used technique for checking potentially dangerous inputs in order to ensure that the inputs are safe for processing within the code, or when communicating with other components. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution. Input validation is not the only technique for processing input, however. Other techniques attempt to transform potentially-dangerous input into something safe, such as filtering (CWE-790) - which attempts to remove dangerous inputs - or encoding/escaping (CWE-116), which attempts to ensure that the input is not misinterpreted when it is included in output to another component. Other techniques exist as well (see CWE-138 for more examples.) Input validation can be applied to: raw data - strings, numbers, parameters, file contents, etc. metadata - information about the raw data, such as headers or size Data can be simple or structured. Structured data can be composed of many nested layers, composed of combinations of metadata and raw data, with other simple or structured data. Many properties of raw data or metadata may need to be validated upon entry into the code, such as: specified quantities such as size, length, frequency, price, rate, number of operations, time, etc. implied or derived quantities, such as the actual size of a file instead of a specified size indexes, offsets, or positions into more complex data structures symbolic keys or other elements into hash tables, associative arrays, etc. well-formedness, i.e. syntactic correctness - compliance with expected syntax lexical token correctness - compliance with rules for what is treated as a token specified or derived type - the actual type of the input (or what the input appears to be) consistency - between individual data elements, between raw data and metadata, between references, etc. conformance to domain-specific rules, e.g. business logic equivalence - ensuring that equivalent inputs are treated the same authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data Implied or derived properties of data must often be calculated or inferred by the code itself. Errors in deriving properties may be considered a contributing factor to improper input validation. Note that input validation has very different meanings to different people, or within different classification schemes. Caution must be used when referencing this CWE entry or mapping to it. For example, some weaknesses might involve inadvertently giving control to an attacker over an input when they should not be able to provide an input at all, but sometimes this is referred to as input validation. Finally, it is important to emphasize that the distinctions between input validation and output escaping are often blurred, and developers must be careful to understand the difference, including how input validation is not always sufficient to prevent vulnerabilities, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a person's last name is inserted into a query. The name O'Reilly would likely pass the validation step since it is a common last name in the English language. However, this valid name cannot be directly inserted into the database because it contains the ' apostrophe character, which would need to be escaped or otherwise transformed. In this case, removing the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.
22,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),Base,Stable,The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.,Many file operations are intended to take place within a restricted directory. By using special elements such as .. and / separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the ../ sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as /usr/local/bin, which may also be useful in accessing unexpected files. This is referred to as absolute path traversal. In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the product may add .txt to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.
23,Relative Path Traversal,Base,Draft,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as .. that can resolve to a location that is outside of that directory.,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.
24,Path Traversal: '../filedir',Variant,Incomplete,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ../ sequences that can resolve to a location that is outside of that directory.,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The ../ manipulation is the canonical manipulation for operating systems that use / as directory separators, such as UNIX- and Linux-based systems. In some cases, it is useful for bypassing protection schemes in environments for which / is supported but not the primary separator, such as Windows, which uses but can also accept /.
25,Path Traversal: '/../filedir',Variant,Incomplete,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize /../ sequences that can resolve to a location that is outside of that directory.,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. Sometimes a program checks for ../ at the beginning of the input, so a /../ can bypass that check.
26,Path Traversal: '/dir/../filename',Variant,Draft,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize /dir/../filename sequences that can resolve to a location that is outside of that directory.,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '/dir/../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for ../ at the beginning of the input, so a /../ can bypass that check.
27,Path Traversal: 'dir/../../filename',Variant,Draft,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize multiple internal ../ sequences that can resolve to a location that is outside of that directory.,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The 'directory/../../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one ../ sequence, so multiple ../ can bypass that check. Alternately, this manipulation could be used to bypass a check for ../ at the beginning of the pathname, moving up more than one directory level.
28,Path Traversal: '..filedir',Variant,Incomplete,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize .. sequences that can resolve to a location that is outside of that directory.,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '..' manipulation is the canonical manipulation for operating systems that use as directory separators, such as Windows. However, it is also useful for bypassing path traversal protection schemes that only assume that the / separator is valid.
29,Path Traversal: '..filename',Variant,Incomplete,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '..filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. This is similar to CWE-25, except using instead of /. Sometimes a program checks for .. at the beginning of the input, so a .. can bypass that check. It is also useful for bypassing path traversal protection schemes that only assume that the / separator is valid.
30,Path Traversal: 'dir..filename',Variant,Draft,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir..filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. This is similar to CWE-26, except using instead of /. The 'dir..filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for .. at the beginning of the input, so a .. can bypass that check.
31,Path Traversal: 'dir....filename',Variant,Draft,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir....filename' (multiple internal backslash dot dot) sequences that can resolve to a location that is outside of that directory.,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The 'dir....filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one .. sequence, so multiple .. can bypass that check. Alternately, this manipulation could be used to bypass a check for .. at the beginning of the pathname, moving up more than one directory level.
32,Path Traversal: '...' (Triple Dot),Variant,Incomplete,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '...' (triple dot) sequences that can resolve to a location that is outside of that directory.,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '...' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to .... and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of ./ sequences, can ultimately produce valid .. sequences due to a collapse into unsafe value (CWE-182).
33,Path Traversal: '....' (Multiple Dot),Variant,Incomplete,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....' (multiple dot) sequences that can resolve to a location that is outside of that directory.,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '....' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to ...... and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of ./ sequences, can ultimately produce valid .. sequences due to a collapse into unsafe value (CWE-182).
34,Path Traversal: '....//',Variant,Incomplete,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....//' (doubled dot dot slash) sequences that can resolve to a location that is outside of that directory.,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '....//' manipulation is useful for bypassing some path traversal protection schemes. If ../ is filtered in a sequential fashion, as done by some regular expression engines, then ....// can collapse into the ../ unsafe value (CWE-182). It could also be useful when .. is removed, if the operating system treats // and / as equivalent.
35,Path Traversal: '.../...//',Variant,Incomplete,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '.../...//' (doubled triple dot slash) sequences that can resolve to a location that is outside of that directory.,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '.../...//' manipulation is useful for bypassing some path traversal protection schemes. If ../ is filtered in a sequential fashion, as done by some regular expression engines, then .../...// can collapse into the ../ unsafe value (CWE-182). Removing the first ../ yields ....//; the second removal yields ../. Depending on the algorithm, the product could be susceptible to CWE-34 but not CWE-35, or vice versa.
36,Absolute Path Traversal,Base,Draft,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as /abs/path that can resolve to a location that is outside of that directory.,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.
37,Path Traversal: '/absolute/pathname/here',Variant,Draft,The product accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
38,Path Traversal: 'absolutepathnamehere',Variant,Draft,The product accepts input in the form of a backslash absolute path ('absolutepathnamehere') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
39,Path Traversal: 'C:dirname',Variant,Draft,The product accepts input that contains a drive letter or Windows volume letter ('C:dirname') that potentially redirects access to an unintended location or arbitrary file.,
40,Path Traversal: 'UNCsharename' (Windows UNC Share),Variant,Draft,The product accepts input that identifies a Windows UNC share ('UNCsharename') that potentially redirects access to an unintended location or arbitrary file.,
41,Improper Resolution of Path Equivalence,Base,Incomplete,The product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.,Path equivalence is usually employed in order to circumvent access controls expressed using an incomplete set of file name or file path representations. This is different from path traversal, wherein the manipulations are performed to generate a name for a different object.
42,Path Equivalence: 'filename.' (Trailing Dot),Variant,Incomplete,The product accepts path input in the form of trailing dot ('filedir.') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
43,Path Equivalence: 'filename....' (Multiple Trailing Dot),Variant,Incomplete,The product accepts path input in the form of multiple trailing dot ('filedir....') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
44,Path Equivalence: 'file.name' (Internal Dot),Variant,Incomplete,The product accepts path input in the form of internal dot ('file.ordir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
45,Path Equivalence: 'file...name' (Multiple Internal Dot),Variant,Incomplete,The product accepts path input in the form of multiple internal dot ('file...dir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
46,Path Equivalence: 'filename ' (Trailing Space),Variant,Incomplete,The product accepts path input in the form of trailing space ('filedir ') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
47,Path Equivalence: ' filename' (Leading Space),Variant,Incomplete,The product accepts path input in the form of leading space (' filedir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
48,Path Equivalence: 'file name' (Internal Whitespace),Variant,Incomplete,The product accepts path input in the form of internal space ('file(SPACE)name') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
49,Path Equivalence: 'filename/' (Trailing Slash),Variant,Incomplete,The product accepts path input in the form of trailing slash ('filedir/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
50,Path Equivalence: '//multiple/leading/slash',Variant,Incomplete,The product accepts path input in the form of multiple leading slash ('//multiple/leading/slash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
51,Path Equivalence: '/multiple//internal/slash',Variant,Incomplete,The product accepts path input in the form of multiple internal slash ('/multiple//internal/slash/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
52,Path Equivalence: '/multiple/trailing/slash//',Variant,Incomplete,The product accepts path input in the form of multiple trailing slash ('/multiple/trailing/slash//') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
53,Path Equivalence: 'multipleinternalbackslash',Variant,Incomplete,The product accepts path input in the form of multiple internal backslash ('multipletrailingslash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
54,Path Equivalence: 'filedir' (Trailing Backslash),Variant,Incomplete,The product accepts path input in the form of trailing backslash ('filedir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
55,Path Equivalence: '/./' (Single Dot Directory),Variant,Incomplete,The product accepts path input in the form of single dot directory exploit ('/./') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
56,Path Equivalence: 'filedir*' (Wildcard),Variant,Incomplete,The product accepts path input in the form of asterisk wildcard ('filedir*') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
57,Path Equivalence: 'fakedir/../realdir/filename',Variant,Incomplete,The product contains protection mechanisms to restrict access to 'realdir/filename', but it constructs pathnames using external input in the form of 'fakedir/../realdir/filename' that are not handled by those mechanisms. This allows attackers to perform unauthorized actions against the targeted file.,
58,Path Equivalence: Windows 8.3 Filename,Variant,Incomplete,The product contains a protection mechanism that restricts access to a long filename on a Windows operating system, but it does not properly restrict access to the equivalent short 8.3 filename.,On later Windows operating systems, a file can have a long name and a short name that is compatible with older Windows file systems, with up to 8 characters in the filename and 3 characters for the extension. These 8.3 filenames, therefore, act as an alternate name for files with long names, so they are useful pathname equivalence manipulations.
59,Improper Link Resolution Before File Access ('Link Following'),Base,Draft,The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.,
62,UNIX Hard Link,Variant,Incomplete,The product, when opening a file or directory, does not sufficiently account for when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.,Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. /etc/passwd). When the process opens the file, the attacker can assume the privileges of that process.
64,Windows Shortcut Following (.LNK),Variant,Incomplete,The product, when opening a file or directory, does not sufficiently handle when the file is a Windows shortcut (.LNK) whose target is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.,The shortcut (file with the .lnk extension) can permit an attacker to read/write a file that they originally did not have permissions to access.
65,Windows Hard Link,Variant,Incomplete,The product, when opening a file or directory, does not sufficiently handle when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.,Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. AUTOEXEC.BAT). When the process opens the file, the attacker can assume the privileges of that process, or prevent the program from accurately processing data.
66,Improper Handling of File Names that Identify Virtual Resources,Base,Draft,The product does not handle or incorrectly handles a file name that identifies a virtual resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file.,Virtual file names are represented like normal file names, but they are effectively aliases for other resources that do not behave like normal files. Depending on their functionality, they could be alternate entities. They are not necessarily listed in directories.
67,Improper Handling of Windows Device Names,Variant,Incomplete,The product constructs pathnames from user input, but it does not handle or incorrectly handles a pathname containing a Windows device name such as AUX or CON. This typically leads to denial of service or an information exposure when the application attempts to process the pathname as a regular file.,Not properly handling virtual filenames (e.g. AUX, CON, PRN, COM1, LPT1) can result in different types of vulnerabilities. In some cases an attacker can request a device via injection of a virtual filename in a URL, which may cause an error that leads to a denial of service or an error page that reveals sensitive information. A product that allows device names to bypass filtering runs the risk of an attacker injecting malicious code in a file with the name of a device.
69,Improper Handling of Windows ::DATA Alternate Data Stream,Variant,Incomplete,The product does not properly prevent access to, or detect usage of, alternate data streams (ADS).,An attacker can use an ADS to hide information about a file (e.g. size, the name of the process) from a system or file browser tools such as Windows Explorer and 'dir' at the command line utility. Alternately, the attacker might be able to bypass intended access restrictions for the associated data fork.
72,Improper Handling of Apple HFS+ Alternate Data Stream Path,Variant,Incomplete,The product does not properly handle special paths that may identify the data or resource fork of a file on the HFS+ file system.,If the product chooses actions to take based on the file name, then if an attacker provides the data or resource fork, the product may take unexpected actions. Further, if the product intends to restrict access to a file, then an attacker might still be able to bypass intended access restrictions by requesting the data or resource fork for that file.
73,External Control of File Name or Path,Base,Draft,The product allows user input to control or influence paths or file names that are used in filesystem operations.,This could allow an attacker to access or modify system files or other files that are critical to the application. Path manipulation errors occur when the following two conditions are met: 1. An attacker can specify a path used in an operation on the filesystem. 2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.
74,Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'),Class,Incomplete,The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.,Software or other automated logic has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features that classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed.
75,Failure to Sanitize Special Elements into a Different Plane (Special Element Injection),Class,Draft,The product does not adequately filter user-controlled input for special elements with control implications.,
76,Improper Neutralization of Equivalent Special Elements,Base,Draft,The product correctly neutralizes certain special elements, but it improperly neutralizes equivalent special elements.,The product may have a fixed list of special characters it believes is complete. However, there may be alternate encodings, or representations that also have the same meaning. For example, the product may filter out a leading slash (/) to prevent absolute path names, but does not account for a tilde (~) followed by a user name, which on some *nix systems could be expanded to an absolute pathname. Alternately, the product might filter a dangerous -e command-line switch when calling an external program, but it might not account for --exec or other switches that have the same semantics.
77,Improper Neutralization of Special Elements used in a Command ('Command Injection'),Class,Draft,The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.,Command injection vulnerabilities typically occur when: 1. Data enters the application from an untrusted source. 2. The data is part of a string that is executed as a command by the application. 3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have. Many protocols and products have their own custom command language. While OS or shell command strings are frequently discovered and targeted, developers may not realize that these other command languages might also be vulnerable to attacks. Command injection is a common problem with wrapper programs.
78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'),Base,Stable,The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.,This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. There are at least two subtypes of OS command injection: The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(nslookup [HOSTNAME]) to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing. The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use exec([COMMAND]) to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.
79,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Stable,The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.,Cross-site scripting (XSS) vulnerabilities occur when: Untrusted data enters a web application, typically from a web request. The web application dynamically generates a web page that contains this untrusted data. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain. There are three main kinds of XSS: Type 1: Reflected XSS (or Non-Persistent) - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser. Type 2: Stored XSS (or Persistent) - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. Type 0: DOM-Based XSS - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as drive-by hacking. In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.
80,Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as <, >, and & that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.,This may allow such characters to be treated as control characters, which are executed client-side in the context of the user's session. Although this can be classified as an injection problem, the more pertinent issue is the improper conversion of such special characters to respective context-appropriate entities before displaying them to the user.
81,Improper Neutralization of Script in an Error Message Web Page,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page.,Error pages may include customized 403 Forbidden or 404 Not Found pages. When an attacker can trigger an error that contains script syntax within the attacker's input, then cross-site scripting attacks may be possible.
82,Improper Neutralization of Script in Attributes of IMG Tags in a Web Page,Variant,Incomplete,The web application does not neutralize or incorrectly neutralizes scripting elements within attributes of HTML IMG tags, such as the src attribute.,Attackers can embed XSS exploits into the values for IMG attributes (e.g. SRC) that is streamed and then executed in a victim's browser. Note that when the page is loaded into a user's browsers, the exploit will automatically execute.
83,Improper Neutralization of Script in Attributes in a Web Page,Variant,Draft,The product does not neutralize or incorrectly neutralizes javascript: or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.,
84,Improper Neutralization of Encoded URI Schemes in a Web Page,Variant,Draft,The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings.,
85,Doubled Character XSS Manipulations,Variant,Draft,The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters.,
86,Improper Neutralization of Invalid Characters in Identifiers in Web Pages,Variant,Draft,The product does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.,Some web browsers may remove these sequences, resulting in output that may have unintended control implications. For example, the product may attempt to remove a javascript: URI scheme, but a java%00script: URI may bypass this check and still be rendered as active javascript by some browsers, allowing XSS or other attacks.
87,Improper Neutralization of Alternate XSS Syntax,Variant,Draft,The product does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.,
88,Improper Neutralization of Argument Delimiters in a Command ('Argument Injection'),Base,Draft,The product constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.,When creating commands using interpolation into a string, developers may assume that only the arguments/options that they specify will be processed. This assumption may be even stronger when the programmer has encoded the command in a way that prevents separate commands from being provided maliciously, e.g. in the case of shell metacharacters. When constructing the command, the developer may use whitespace or other delimiters that are required to separate arguments when the command. However, if an attacker can provide an untrusted input that contains argument-separating delimiters, then the resulting command will have more arguments than intended by the developer. The attacker may then be able to change the behavior of the command. Depending on the functionality supported by the extraneous arguments, this may have security-relevant consequences.
89,Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),Base,Stable,The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.,Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or product package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.
90,Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection'),Base,Draft,The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.,
91,XML Injection (aka Blind XPath Injection),Base,Draft,The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.,Within XML, special elements could include reserved words or characters such as <, >, , and &, which could then be used to add new data or modify XML syntax.
93,Improper Neutralization of CRLF Sequences ('CRLF Injection'),Base,Draft,The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.,
94,Improper Control of Generation of Code ('Code Injection'),Base,Draft,The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.,When a product allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the product. Such an alteration could lead to arbitrary code execution. Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.
95,Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection'),Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. eval).,This may allow an attacker to execute arbitrary code, or at least modify what code can be executed.
96,Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection'),Base,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.,
97,Improper Neutralization of Server-Side Includes (SSI) Within a Web Page,Variant,Draft,The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.,
99,Improper Control of Resource Identifiers ('Resource Injection'),Class,Draft,The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.,A resource injection issue occurs when the following two conditions are met: An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server. This may enable an attacker to access or modify otherwise protected system resources.
102,Struts: Duplicate Validation Forms,Variant,Incomplete,The product uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.,If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations, possibly leading to resultant weaknesses. Moreover, it indicates that the validation logic is not up-to-date, and can indicate that other, more subtle validation errors are present.
103,Struts: Incomplete validate() Method Definition,Variant,Draft,The product has a validator form that either does not define a validate() method, or defines a validate() method but does not call super.validate().,If the code does not call super.validate(), the Validation Framework cannot check the contents of the form against a validation form. In other words, the validation framework will be disabled for the given form.
104,Struts: Form Bean Does Not Extend Validation Class,Variant,Draft,If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation.,
105,Struts: Form Field Without Validator,Variant,Draft,The product has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation.,Omitting validation for even a single input field may give attackers the leeway they need to compromise the product. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
106,Struts: Plug-in Framework not in Use,Variant,Draft,When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.,Unchecked input is the leading cause of vulnerabilities in J2EE applications. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
107,Struts: Unused Validation Form,Variant,Draft,An unused validation form indicates that validation logic is not up-to-date.,It is easy for developers to forget to update validation logic when they remove or rename action form mappings. One indication that validation logic is not being properly maintained is the presence of an unused validation form.
108,Struts: Unvalidated Action Form,Variant,Incomplete,Every Action Form must have a corresponding validation form.,If a Struts Action Form Mapping specifies a form, it must have a validation form defined under the Struts Validator.
109,Struts: Validator Turned Off,Variant,Draft,Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation.,
110,Struts: Validator Without Form Field,Variant,Draft,Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.,It is easy for developers to forget to update validation logic when they make changes to an ActionForm class. One indication that validation logic is not being properly maintained is inconsistencies between the action form and the validation form. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
111,Direct Use of Unsafe JNI,Variant,Draft,When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.,Many safety features that programmers may take for granted do not apply for native code, so you must carefully review all such code for potential problems. The languages used to implement native code may be more susceptible to buffer overflows and other attacks. Native code is unprotected by the security features enforced by the runtime environment, such as strong typing and array bounds checking.
112,Missing XML Validation,Base,Draft,The product accepts XML from an untrusted source but does not validate the XML against the proper schema.,Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input.
113,Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting'),Variant,Incomplete,The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.,HTTP agents or components may include a web server, load balancer, reverse proxy, web caching proxy, application firewall, web browser, etc. Regardless of the role, they are expected to maintain coherent, consistent HTTP communication state across all components. However, including unexpected data in an HTTP header allows an attacker to specify the entirety of the HTTP message that is rendered by the client HTTP agent (e.g., web browser) or back-end HTTP agent (e.g., web server), whether the message is part of a request or a response. When an HTTP request contains unexpected CR and LF characters, the server may respond with an output stream that is interpreted as splitting the stream into two different HTTP messages instead of one. CR is carriage return, also given by %0d or r, and LF is line feed, also given by %0a or n. In addition to CR and LF characters, other valid/RFC compliant special characters and unique character encodings can be utilized, such as HT (horizontal tab, also given by %09 or t) and SP (space, also given as + sign or %20). These types of unvalidated and unexpected data in HTTP message headers allow an attacker to control the second split message to mount attacks such as server-side request forgery, cross-site scripting, and cache poisoning attacks. HTTP response splitting weaknesses may be present when: Data enters a web application through an untrusted source, most frequently an HTTP request. The data is included in an HTTP response header sent to a web user without neutralizing malicious characters that can be interpreted as separator characters for headers.
114,Process Control,Class,Incomplete,Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.,Process control vulnerabilities take two forms: An attacker can change the command that the program executes: the attacker explicitly controls what the command is. An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means. Process control vulnerabilities of the first type occur when either data enters the application from an untrusted source and the data is used as part of a string representing a command that is executed by the application. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.
115,Misinterpretation of Input,Base,Incomplete,The product misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.,
116,Improper Encoding or Escaping of Output,Class,Draft,The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.,Improper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead. Most products follow a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, GET /index.html HTTP/1.1 is a structured message containing a command (GET) with a single argument (/index.html) and metadata about which protocol version is being used (HTTP/1.1). If an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly.
117,Improper Output Neutralization for Logs,Base,Draft,The product does not neutralize or incorrectly neutralizes output that is written to logs.,This can allow an attacker to forge log entries or inject malicious content into logs. Log forging vulnerabilities occur when: Data enters an application from an untrusted source. The data is written to an application or system log file.
118,Incorrect Access of Indexable Resource ('Range Error'),Class,Incomplete,The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.,
119,Improper Restriction of Operations within the Bounds of a Memory Buffer,Class,Stable,The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.,Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced. This can cause read or write operations to be performed on memory locations that may be associated with other variables, data structures, or internal program data. As a result, an attacker may be able to execute arbitrary code, alter the intended control flow, read sensitive information, or cause the system to crash.
120,Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'),Base,Incomplete,The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.,A buffer overflow condition exists when a product attempts to put more data in a buffer than it can hold, or when it attempts to put data in a memory area outside of the boundaries of a buffer. The simplest type of error, and the most common cause of buffer overflows, is the classic case in which the product copies the buffer without restricting how much is copied. Other variants exist, but the existence of a classic overflow strongly suggests that the programmer is not considering even the most basic of security protections.
121,Stack-based Buffer Overflow,Variant,Draft,A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).,
122,Heap-based Buffer Overflow,Variant,Draft,A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().,
123,Write-what-where Condition,Base,Draft,Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow.,
124,Buffer Underwrite ('Buffer Underflow'),Base,Incomplete,The product writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.,This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.
125,Out-of-bounds Read,Base,Draft,The product reads data past the end, or before the beginning, of the intended buffer.,Typically, this can allow attackers to read sensitive information from other memory locations or cause a crash. A crash can occur when the code reads a variable amount of data and assumes that a sentinel exists to stop the read operation, such as a NUL in a string. The expected sentinel might not be located in the out-of-bounds memory, causing excessive data to be read, leading to a segmentation fault or a buffer overflow. The product may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer. A subsequent read operation then produces undefined or unexpected results.
126,Buffer Over-read,Variant,Draft,The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.,This typically occurs when the pointer or its index is incremented to a position beyond the bounds of the buffer or when pointer arithmetic results in a position outside of the valid memory location to name a few. This may result in exposure of sensitive information or possibly a crash.
127,Buffer Under-read,Variant,Draft,The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer.,This typically occurs when the pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used. This may result in exposure of sensitive information or possibly a crash.
128,Wrap-around Error,Base,Incomplete,Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore wraps around to a very small, negative, or undefined value.,
129,Improper Validation of Array Index,Variant,Draft,The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.,
130,Improper Handling of Length Parameter Inconsistency,Base,Incomplete,The product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.,If an attacker can manipulate the length parameter associated with an input such that it is inconsistent with the actual length of the input, this can be leveraged to cause the target application to behave in unexpected, and possibly, malicious ways. One of the possible motives for doing so is to pass in arbitrarily large input to the application. Another possible motivation is the modification of application state by including invalid data for subsequent properties of the application. Such weaknesses commonly lead to attacks such as buffer overflows and execution of arbitrary code.
131,Incorrect Calculation of Buffer Size,Base,Draft,The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.,
134,Use of Externally-Controlled Format String,Base,Draft,The product uses a function that accepts a format string as an argument, but the format string originates from an external source.,When an attacker can modify an externally-controlled format string, this can lead to buffer overflows, denial of service, or data representation problems. It should be noted that in some circumstances, such as internationalization, the set of format strings is externally controlled by design. If the source of these format strings is trusted (e.g. only contained in library files that are only modifiable by the system administrator), then the external control might not itself pose a vulnerability.
135,Incorrect Calculation of Multi-Byte String Length,Base,Draft,The product does not correctly calculate the length of strings that can contain wide or multi-byte characters.,
138,Improper Neutralization of Special Elements,Class,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.,Most languages and protocols have their own special elements such as characters and reserved words. These special elements can carry control implications. If product does not prevent external control or influence over the inclusion of such special elements, the control flow of the program may be altered from what was intended. For example, both Unix and Windows interpret the symbol < (less than) as meaning read input from a file.
140,Improper Neutralization of Delimiters,Base,Draft,The product does not neutralize or incorrectly neutralizes delimiters.,
141,Improper Neutralization of Parameter/Argument Delimiters,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as parameter or argument delimiters when they are sent to a downstream component.,As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.
142,Improper Neutralization of Value Delimiters,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as value delimiters when they are sent to a downstream component.,As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.
143,Improper Neutralization of Record Delimiters,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as record delimiters when they are sent to a downstream component.,As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.
144,Improper Neutralization of Line Delimiters,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as line delimiters when they are sent to a downstream component.,As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.
145,Improper Neutralization of Section Delimiters,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as section delimiters when they are sent to a downstream component.,As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions. One example of a section delimiter is the boundary string in a multipart MIME message. In many cases, doubled line delimiters can serve as a section delimiter.
146,Improper Neutralization of Expression/Command Delimiters,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.,As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.
147,Improper Neutralization of Input Terminators,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as input terminators when they are sent to a downstream component.,For example, a . in SMTP signifies the end of mail message data, whereas a null character can be used for the end of a string.
148,Improper Neutralization of Input Leaders,Variant,Draft,The product does not properly handle when a leading character or sequence (leader) is missing or malformed, or if multiple leaders are used when only one should be allowed.,
149,Improper Neutralization of Quoting Syntax,Variant,Draft,Quotes injected into a product can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions.,
150,Improper Neutralization of Escape, Meta, or Control Sequences,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.,As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.
151,Improper Neutralization of Comment Delimiters,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as comment delimiters when they are sent to a downstream component.,
152,Improper Neutralization of Macro Symbols,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as macro symbols when they are sent to a downstream component.,
153,Improper Neutralization of Substitution Characters,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as substitution characters when they are sent to a downstream component.,
154,Improper Neutralization of Variable Name Delimiters,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as variable name delimiters when they are sent to a downstream component.,As data is parsed, an injected delimiter may cause the process to take unexpected actions that result in an attack. Example: $ for an environment variable.
155,Improper Neutralization of Wildcards or Matching Symbols,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as wildcards or matching symbols when they are sent to a downstream component.,As data is parsed, an injected element may cause the process to take unexpected actions.
156,Improper Neutralization of Whitespace,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as whitespace when they are sent to a downstream component.,This can include space, tab, etc.
157,Failure to Sanitize Paired Delimiters,Variant,Draft,The product does not properly handle the characters that are used to mark the beginning and ending of a group of entities, such as parentheses, brackets, and braces.,Paired delimiters might include: < and > angle brackets ( and ) parentheses { and } braces [ and ] square brackets double quotes ' ' single quotes
158,Improper Neutralization of Null Byte or NUL Character,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component.,As data is parsed, an injected NUL character or null byte may cause the product to believe the input is terminated earlier than it actually is, or otherwise cause the input to be misinterpreted. This could then be used to inject potentially dangerous input that occurs after the null byte or otherwise bypass validation routines and other protection mechanisms.
159,Improper Handling of Invalid Use of Special Elements,Class,Draft,The product does not properly filter, remove, quote, or otherwise manage the invalid use of special elements in user-controlled input, which could cause adverse effect on its behavior and integrity.,
160,Improper Neutralization of Leading Special Elements,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.,As data is parsed, improperly handled leading special elements may cause the process to take unexpected actions that result in an attack.
161,Improper Neutralization of Multiple Leading Special Elements,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.,As data is parsed, improperly handled multiple leading special elements may cause the process to take unexpected actions that result in an attack.
162,Improper Neutralization of Trailing Special Elements,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.,As data is parsed, improperly handled trailing special elements may cause the process to take unexpected actions that result in an attack.
163,Improper Neutralization of Multiple Trailing Special Elements,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.,As data is parsed, improperly handled multiple trailing special elements may cause the process to take unexpected actions that result in an attack.
164,Improper Neutralization of Internal Special Elements,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.,As data is parsed, improperly handled internal special elements may cause the process to take unexpected actions that result in an attack.
165,Improper Neutralization of Multiple Internal Special Elements,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.,As data is parsed, improperly handled multiple internal special elements may cause the process to take unexpected actions that result in an attack.
166,Improper Handling of Missing Special Element,Base,Draft,The product receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing.,
167,Improper Handling of Additional Special Element,Base,Draft,The product receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is provided.,
168,Improper Handling of Inconsistent Special Elements,Base,Draft,The product does not properly handle input in which an inconsistency exists between two or more special characters or reserved words.,An example of this problem would be if paired characters appear in the wrong order, or if the special characters are not properly nested.
170,Improper Null Termination,Base,Incomplete,The product does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator.,Null termination errors frequently occur in two different ways. An off-by-one error could cause a null to be written out of bounds, leading to an overflow. Or, a program could use a strncpy() function call incorrectly, which prevents a null terminator from being added at all. Other scenarios are possible.
172,Encoding Error,Class,Draft,The product does not properly encode or decode the data, resulting in unexpected values.,
173,Improper Handling of Alternate Encoding,Variant,Draft,The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.,
174,Double Decoding of the Same Data,Variant,Draft,The product decodes the same input twice, which can limit the effectiveness of any protection mechanism that occurs in between the decoding operations.,
175,Improper Handling of Mixed Encoding,Variant,Draft,The product does not properly handle when the same input uses several different (mixed) encodings.,
176,Improper Handling of Unicode Encoding,Variant,Draft,The product does not properly handle when an input contains Unicode encoding.,
177,Improper Handling of URL Encoding (Hex Encoding),Variant,Draft,The product does not properly handle when all or part of an input has been URL encoded.,
178,Improper Handling of Case Sensitivity,Base,Incomplete,The product does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results.,Improperly handled case sensitive data can lead to several possible consequences, including: case-insensitive passwords reducing the size of the key space, making brute force attacks easier bypassing filters or access controls using alternate names multiple interpretation errors using alternate names.
179,Incorrect Behavior Order: Early Validation,Base,Incomplete,The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.,Product needs to validate data at the proper time, after data has been canonicalized and cleansed. Early validation is susceptible to various manipulations that result in dangerous inputs that are produced by canonicalization and cleansing.
180,Incorrect Behavior Order: Validate Before Canonicalize,Variant,Draft,The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.,This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.
181,Incorrect Behavior Order: Validate Before Filter,Variant,Draft,The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.,This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.
182,Collapse of Data into Unsafe Value,Base,Draft,The product filters data in a way that causes it to be reduced or collapsed into an unsafe value that violates an expected security property.,
183,Permissive List of Allowed Inputs,Base,Draft,The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.,
184,Incomplete List of Disallowed Inputs,Base,Draft,The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.,Developers often try to protect their products against malicious input by performing tests against inputs that are known to be bad, such as special characters that can invoke new commands. However, such lists often only account for the most well-known bad inputs. Attackers may be able to find other malicious inputs that were not expected by the developer, allowing them to bypass the intended protection mechanism.
185,Incorrect Regular Expression,Class,Draft,The product specifies a regular expression in a way that causes data to be improperly matched or compared.,When the regular expression is used in protection mechanisms such as filtering or validation, this may allow an attacker to bypass the intended restrictions on the incoming data.
186,Overly Restrictive Regular Expression,Base,Draft,A regular expression is overly restrictive, which prevents dangerous values from being detected.,This weakness is not about regular expression complexity. Rather, it is about a regular expression that does not match all values that are intended. Consider the use of a regexp to identify acceptable values or to spot unwanted terms. An overly restrictive regexp misses some potentially security-relevant values leading to either false positives *or* false negatives, depending on how the regexp is being used within the code. Consider the expression /[0-8]/ where the intention was /[0-9]/. This expression is not complex but the value 9 is not matched when maybe the programmer planned to check for it.
187,Partial String Comparison,Variant,Incomplete,The product performs a comparison that only examines a portion of a factor before determining whether there is a match, such as a substring, leading to resultant weaknesses.,For example, an attacker might succeed in authentication by providing a small password that matches the associated portion of the larger, correct password.
188,Reliance on Data/Memory Layout,Base,Draft,The product makes invalid assumptions about how protocol data or memory is organized at a lower level, resulting in unintended program behavior.,When changing platforms or protocol versions, in-memory organization of data may change in unintended ways. For example, some architectures may place local variables A and B right next to each other with A on top; some may place them next to each other with B on top; and others may add some padding to each. The padding size may vary to ensure that each variable is aligned to a proper word size. In protocol implementations, it is common to calculate an offset relative to another field to pick out a specific piece of data. Exceptional conditions, often involving new protocol versions, may add corner cases that change the data layout in an unusual way. The result can be that an implementation accesses an unintended field in the packet, treating data of one type as data of another type.
190,Integer Overflow or Wraparound,Base,Stable,The product performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.,An integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may wrap to become a very small or negative number. While this may be intended behavior in circumstances that rely on wrapping, it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs. This becomes security-critical when the result is used to control looping, make a security decision, or determine the offset or size in behaviors such as memory allocation, copying, concatenation, etc.
191,Integer Underflow (Wrap or Wraparound),Base,Draft,The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.,This can happen in signed and unsigned cases.
193,Off-by-one Error,Base,Draft,A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.,
194,Unexpected Sign Extension,Variant,Incomplete,The product performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses.,
195,Signed to Unsigned Conversion Error,Variant,Draft,The product uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive.,It is dangerous to rely on implicit casts between signed and unsigned numbers because the result can take on an unexpected value and violate assumptions made by the program. Often, functions will return negative values to indicate a failure. When the result of a function is to be used as a size parameter, using these negative return values can have unexpected results. For example, if negative size values are passed to the standard memory copy or allocation functions they will be implicitly cast to a large unsigned value. This may lead to an exploitable buffer overflow or underflow condition.
196,Unsigned to Signed Conversion Error,Variant,Draft,The product uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive.,Although less frequent an issue than signed-to-unsigned conversion, unsigned-to-signed conversion can be the perfect precursor to dangerous buffer underwrite conditions that allow attackers to move down the stack where they otherwise might not have access in a normal buffer overflow condition. Buffer underwrites occur frequently when large unsigned values are cast to signed values, and then used as indexes into a buffer or for pointer arithmetic.
197,Numeric Truncation Error,Base,Incomplete,Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.,When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data. In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred.
198,Use of Incorrect Byte Ordering,Base,Draft,The product receives input from an upstream component, but it does not account for byte ordering (e.g. big-endian and little-endian) when processing the input, causing an incorrect number or value to be used.,
200,Exposure of Sensitive Information to an Unauthorized Actor,Class,Draft,The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.,There are many different kinds of mistakes that introduce information exposures. The severity of the error can range widely, depending on the context in which the product operates, the type of sensitive information that is revealed, and the benefits it may provide to an attacker. Some kinds of sensitive information include: private, personal information, such as personal messages, financial data, health records, geographic location, or contact details system status and environment, such as the operating system and installed packages business secrets and intellectual property network status and configuration the product's own code or internal state metadata, e.g. logging of connections or message headers indirect information, such as a discrepancy between two internal operations that can be observed by an outsider Information might be sensitive to different parties, each of which may have their own expectations for whether the information should be protected. These parties include: the product's own users people or organizations whose information is created or used by the product, even if they are not direct product users the product's administrators, including the admins of the system(s) and/or networks on which the product operates the developer Information exposures can occur in different ways: the code explicitly inserts sensitive information into resources or messages that are intentionally made accessible to unauthorized actors, but should not contain the information - i.e., the information should have been scrubbed or sanitized a different weakness or mistake indirectly inserts the sensitive information into resources, such as a web script error revealing the full system path of the program. the code manages resources that intentionally contain sensitive information, but the resources are unintentionally made accessible to unauthorized actors. In this case, the information exposure is resultant - i.e., a different weakness enabled the access to the information in the first place. It is common practice to describe any loss of confidentiality as an information exposure, but this can lead to overuse of CWE-200 in CWE mapping. From the CWE perspective, loss of confidentiality is a technical impact that can arise from dozens of different weaknesses, such as insecure file permissions or out-of-bounds read. CWE-200 and its lower-level descendants are intended to cover the mistakes that occur in behaviors that explicitly manage, store, transfer, or cleanse sensitive information.
201,Insertion of Sensitive Information Into Sent Data,Base,Draft,The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.,Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure).
202,Exposure of Sensitive Information Through Data Queries,Variant,Draft,When trying to keep information confidential, an attacker can often infer some of the information by using statistics.,In situations where data should not be tied to individual users, but a large number of users should be able to make queries that scrub the identity of users, it may be possible to get information about a user -- e.g., by specifying search terms that are known to be unique to that user.
203,Observable Discrepancy,Base,Incomplete,The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.,Discrepancies can take many forms, and variations may be detectable in timing, control flow, communications such as replies or requests, or general behavior. These discrepancies can reveal information about the product's operation or internal state to an unauthorized actor. In some cases, discrepancies can be used by attackers to form a side channel.
204,Observable Response Discrepancy,Base,Incomplete,The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.,This issue frequently occurs during authentication, where a difference in failed-login messages could allow an attacker to determine if the username is valid or not. These exposures can be inadvertent (bug) or intentional (design).
205,Observable Behavioral Discrepancy,Base,Incomplete,The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality.,Ideally, a product should provide as little information about its internal operations as possible. Otherwise, attackers could use knowledge of these internal operations to simplify or optimize their attack. In some cases, behavioral discrepancies can be used by attackers to form a side channel.
206,Observable Internal Behavioral Discrepancy,Variant,Incomplete,The product performs multiple behaviors that are combined to produce a single result, but the individual behaviors are observable separately in a way that allows attackers to reveal internal state or internal decision points.,Ideally, a product should provide as little information as possible to an attacker. Any hints that the attacker may be making progress can then be used to simplify or optimize the attack. For example, in a login procedure that requires a username and password, ultimately there is only one decision: success or failure. However, internally, two separate actions are performed: determining if the username exists, and checking if the password is correct. If the product behaves differently based on whether the username exists or not, then the attacker only needs to concentrate on the password.
207,Observable Behavioral Discrepancy With Equivalent Products,Variant,Draft,The product operates in an environment in which its existence or specific identity should not be known, but it behaves differently than other products with equivalent functionality, in a way that is observable to an attacker.,For many kinds of products, multiple products may be available that perform the same functionality, such as a web server, network interface, or intrusion detection system. Attackers often perform fingerprinting, which uses discrepancies in order to identify which specific product is in use. Once the specific product has been identified, the attacks can be made more customized and efficient. Often, an organization might intentionally allow the specific product to be identifiable. However, in some environments, the ability to identify a distinct product is unacceptable, and it is expected that every product would behave in exactly the same way. In these more restricted environments, a behavioral difference might pose an unacceptable risk if it makes it easier to identify the product's vendor, model, configuration, version, etc.
208,Observable Timing Discrepancy,Base,Incomplete,Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.,In security-relevant contexts, even small variations in timing can be exploited by attackers to indirectly infer certain details about the product's internal operations. For example, in some cryptographic algorithms, attackers can use timing differences to infer certain properties about a private key, making the key easier to guess. Timing discrepancies effectively form a timing side channel.
209,Generation of Error Message Containing Sensitive Information,Base,Draft,The product generates an error message that includes sensitive information about its environment, users, or associated data.,The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more serious attacks. The error message may be created in different ways: self-generated: the source code explicitly constructs the error message and delivers it externally-generated: the external environment, such as a language interpreter, handles the error and constructs its own message, whose contents are not under direct control by the programmer An attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of .. sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
210,Self-generated Error Message Containing Sensitive Information,Base,Draft,The product identifies an error condition and creates its own diagnostic or error messages that contain sensitive information.,
211,Externally-Generated Error Message Containing Sensitive Information,Base,Incomplete,The product performs an operation that triggers an external diagnostic or error message that is not directly generated or controlled by the product, such as an error generated by the programming language interpreter that a software application uses. The error can contain sensitive system information.,
212,Improper Removal of Sensitive Information Before Storage or Transfer,Base,Incomplete,The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.,Resources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing. For example, a product for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site.
213,Exposure of Sensitive Information Due to Incompatible Policies,Base,Draft,The product's intended functionality exposes information to certain actors in accordance with the developer's security policy, but this information is regarded as sensitive according to the intended security policies of other stakeholders such as the product's administrator, users, or others whose information is being processed.,When handling information, the developer must consider whether the information is regarded as sensitive by different stakeholders, such as users or administrators. Each stakeholder effectively has its own intended security policy that the product is expected to uphold. When a developer does not treat that information as sensitive, this can introduce a vulnerability that violates the expectations of the product's users.
214,Invocation of Process Using Visible Sensitive Information,Base,Incomplete,A process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.,Many operating systems allow a user to list information about processes that are owned by other users. Other users could see information such as command line arguments or environment variable settings. When this data contains sensitive information such as credentials, it might allow other users to launch an attack against the product or related resources.
215,Insertion of Sensitive Information Into Debugging Code,Base,Draft,The product inserts sensitive information into debugging code, which could expose this information if the debugging code is not disabled in production.,When debugging, it may be necessary to report detailed information to the programmer. However, if the debugging code is not disabled when the product is operating in a production environment, then this sensitive information may be exposed to attackers.
219,Storage of File with Sensitive Data Under Web Root,Variant,Draft,The product stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties.,Besides public-facing web pages and code, products may store sensitive data, code that is not directly invoked, or other files under the web document root of the web server. If the server is not configured or otherwise used to prevent direct access to those files, then attackers may obtain this sensitive data.
220,Storage of File With Sensitive Data Under FTP Root,Variant,Draft,The product stores sensitive data under the FTP server root with insufficient access control, which might make it accessible to untrusted parties.,
221,Information Loss or Omission,Class,Incomplete,The product does not record, or improperly records, security-relevant information that leads to an incorrect decision or hampers later analysis.,This can be resultant, e.g. a buffer overflow might trigger a crash before the product can log the event.
222,Truncation of Security-relevant Information,Base,Draft,The product truncates the display, recording, or processing of security-relevant information in a way that can obscure the source or nature of an attack.,
223,Omission of Security-relevant Information,Base,Draft,The product does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe.,
224,Obscured Security-relevant Information by Alternate Name,Base,Incomplete,The product records security-relevant information according to an alternate name of the affected entity, instead of the canonical name.,
226,Sensitive Information in Resource Not Removed Before Reuse,Base,Draft,The product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or zeroize the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.,When resources are released, they can be made available for reuse. For example, after memory is de-allocated, an operating system may make the memory available to another process, or disk space may be reallocated when a file is deleted. As removing information requires time and additional resources, operating systems do not usually clear the previously written information. Even when the resource is reused by the same process, this weakness can arise when new data is not as large as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, the information may be read by less trustworthy parties when the memory is reallocated. This weakness can apply in hardware, such as when a device or system switches between power, sleep, or debug states during normal operation, or when execution changes to different users or privilege levels.
228,Improper Handling of Syntactically Invalid Structure,Class,Incomplete,The product does not handle or incorrectly handles input that is not syntactically well-formed with respect to the associated specification.,
229,Improper Handling of Values,Base,Incomplete,The product does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined.,
230,Improper Handling of Missing Values,Variant,Draft,The product does not handle or incorrectly handles when a parameter, field, or argument name is specified, but the associated value is missing, i.e. it is empty, blank, or null.,
231,Improper Handling of Extra Values,Variant,Draft,The product does not handle or incorrectly handles when more values are provided than expected.,
232,Improper Handling of Undefined Values,Variant,Draft,The product does not handle or incorrectly handles when a value is not defined or supported for the associated parameter, field, or argument name.,
233,Improper Handling of Parameters,Base,Incomplete,The product does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.,
234,Failure to Handle Missing Parameter,Variant,Incomplete,If too few arguments are sent to a function, the function will still pop the expected number of arguments from the stack. Potentially, a variable number of arguments could be exhausted in a function as well.,
235,Improper Handling of Extra Parameters,Variant,Draft,The product does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.,
236,Improper Handling of Undefined Parameters,Variant,Draft,The product does not handle or incorrectly handles when a particular parameter, field, or argument name is not defined or supported by the product.,
237,Improper Handling of Structural Elements,Base,Incomplete,The product does not handle or incorrectly handles inputs that are related to complex structures.,
238,Improper Handling of Incomplete Structural Elements,Variant,Draft,The product does not handle or incorrectly handles when a particular structural element is not completely specified.,
239,Failure to Handle Incomplete Element,Variant,Draft,The product does not properly handle when a particular element is not completely specified.,
240,Improper Handling of Inconsistent Structural Elements,Base,Draft,The product does not handle or incorrectly handles when two or more structural elements should be consistent, but are not.,
241,Improper Handling of Unexpected Data Type,Base,Draft,The product does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z).,
242,Use of Inherently Dangerous Function,Base,Draft,The product calls a function that can never be guaranteed to work safely.,Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account. The gets() function is unsafe because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to gets() and overflow the destination buffer. Similarly, the >> operator is unsafe to use when reading into a statically-allocated character array because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to the >> operator and overflow the destination buffer.
243,Creation of chroot Jail Without Changing Working Directory,Variant,Draft,The product uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail.,Improper use of chroot() may allow attackers to escape from the chroot jail. The chroot() function call does not change the process's current working directory, so relative paths may still refer to file system resources outside of the chroot jail after chroot() has been called.
244,Improper Clearing of Heap Memory Before Release ('Heap Inspection'),Variant,Draft,Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory.,When sensitive data such as a password or an encryption key is not removed from memory, it could be exposed to an attacker using a heap inspection attack that reads the sensitive data using memory dumps or other methods. The realloc() function is commonly used to increase the size of a block of allocated memory. This operation often requires copying the contents of the old memory block into a new and larger block. This operation leaves the contents of the original block intact but inaccessible to the program, preventing the program from being able to scrub sensitive data from memory. If an attacker can later examine the contents of a memory dump, the sensitive data could be exposed.
245,J2EE Bad Practices: Direct Management of Connections,Variant,Draft,The J2EE application directly manages connections, instead of using the container's connection management facilities.,The J2EE standard forbids the direct management of connections. It requires that applications use the container's resource management facilities to obtain connections to resources. Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard.
246,J2EE Bad Practices: Direct Use of Sockets,Variant,Draft,The J2EE application directly uses sockets instead of using framework method calls.,The J2EE standard permits the use of sockets only for the purpose of communication with legacy systems when no higher-level protocol is available. Authoring your own communication protocol requires wrestling with difficult security issues. Without significant scrutiny by a security expert, chances are good that a custom communication protocol will suffer from security problems. Many of the same issues apply to a custom implementation of a standard protocol. While there are usually more resources available that address security concerns related to implementing a standard protocol, these resources are also available to attackers.
248,Uncaught Exception,Base,Draft,An exception is thrown from a function, but it is not caught.,When an exception is not caught, it may cause the program to crash or expose sensitive information.
250,Execution with Unnecessary Privileges,Base,Draft,The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.,New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges. Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.
252,Unchecked Return Value,Base,Draft,The product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.,Two common programmer assumptions are this function call can never fail and it doesn't matter if this function call fails. If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the product is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges.
253,Incorrect Check of Function Return Value,Base,Incomplete,The product incorrectly checks a return value from a function, which prevents it from detecting errors or exceptional conditions.,Important and common functions will return some value about the success of its actions. This will alert the program whether or not to handle any errors caused by that function.
256,Plaintext Storage of a Password,Base,Incomplete,Storing a password in plaintext may result in a system compromise.,Password management issues occur when a password is stored in plaintext in an application's properties, configuration file, or memory. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource. In some contexts, even storage of a plaintext password in memory is considered a security risk if the password is not cleared immediately after it is used.
257,Storing Passwords in a Recoverable Format,Base,Incomplete,The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.,
258,Empty Password in Configuration File,Variant,Incomplete,Using an empty string as a password is insecure.,
259,Use of Hard-coded Password,Variant,Draft,The product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.,A hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations: Inbound: the product contains an authentication mechanism that checks for a hard-coded password. Outbound: the product connects to another system or component, and it contains hard-coded password for connecting to that component. In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the product will have the same password, even across different organizations, this enables massive attacks such as worms to take place. The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.
260,Password in Configuration File,Base,Incomplete,The product stores a password in a configuration file that might be accessible to actors who do not know the password.,This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing.
261,Weak Encoding for Password,Base,Incomplete,Obscuring a password with a trivial encoding does not protect the password.,Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. A programmer can attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password.
262,Not Using Password Aging,Base,Draft,The product does not have a mechanism in place for managing password aging.,Password aging (or password rotation) is a policy that forces users to change their passwords after a defined time period passes, such as every 30 or 90 days. Without mechanisms such as aging, users might not change their passwords in a timely manner. Note that while password aging was once considered an important security feature, it has since fallen out of favor by many, because it is not as effective against modern threats compared to other mechanisms such as slow hashes. In addition, forcing frequent changes can unintentionally encourage users to select less-secure passwords. However, password aging is still in use due to factors such as compliance requirements, e.g., Payment Card Industry Data Security Standard (PCI DSS).
263,Password Aging with Long Expiration,Base,Draft,The product supports password aging, but the expiration period is too long.,Password aging (or password rotation) is a policy that forces users to change their passwords after a defined time period passes, such as every 30 or 90 days. A long expiration provides more time for attackers to conduct password cracking before users are forced to change to a new password. Note that while password aging was once considered an important security feature, it has since fallen out of favor by many, because it is not as effective against modern threats compared to other mechanisms such as slow hashes. In addition, forcing frequent changes can unintentionally encourage users to select less-secure passwords. However, password aging is still in use due to factors such as compliance requirements, e.g., Payment Card Industry Data Security Standard (PCI DSS).
266,Incorrect Privilege Assignment,Base,Draft,A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.,
267,Privilege Defined With Unsafe Actions,Base,Incomplete,A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.,
268,Privilege Chaining,Base,Draft,Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination.,
269,Improper Privilege Management,Class,Draft,The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.,
270,Privilege Context Switching Error,Base,Draft,The product does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.,
271,Privilege Dropping / Lowering Errors,Class,Incomplete,The product does not drop privileges before passing control of a resource to an actor that does not have those privileges.,In some contexts, a system executing with elevated permissions will hand off a process/file/etc. to another process or user. If the privileges of an entity are not reduced, then elevated privileges are spread throughout a system and possibly to an attacker.
272,Least Privilege Violation,Base,Incomplete,The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.,
273,Improper Check for Dropped Privileges,Base,Incomplete,The product attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded.,If the drop fails, the product will continue to run with the raised privileges, which might provide additional access to unprivileged users.
274,Improper Handling of Insufficient Privileges,Base,Draft,The product does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses.,
276,Incorrect Default Permissions,Base,Draft,During installation, installed file permissions are set to allow anyone to modify those files.,
277,Insecure Inherited Permissions,Variant,Draft,A product defines a set of insecure permissions that are inherited by objects that are created by the program.,
278,Insecure Preserved Inherited Permissions,Variant,Incomplete,A product inherits a set of insecure permissions for an object, e.g. when copying from an archive file, without user awareness or involvement.,
279,Incorrect Execution-Assigned Permissions,Variant,Draft,While it is executing, the product sets the permissions of an object in a way that violates the intended permissions that have been specified by the user.,
280,Improper Handling of Insufficient Permissions or Privileges ,Base,Draft,The product does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the product in an invalid state.,
281,Improper Preservation of Permissions,Base,Draft,The product does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended.,
282,Improper Ownership Management,Class,Draft,The product assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.,
283,Unverified Ownership,Base,Draft,The product does not properly verify that a critical resource is owned by the proper entity.,
284,Improper Access Control,Pillar,Incomplete,The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.,Access control involves the use of several protection mechanisms such as: Authentication (proving the identity of an actor) Authorization (ensuring that a given actor can access a resource), and Accountability (tracking of activities that were performed) When any mechanism is not applied or otherwise fails, attackers can compromise the security of the product by gaining privileges, reading sensitive information, executing commands, evading detection, etc. There are two distinct behaviors that can introduce access control weaknesses: Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator. Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.
285,Improper Authorization,Class,Draft,The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.,Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource. When access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.
286,Incorrect User Management,Class,Incomplete,The product does not properly manage a user within its environment.,Users can be assigned to the wrong group (class) of permissions resulting in unintended access rights to sensitive objects.
287,Improper Authentication,Class,Draft,When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.,
288,Authentication Bypass Using an Alternate Path or Channel,Base,Incomplete,A product requires authentication, but the product has an alternate path or channel that does not require authentication.,
289,Authentication Bypass by Alternate Name,Base,Incomplete,The product performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor.,
290,Authentication Bypass by Spoofing,Base,Incomplete,This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.,
293,Using Referer Field for Authentication,Variant,Draft,The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking.,
294,Authentication Bypass by Capture-replay,Base,Incomplete,A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).,Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server.
296,Improper Following of a Certificate's Chain of Trust,Base,Draft,The product does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate.,If a system does not follow the chain of trust of a certificate to a root server, the certificate loses all usefulness as a metric of trust. Essentially, the trust gained from a certificate is derived from a chain of trust -- with a reputable trusted entity at the end of that list. The end user must trust that reputable source, and this reputable source must vouch for the resource in question through the medium of the certificate. In some cases, this trust traverses several entities who vouch for one another. The entity trusted by the end user is at one end of this trust chain, while the certificate-wielding resource is at the other end of the chain. If the user receives a certificate at the end of one of these trust chains and then proceeds to check only that the first link in the chain, no real trust has been derived, since the entire chain must be traversed back to a trusted source to verify the certificate. There are several ways in which the chain of trust might be broken, including but not limited to: Any certificate in the chain is self-signed, unless it the root. Not every intermediate certificate is checked, starting from the original certificate all the way up to the root certificate. An intermediate, CA-signed certificate does not have the expected Basic Constraints or other important extensions. The root certificate has been compromised or authorized to the wrong party.
297,Improper Validation of Certificate with Host Mismatch,Variant,Incomplete,The product communicates with a host that provides a certificate, but the product does not properly ensure that the certificate is actually associated with that host.,Even if a certificate is well-formed, signed, and follows the chain of trust, it may simply be a valid certificate for a different site than the site that the product is interacting with. If the certificate's host-specific data is not properly checked - such as the Common Name (CN) in the Subject or the Subject Alternative Name (SAN) extension of an X.509 certificate - it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data, impersonating a trusted host. In order to ensure data integrity, the certificate must be valid and it must pertain to the site that is being accessed. Even if the product attempts to check the hostname, it is still possible to incorrectly check the hostname. For example, attackers could create a certificate with a name that begins with a trusted name followed by a NUL byte, which could cause some string-based comparisons to only examine the portion that contains the trusted name. This weakness can occur even when the product uses Certificate Pinning, if the product does not verify the hostname at the time a certificate is pinned.
298,Improper Validation of Certificate Expiration,Variant,Draft,A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age.,When the expiration of a certificate is not taken into account, no trust has necessarily been conveyed through it. Therefore, the validity of the certificate cannot be verified and all benefit of the certificate is lost.
299,Improper Check for Certificate Revocation,Base,Draft,The product does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised.,An improper check for certificate revocation is a far more serious flaw than related certificate failures. This is because the use of any revoked certificate is almost certainly malicious. The most common reason for certificate revocation is compromise of the system in question, with the result that no legitimate servers will be using a revoked certificate, unless they are sorely out of sync.
300,Channel Accessible by Non-Endpoint,Class,Draft,The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.,In order to establish secure communication between two parties, it is often important to adequately verify the identity of entities at each end of the communication channel. Inadequate or inconsistent verification may result in insufficient or incorrect identification of either communicating entity. This can have negative consequences such as misplaced trust in the entity at the other end of the channel. An attacker can leverage this by interposing between the communicating entities and masquerading as the original entity. In the absence of sufficient verification of identity, such an attacker can eavesdrop and potentially modify the communication between the original entities.
301,Reflection Attack in an Authentication Protocol,Base,Draft,Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.,A mutual authentication protocol requires each party to respond to a random challenge by the other party by encrypting it with a pre-shared key. Often, however, such protocols employ the same pre-shared key for communication with a number of different entities. A malicious user or an attacker can easily compromise this protocol without possessing the correct key by employing a reflection attack on the protocol. Reflection attacks capitalize on mutual authentication schemes in order to trick the target into revealing the secret shared between it and another valid user. In a basic mutual-authentication scheme, a secret is known to both the valid user and the server; this allows them to authenticate. In order that they may verify this shared secret without sending it plainly over the wire, they utilize a Diffie-Hellman-style scheme in which they each pick a value, then request the hash of that value as keyed by the shared secret. In a reflection attack, the attacker claims to be a valid user and requests the hash of a random value from the server. When the server returns this value and requests its own value to be hashed, the attacker opens another connection to the server. This time, the hash requested by the attacker is the value which the server requested in the first connection. When the server returns this hashed value, it is used in the first connection, authenticating the attacker successfully as the impersonated valid user.
302,Authentication Bypass by Assumed-Immutable Data,Base,Incomplete,The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.,
303,Incorrect Implementation of Authentication Algorithm,Base,Draft,The requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.,This incorrect implementation may allow authentication to be bypassed.
304,Missing Critical Step in Authentication,Base,Draft,The product implements an authentication technique, but it skips a step that weakens the technique.,Authentication techniques should follow the algorithms that define them exactly, otherwise authentication can be bypassed or more easily subjected to brute force attacks.
305,Authentication Bypass by Primary Weakness,Base,Draft,The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error.,
306,Missing Authentication for Critical Function,Base,Draft,The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.,As data is migrated to the cloud, if access does not require authentication, it can be easier for attackers to access the data from anywhere on the Internet.
307,Improper Restriction of Excessive Authentication Attempts,Base,Draft,The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.,
308,Use of Single-factor Authentication,Base,Draft,The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.,While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required.
309,Use of Password System for Primary Authentication,Base,Draft,The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.,
311,Missing Encryption of Sensitive Data,Class,Draft,The product does not encrypt sensitive or critical information before storage or transmission.,The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys.
312,Cleartext Storage of Sensitive Information,Base,Draft,The product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.,Because the information is stored in cleartext (i.e., unencrypted), attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. When organizations adopt cloud services, it can be easier for attackers to access the data from anywhere on the Internet. In some systems/environments such as cloud, the use of double encryption (at both the software and hardware layer) might be required, and the developer might be solely responsible for both layers, instead of shared responsibility with the administrator of the broader system/environment.
313,Cleartext Storage in a File or on Disk,Variant,Draft,The product stores sensitive information in cleartext in a file, or on disk.,The sensitive information could be read by attackers with access to the file, or with physical or administrator access to the raw disk. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.
314,Cleartext Storage in the Registry,Variant,Draft,The product stores sensitive information in cleartext in the registry.,Attackers can read the information by accessing the registry key. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.
315,Cleartext Storage of Sensitive Information in a Cookie,Variant,Draft,The product stores sensitive information in cleartext in a cookie.,Attackers can use widely-available tools to view the cookie and read the sensitive information. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.
316,Cleartext Storage of Sensitive Information in Memory,Variant,Draft,The product stores sensitive information in cleartext in memory.,The sensitive memory might be saved to disk, stored in a core dump, or remain uncleared if the product crashes, or if the programmer does not properly clear the memory before freeing it. It could be argued that such problems are usually only exploitable by those with administrator privileges. However, swapping could cause the memory to be written to disk and leave it accessible to physical attack afterwards. Core dump files might have insecure permissions or be stored in archive files that are accessible to untrusted people. Or, uncleared sensitive memory might be inadvertently exposed to attackers due to another weakness.
317,Cleartext Storage of Sensitive Information in GUI,Variant,Draft,The product stores sensitive information in cleartext within the GUI.,An attacker can often obtain data from a GUI, even if hidden, by using an API to directly access GUI objects such as windows and menus. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.
318,Cleartext Storage of Sensitive Information in Executable,Variant,Draft,The product stores sensitive information in cleartext in an executable.,Attackers can reverse engineer binary code to obtain secret data. This is especially easy when the cleartext is plain ASCII. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.
319,Cleartext Transmission of Sensitive Information,Base,Draft,The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.,Many communication channels can be sniffed (monitored) by adversaries during data transmission. For example, in networking, packets can traverse many intermediary nodes from the source to the destination, whether across the internet, an internal network, the cloud, etc. Some actors might have privileged access to a network interface or any link along the channel, such as a router, but they might not be authorized to collect the underlying data. As a result, network traffic could be sniffed by adversaries, spilling security-critical data. Applicable communication channels are not limited to software products. Applicable channels include hardware-specific technologies such as internal hardware networks and external debug channels, supporting remote JTAG debugging. When mitigations are not applied to combat adversaries within the product's threat model, this weakness significantly lowers the difficulty of exploitation by such adversaries. When full communications are recorded or logged, such as with a packet dump, an adversary could attempt to obtain the dump long after the transmission has occurred and try to sniff the cleartext from the recorded communications in the dump itself.
321,Use of Hard-coded Cryptographic Key,Variant,Draft,The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.,
322,Key Exchange without Entity Authentication,Base,Draft,The product performs a key exchange with an actor without verifying the identity of that actor.,Performing a key exchange will preserve the integrity of the information sent between two entities, but this will not guarantee that the entities are who they claim they are. This may enable an attacker to impersonate an actor by modifying traffic between the two entities. Typically, this involves a victim client that contacts a malicious server that is impersonating a trusted server. If the client skips authentication or ignores an authentication failure, the malicious server may request authentication information from the user. The malicious server can then use this authentication information to log in to the trusted server using the victim's credentials, sniff traffic between the victim and trusted server, etc.
323,Reusing a Nonce, Key Pair in Encryption,Variant,Incomplete,Nonces should be used for the present occasion and only once.,
324,Use of a Key Past its Expiration Date,Base,Draft,The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.,While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength.
325,Missing Cryptographic Step,Base,Draft,The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by the algorithm.,
326,Inadequate Encryption Strength,Class,Draft,The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.,A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.
327,Use of a Broken or Risky Cryptographic Algorithm,Class,Draft,The product uses a broken or risky cryptographic algorithm or protocol.,Cryptographic algorithms are the methods by which data is scrambled to prevent observation or influence by unauthorized actors. Insecure cryptography can be exploited to expose sensitive information, modify data in unexpected ways, spoof identities of other users or devices, or other impacts. It is very difficult to produce a secure algorithm, and even high-profile algorithms by accomplished cryptographic experts have been broken. Well-known techniques exist to break or weaken various kinds of cryptography. Accordingly, there are a small number of well-understood and heavily studied algorithms that should be used by most products. Using a non-standard or known-insecure algorithm is dangerous because a determined adversary may be able to break the algorithm and compromise whatever data has been protected. Since the state of cryptography advances so rapidly, it is common for an algorithm to be considered unsafe even if it was once thought to be strong. This can happen when new attacks are discovered, or if computing power increases so much that the cryptographic algorithm no longer provides the amount of protection that was originally thought. For a number of reasons, this weakness is even more challenging to manage with hardware deployment of cryptographic algorithms as opposed to software implementation. First, if a flaw is discovered with hardware-implemented cryptography, the flaw cannot be fixed in most cases without a recall of the product, because hardware is not easily replaceable like software. Second, because the hardware product is expected to work for years, the adversary's computing power will only increase over time.
328,Use of Weak Hash,Base,Draft,The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).,A hash function is defined as an algorithm that maps arbitrarily sized data into a fixed-sized digest (output) such that the following properties hold: 1. The algorithm is not invertible (also called one-way or not reversible) 2. The algorithm is deterministic; the same input produces the same digest every time Building on this definition, a cryptographic hash function must also ensure that a malicious actor cannot leverage the hash function to have a reasonable chance of success at determining any of the following: 1. the original input (preimage attack), given only the digest 2. another input that can produce the same digest (2nd preimage attack), given the original input 3. a set of two or more inputs that evaluate to the same digest (birthday attack), given the actor can arbitrarily choose the inputs to be hashed and can do so a reasonable amount of times What is regarded as reasonable varies by context and threat model, but in general, reasonable could cover any attack that is more efficient than brute force (i.e., on average, attempting half of all possible combinations). Note that some attacks might be more efficient than brute force but are still not regarded as achievable in the real world. Any algorithm does not meet the above conditions will generally be considered weak for general use in hashing. In addition to algorithmic weaknesses, a hash function can be made weak by using the hash in a security context that breaks its security guarantees. For example, using a hash function without a salt for storing passwords (that are sufficiently short) could enable an adversary to create a rainbow table [REF-637] to recover the password under certain conditions; this attack works against such hash functions as MD5, SHA-1, and SHA-2.
329,Generation of Predictable IV with CBC Mode,Variant,Draft,The product generates and uses a predictable initialization Vector (IV) with Cipher Block Chaining (CBC) Mode, which causes algorithms to be susceptible to dictionary attacks when they are encrypted under the same key.,CBC mode eliminates a weakness of Electronic Code Book (ECB) mode by allowing identical plaintext blocks to be encrypted to different ciphertext blocks. This is possible by the XOR-ing of an IV with the initial plaintext block so that every plaintext block in the chain is XOR'd with a different value before encryption. If IVs are reused, then identical plaintexts would be encrypted to identical ciphertexts. However, even if IVs are not identical but are predictable, then they still break the security of CBC mode against Chosen Plaintext Attacks (CPA).
330,Use of Insufficiently Random Values,Class,Stable,The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.,When product generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information.
331,Insufficient Entropy,Base,Draft,The product uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.,
332,Insufficient Entropy in PRNG,Variant,Draft,The lack of entropy available for, or used by, a Pseudo-Random Number Generator (PRNG) can be a stability and security threat.,
333,Improper Handling of Insufficient Entropy in TRNG,Variant,Draft,True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block.,The rate at which true random numbers can be generated is limited. It is important that one uses them only when they are needed for security.
334,Small Space of Random Values,Base,Draft,The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks.,
335,Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG),Base,Draft,The product uses a Pseudo-Random Number Generator (PRNG) but does not correctly manage seeds.,PRNGs are deterministic and, while their output appears random, they cannot actually create entropy. They rely on cryptographically secure and unique seeds for entropy so proper seeding is critical to the secure operation of the PRNG. Management of seeds could be broken down into two main areas: (1) protecting seeds as cryptographic material (such as a cryptographic key); (2) whenever possible, using a uniquely generated seed from a cryptographically secure source PRNGs require a seed as input to generate a stream of numbers that are functionally indistinguishable from random numbers. While the output is, in many cases, sufficient for cryptographic uses, the output of any PRNG is directly determined by the seed provided as input. If the seed can be ascertained by a third party, the entire output of the PRNG can be made known to them. As such, the seed should be kept secret and should ideally not be able to be guessed. For example, the current time may be a poor seed. Knowing the approximate time the PRNG was seeded greatly reduces the possible key space. Seeds do not necessarily need to be unique, but reusing seeds may open up attacks if the seed is discovered.
336,Same Seed in Pseudo-Random Number Generator (PRNG),Variant,Draft,A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized.,Given the deterministic nature of PRNGs, using the same seed for each initialization will lead to the same output in the same order. If an attacker can guess (or knows) the seed, then the attacker may be able to determine the random numbers that will be produced from the PRNG.
337,Predictable Seed in Pseudo-Random Number Generator (PRNG),Variant,Draft,A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.,The use of predictable seeds significantly reduces the number of possible seeds that an attacker would need to test in order to predict which random numbers will be generated by the PRNG.
338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG),Base,Draft,The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong.,When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks. Often a pseudo-random number generator (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms that use random numbers. Weak generators generally take less processing power and/or do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography.
339,Small Seed Space in PRNG,Variant,Draft,A Pseudo-Random Number Generator (PRNG) uses a relatively small seed space, which makes it more susceptible to brute force attacks.,PRNGs are entirely deterministic once seeded, so it should be extremely difficult to guess the seed. If an attacker can collect the outputs of a PRNG and then brute force the seed by trying every possibility to see which seed matches the observed output, then the attacker will know the output of any subsequent calls to the PRNG. A small seed space implies that the attacker will have far fewer possible values to try to exhaust all possibilities.
340,Generation of Predictable Numbers or Identifiers,Class,Incomplete,The product uses a scheme that generates numbers or identifiers that are more predictable than required.,
341,Predictable from Observable State,Base,Draft,A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc.,
342,Predictable Exact Value from Previous Values,Base,Draft,An exact value or random number can be precisely predicted by observing previous values.,
343,Predictable Value Range from Previous Values,Base,Draft,The product's random number generator produces a series of values which, when observed, can be used to infer a relatively small range of possibilities for the next value that could be generated.,The output of a random number generator should not be predictable based on observations of previous values. In some cases, an attacker cannot predict the exact value that will be produced next, but can narrow down the possibilities significantly. This reduces the amount of effort to perform a brute force attack. For example, suppose the product generates random numbers between 1 and 100, but it always produces a larger value until it reaches 100. If the generator produces an 80, then the attacker knows that the next value will be somewhere between 81 and 100. Instead of 100 possibilities, the attacker only needs to consider 20.
344,Use of Invariant Value in Dynamically Changing Context,Base,Draft,The product uses a constant value, name, or reference, but this value can (or should) vary across different environments.,
345,Insufficient Verification of Data Authenticity,Class,Draft,The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.,
346,Origin Validation Error,Class,Draft,The product does not properly verify that the source of data or communication is valid.,
347,Improper Verification of Cryptographic Signature,Base,Draft,The product does not verify, or incorrectly verifies, the cryptographic signature for data.,
348,Use of Less Trusted Source,Base,Draft,The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.,
349,Acceptance of Extraneous Untrusted Data With Trusted Data,Base,Draft,The product, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.,
350,Reliance on Reverse DNS Resolution for a Security-Critical Action,Variant,Draft,The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.,Since DNS names can be easily spoofed or misreported, and it may be difficult for the product to detect if a trusted DNS server has been compromised, DNS names do not constitute a valid authentication mechanism. When the product performs a reverse DNS resolution for an IP address, if an attacker controls the DNS server for that IP address, then the attacker can cause the server to return an arbitrary hostname. As a result, the attacker may be able to bypass authentication, cause the wrong hostname to be recorded in log files to hide activities, or perform other attacks. Attackers can spoof DNS names by either (1) compromising a DNS server and modifying its records (sometimes called DNS cache poisoning), or (2) having legitimate control over a DNS server associated with their IP address.
351,Insufficient Type Distinction,Base,Draft,The product does not properly distinguish between different types of elements in a way that leads to insecure behavior.,
353,Missing Support for Integrity Check,Base,Draft,The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.,If integrity check values or checksums are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. Excluding further sanity checks and input validation performed by applications, the protocol's checksum is the most important level of checksum, since it can be performed more completely than at any previous level and takes into account entire messages, as opposed to single packets.
354,Improper Validation of Integrity Check Value,Base,Draft,The product does not validate or incorrectly validates the integrity check values or checksums of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.,Improper validation of checksums before use results in an unnecessary risk that can easily be mitigated. The protocol specification describes the algorithm used for calculating the checksum. It is then a simple matter of implementing the calculation and verifying that the calculated checksum and the received checksum match. Improper verification of the calculated checksum and the received checksum can lead to far greater consequences.
356,Product UI does not Warn User of Unsafe Actions,Base,Incomplete,The product's user interface does not warn the user before undertaking an unsafe action on behalf of that user. This makes it easier for attackers to trick users into inflicting damage to their system.,Product systems should warn users that a potentially dangerous action may occur if the user proceeds. For example, if the user downloads a file from an unknown source and attempts to execute the file on their machine, then the application's GUI can indicate that the file is unsafe.
357,Insufficient UI Warning of Dangerous Operations,Base,Draft,The user interface provides a warning to a user regarding dangerous or sensitive operations, but the warning is not noticeable enough to warrant attention.,
358,Improperly Implemented Security Check for Standard,Base,Draft,The product does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique.,
359,Exposure of Private Personal Information to an Unauthorized Actor,Base,Incomplete,The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.,There are many types of sensitive information that products must protect from attackers, including system data, communications, configuration, business secrets, intellectual property, and an individual's personal (private) information. Private personal information may include a password, phone number, geographic location, personal messages, credit card number, etc. Private information is important to consider whether the person is a user of the product, or part of a data set that is processed by the product. An exposure of private information does not necessarily prevent the product from working properly, and in fact the exposure might be intended by the developer, e.g. as part of data sharing with other organizations. However, the exposure of personal private information can still be undesirable or explicitly prohibited by law or regulation. Some types of private information include: Government identifiers, such as Social Security Numbers Contact information, such as home addresses and telephone numbers Geographic location - where the user is (or was) Employment history Financial data - such as credit card numbers, salary, bank accounts, and debts Pictures, video, or audio Behavioral patterns - such as web surfing history, when certain activities are performed, etc. Relationships (and types of relationships) with others - family, friends, contacts, etc. Communications - e-mail addresses, private messages, text messages, chat logs, etc. Health - medical conditions, insurance status, prescription records Account passwords and other credentials Some of this information may be characterized as PII (Personally Identifiable Information), Protected Health Information (PHI), etc. Categories of private information may overlap or vary based on the intended usage or the policies and practices of a particular industry. Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.
360,Trust of System Event Data,Base,Incomplete,Security based on event locations are insecure and can be spoofed.,Events are a messaging system which may provide control data to programs listening for events. Events often do not have any type of authentication framework to allow them to be verified from a trusted source. Any application, in Windows, on a given desktop can send a message to any window on the same desktop. There is no authentication framework for these messages. Therefore, any message can be used to manipulate any process on the desktop if the process does not check the validity and safeness of those messages.
362,Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'),Class,Draft,The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.,This can have security implications when the expected synchronization is in security-critical code, such as recording whether a user is authenticated or modifying important state information that should not be influenced by an outsider. A race condition occurs within concurrent environments, and is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc. A race condition violates these properties, which are closely related: Exclusivity - the code sequence is given exclusive access to the shared resource, i.e., no other code sequence can modify properties of the shared resource before the original sequence has completed execution. Atomicity - the code sequence is behaviorally atomic, i.e., no other thread or process can concurrently execute the same sequence of instructions (or a subset) against the same resource. A race condition exists when an interfering code sequence can still access the shared resource, violating exclusivity. Programmers may assume that certain code sequences execute too quickly to be affected by an interfering code sequence; when they are not, this violates atomicity. For example, the single x++ statement may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read (the original value of x), followed by a computation (x+1), followed by a write (save the result to x). The interfering code sequence could be trusted or untrusted. A trusted interfering code sequence occurs within the product; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable product.
363,Race Condition Enabling Link Following,Base,Draft,The product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.,While developers might expect that there is a very narrow time window between the time of check and time of use, there is still a race condition. An attacker could cause the product to slow down (e.g. with memory consumption), causing the time window to become larger. Alternately, in some situations, the attacker could win the race by performing a large number of attacks.
364,Signal Handler Race Condition,Base,Incomplete,The product uses a signal handler that introduces a race condition.,Race conditions frequently occur in signal handlers, since signal handlers support asynchronous actions. These race conditions have a variety of root causes and symptoms. Attackers may be able to exploit a signal handler race condition to cause the product state to be corrupted, possibly leading to a denial of service or even code execution. These issues occur when non-reentrant functions, or state-sensitive actions occur in the signal handler, where they may be called at any time. These behaviors can violate assumptions being made by the regular code that is interrupted, or by other signal handlers that may also be invoked. If these functions are called at an inopportune moment - such as while a non-reentrant function is already running - memory corruption could occur that may be exploitable for code execution. Another signal race condition commonly found occurs when free is called within a signal handler, resulting in a double free and therefore a write-what-where condition. Even if a given pointer is set to NULL after it has been freed, a race condition still exists between the time the memory was freed and the pointer was set to NULL. This is especially problematic if the same signal handler has been set for more than one signal -- since it means that the signal handler itself may be reentered. There are several known behaviors related to signal handlers that have received the label of signal handler race condition: Shared state (e.g. global data or static variables) that are accessible to both a signal handler and regular code Shared state between a signal handler and other signal handlers Use of non-reentrant functionality within a signal handler - which generally implies that shared state is being used. For example, malloc() and free() are non-reentrant because they may use global or static data structures for managing memory, and they are indirectly used by innocent-seeming functions such as syslog(); these functions could be exploited for memory corruption and, possibly, code execution. Association of the same signal handler function with multiple signals - which might imply shared state, since the same code and resources are accessed. For example, this can be a source of double-free and use-after-free weaknesses. Use of setjmp and longjmp, or other mechanisms that prevent a signal handler from returning control back to the original functionality While not technically a race condition, some signal handlers are designed to be called at most once, and being called more than once can introduce security problems, even when there are not any concurrent calls to the signal handler. This can be a source of double-free and use-after-free weaknesses. Signal handler vulnerabilities are often classified based on the absence of a specific protection mechanism, although this style of classification is discouraged in CWE because programmers often have a choice of several different mechanisms for addressing the weakness. Such protection mechanisms may preserve exclusivity of access to the shared resource, and behavioral atomicity for the relevant code: Avoiding shared state Using synchronization in the signal handler Using synchronization in the regular code Disabling or masking other signals, which provides atomicity (which effectively ensures exclusivity)
366,Race Condition within a Thread,Base,Draft,If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.,
367,Time-of-check Time-of-use (TOCTOU) Race Condition,Base,Incomplete,The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.,This weakness can be security-relevant when an attacker can influence the state of the resource between check and use. This can happen with shared resources such as files, memory, or even variables in multithreaded programs.
368,Context Switching Race Condition,Base,Draft,A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.,This is commonly seen in web browser vulnerabilities in which the attacker can perform certain actions while the browser is transitioning from a trusted to an untrusted domain, or vice versa, and the browser performs the actions on one domain using the trust level and resources of the other domain.
369,Divide By Zero,Base,Draft,The product divides a value by zero.,This weakness typically occurs when an unexpected value is provided to the product, or if an error occurs that is not properly detected. It frequently occurs in calculations involving physical dimensions such as size, length, width, and height.
370,Missing Check for Certificate Revocation after Initial Check,Variant,Draft,The product does not check the revocation status of a certificate after its initial revocation check, which can cause the product to perform privileged actions even after the certificate is revoked at a later time.,If the revocation status of a certificate is not checked before each action that requires privileges, the system may be subject to a race condition. If a certificate is revoked after the initial check, all subsequent actions taken with the owner of the revoked certificate will lose all benefits guaranteed by the certificate. In fact, it is almost certain that the use of a revoked certificate indicates malicious activity.
372,Incomplete Internal State Distinction,Base,Draft,The product does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.,
374,Passing Mutable Objects to an Untrusted Method,Base,Draft,The product sends non-cloned mutable data as an argument to a method or function.,The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution.
375,Returning a Mutable Object to an Untrusted Caller,Base,Draft,Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function.,In situations where functions return references to mutable data, it is possible that the external code which called the function may make changes to the data sent. If this data was not previously cloned, the class will then be using modified data which may violate assumptions about its internal state.
377,Insecure Temporary File,Class,Incomplete,Creating and using insecure temporary files can leave application and system data vulnerable to attack.,
378,Creation of Temporary File With Insecure Permissions,Base,Draft,Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack.,
379,Creation of Temporary File in Directory with Insecure Permissions,Base,Incomplete,The product creates a temporary file in a directory whose permissions allow unintended actors to determine the file's existence or otherwise access that file.,On some operating systems, the fact that the temporary file exists may be apparent to any user with sufficient privileges to access that directory. Since the file is visible, the application that is using the temporary file could be known. If one has access to list the processes on the system, the attacker has gained information about what the user is doing at that time. By correlating this with the applications the user is running, an attacker could potentially discover what a user's actions are. From this, higher levels of security could be breached.
382,J2EE Bad Practices: Use of System.exit(),Variant,Draft,A J2EE application uses System.exit(), which also shuts down its container.,It is never a good idea for a web application to attempt to shut down the application container. Access to a function that can shut down the application is an avenue for Denial of Service (DoS) attacks.
383,J2EE Bad Practices: Direct Use of Threads,Variant,Draft,Thread management in a Web application is forbidden in some circumstances and is always highly error prone.,Thread management in a web application is forbidden by the J2EE standard in some circumstances and is always highly error prone. Managing threads is difficult and is likely to interfere in unpredictable ways with the behavior of the application container. Even without interfering with the container, thread management usually leads to bugs that are hard to detect and diagnose like deadlock, race conditions, and other synchronization errors.
385,Covert Timing Channel,Base,Incomplete,Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.,In some instances, knowing when data is transmitted between parties can provide a malicious user with privileged information. Also, externally monitoring the timing of operations can potentially reveal sensitive data. For example, a cryptographic operation can expose its internal state if the time it takes to perform the operation varies, based on the state. Covert channels are frequently classified as either storage or timing channels. Some examples of covert timing channels are the system's paging rate, the time a certain transaction requires to execute, and the time it takes to gain access to a shared bus.
386,Symbolic Name not Mapping to Correct Object,Base,Draft,A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time.,
390,Detection of Error Condition Without Action,Base,Draft,The product detects a specific error, but takes no actions to handle the error.,
391,Unchecked Error Condition,Base,Incomplete,[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES AND CONSIDER CWE-252, CWE-248, OR CWE-1069.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.,
392,Missing Report of Error Condition,Base,Draft,The product encounters an error but does not provide a status code or return value to indicate that an error has occurred.,
393,Return of Wrong Status Code,Base,Draft,A function or operation returns an incorrect return value or status code that does not indicate an error, but causes the product to modify its behavior based on the incorrect result.,This can lead to unpredictable behavior. If the function is used to make security-critical decisions or provide security-critical information, then the wrong status code can cause the product to assume that an action is safe, even when it is not.
394,Unexpected Status Code or Return Value,Base,Draft,The product does not properly check when a function or operation returns a value that is legitimate for the function, but is not expected by the product.,
395,Use of NullPointerException Catch to Detect NULL Pointer Dereference,Base,Draft,Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.,Programmers typically catch NullPointerException under three circumstances: The program contains a null pointer dereference. Catching the resulting exception was easier than fixing the underlying problem. The program explicitly throws a NullPointerException to signal an error condition. The code is part of a test harness that supplies unexpected input to the classes under test. Of these three circumstances, only the last is acceptable.
396,Declaration of Catch for Generic Exception,Base,Draft,Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.,Multiple catch blocks can get ugly and repetitive, but condensing catch blocks by catching a high-level class like Exception can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of Java's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention.
397,Declaration of Throws for Generic Exception,Base,Draft,Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.,Declaring a method to throw Exception or Throwable makes it difficult for callers to perform proper error handling and error recovery. Java's exception mechanism, for example, is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system.
400,Uncontrolled Resource Consumption,Class,Draft,The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.,Limited resources include memory, file system storage, database connection pool entries, and CPU. If an attacker can trigger the allocation of these limited resources, but the number or size of the resources is not controlled, then the attacker could cause a denial of service that consumes all available resources. This would prevent valid users from accessing the product, and it could potentially have an impact on the surrounding environment. For example, a memory exhaustion attack against an application could slow down the application as well as its host operating system. There are at least three distinct scenarios which can commonly lead to resource exhaustion: Lack of throttling for the number of allocated resources Losing all references to a resource before reaching the shutdown stage Not closing/returning a resource after processing Resource exhaustion problems are often result due to an incorrect implementation of the following situations: Error conditions and other exceptional circumstances. Confusion over which part of the program is responsible for releasing the resource.
401,Missing Release of Memory after Effective Lifetime,Variant,Draft,The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.,This is often triggered by improper handling of malformed data or unexpectedly interrupted sessions. In some languages, developers are responsible for tracking memory allocation and releasing the memory. If there are no more pointers or references to the memory, then it can no longer be tracked and identified for release.
402,Transmission of Private Resources into a New Sphere ('Resource Leak'),Class,Draft,The product makes resources available to untrusted parties when those resources are only intended to be accessed by the product.,
403,Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak'),Base,Draft,A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors.,When a new process is forked or executed, the child process inherits any open file descriptors. When the child process has fewer privileges than the parent process, this might introduce a vulnerability if the child process can access the file descriptor but does not have the privileges to access the associated file.
404,Improper Resource Shutdown or Release,Class,Draft,The product does not release or incorrectly releases a resource before it is made available for re-use.,When a resource is created or allocated, the developer is responsible for properly releasing the resource as well as accounting for all potential paths of expiration or invalidation, such as a set period of time or revocation.
405,Asymmetric Resource Consumption (Amplification),Class,Incomplete,The product does not properly control situations in which an adversary can cause the product to consume or produce excessive resources without requiring the adversary to invest equivalent work or otherwise prove authorization, i.e., the adversary's influence is asymmetric.,This can lead to poor performance due to amplification of resource consumption, typically in a non-linear fashion. This situation is worsened if the product allows malicious users or attackers to consume more resources than their access level permits.
406,Insufficient Control of Network Message Volume (Network Amplification),Class,Incomplete,The product does not sufficiently monitor or control transmitted network traffic volume, so that an actor can cause the product to transmit more traffic than should be allowed for that actor.,In the absence of a policy to restrict asymmetric resource consumption, the application or system cannot distinguish between legitimate transmissions and traffic intended to serve as an amplifying attack on target systems. Systems can often be configured to restrict the amount of traffic sent out on behalf of a client, based on the client's origin or access level. This is usually defined in a resource allocation policy. In the absence of a mechanism to keep track of transmissions, the system or application can be easily abused to transmit asymmetrically greater traffic than the request or client should be permitted to.
407,Inefficient Algorithmic Complexity,Class,Incomplete,An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.,
408,Incorrect Behavior Order: Early Amplification,Base,Draft,The product allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place.,
409,Improper Handling of Highly Compressed Data (Data Amplification),Base,Incomplete,The product does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output.,An example of data amplification is a decompression bomb, a small ZIP file that can produce a large amount of data when it is decompressed.
410,Insufficient Resource Pool,Base,Incomplete,The product's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources.,Frequently the consequence is a flood of connection or sessions.
412,Unrestricted Externally Accessible Lock,Base,Incomplete,The product properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control.,This prevents the product from acting on associated resources or performing other behaviors that are controlled by the presence of the lock. Relevant locks might include an exclusive lock or mutex, or modifying a shared resource that is treated as a lock. If the lock can be held for an indefinite period of time, then the denial of service could be permanent.
413,Improper Resource Locking,Base,Draft,The product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.,When a resource is not properly locked, an attacker could modify the resource while it is being operated on by the product. This might violate the product's assumption that the resource will not change, potentially leading to unexpected behaviors.
414,Missing Lock Check,Base,Draft,A product does not check to see if a lock is present before performing sensitive operations on a resource.,
415,Double Free,Variant,Draft,The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.,When a program calls free() twice with the same argument, the program's memory management data structures become corrupted. This corruption can cause the program to crash or, in some circumstances, cause two later calls to malloc() to return the same pointer. If malloc() returns the same value twice and the program later gives the attacker control over the data that is written into this doubly-allocated memory, the program becomes vulnerable to a buffer overflow attack.
416,Use After Free,Variant,Stable,Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.,The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system's reuse of the freed memory. Use-after-free errors have two common and sometimes overlapping causes: Error conditions and other exceptional circumstances. Confusion over which part of the program is responsible for freeing the memory. In this scenario, the memory in question is allocated to another pointer validly at some point after it has been freed. The original pointer to the freed memory is used again and points to somewhere within the new allocation. As the data is changed, it corrupts the validly used memory; this induces undefined behavior in the process. If the newly allocated data happens to hold a class, in C++ for example, various function pointers may be scattered within the heap data. If one of these function pointers is overwritten with an address to valid shellcode, execution of arbitrary code can be achieved.
419,Unprotected Primary Channel,Base,Draft,The product uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.,
420,Unprotected Alternate Channel,Base,Draft,The product protects a primary channel, but it does not use the same level of protection for an alternate channel.,
421,Race Condition During Access to Alternate Channel,Base,Draft,The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors.,This creates a race condition that allows an attacker to access the channel before the authorized user does.
422,Unprotected Windows Messaging Channel ('Shatter'),Variant,Draft,The product does not properly verify the source of a message in the Windows Messaging System while running at elevated privileges, creating an alternate channel through which an attacker can directly send a message to the product.,
424,Improper Protection of Alternate Path,Class,Draft,The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.,
425,Direct Request ('Forced Browsing'),Base,Incomplete,The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.,Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.
427,Uncontrolled Search Path Element,Base,Draft,The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.,Although this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as /tmp or the current working directory. In Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled: the directory from which the program has been loaded the current working directory In some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used. One or more locations in that path could include the Windows drive root or its subdirectories. This often exists in Linux-based code assuming the controlled nature of the root directory (/) or its subdirectories (/etc, etc), or a code that recursively accesses the parent directory. In Windows, the drive root and some of its subdirectories have weak permissions by default, which makes them uncontrolled. In some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element. In software package management frameworks (e.g., npm, RubyGems, or PyPi), the framework may identify dependencies on third-party libraries or other packages, then consult a repository that contains the desired package. The framework may search a public repository before a private repository. This could be exploited by attackers by placing a malicious package in the public repository that has the same name as a package from the private repository. The search path might not be directly under control of the developer relying on the framework, but this search order effectively contains an untrusted element.
428,Unquoted Search Path or Element,Base,Draft,The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path.,If a malicious individual has access to the file system, it is possible to elevate privileges by inserting such a file as C:Program.exe to be run by a privileged program making use of WinExec.
430,Deployment of Wrong Handler,Base,Incomplete,The wrong handler is assigned to process an object.,An example of deploying the wrong handler would be calling a servlet to reveal source code of a .JSP file, or automatically determining type of the object even if it is contradictory to an explicitly specified type.
431,Missing Handler,Base,Draft,A handler is not available or implemented.,When an exception is thrown and not caught, the process has given up an opportunity to decide if a given failure or event is worth a change in execution.
432,Dangerous Signal Handler not Disabled During Sensitive Operations,Base,Draft,The product uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running.,During the execution of a signal handler, it can be interrupted by another handler when a different signal is sent. If the two handlers share state - such as global variables - then an attacker can corrupt the state by sending another signal before the first handler has completed execution.
433,Unparsed Raw Web Content Delivery,Variant,Incomplete,The product stores raw content or supporting code under the web document root with an extension that is not specifically handled by the server.,If code is stored in a file with an extension such as .inc or .pl, and the web server does not have a handler for that extension, then the server will likely send the contents of the file directly to the requester without the pre-processing that was expected. When that file contains sensitive information such as database credentials, this may allow the attacker to compromise the application or associated components.
435,Improper Interaction Between Multiple Correctly-Behaving Entities,Pillar,Draft,An interaction error occurs when two entities have correct behavior when running independently of each other, but when they are integrated as components in a larger system or process, they introduce incorrect behaviors that may cause resultant weaknesses.,When a system or process combines multiple independent components, this often produces new, emergent behaviors at the system level. However, if the interactions between these components are not fully accounted for, some of the emergent behaviors can be incorrect or even insecure.
436,Interpretation Conflict,Class,Incomplete,Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.,This is generally found in proxies, firewalls, anti-virus software, and other intermediary devices that monitor, allow, deny, or modify traffic based on how the client or server is expected to behave.
437,Incomplete Model of Endpoint Features,Base,Incomplete,A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model.,
439,Behavioral Change in New Version or Environment,Base,Draft,A's behavior or functionality changes with a new version of A, or a new environment, which is not known (or manageable) by B.,
440,Expected Behavior Violation,Base,Draft,A feature, API, or function does not perform according to its specification.,
441,Unintended Proxy or Intermediary ('Confused Deputy'),Class,Draft,The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.,If an attacker cannot directly contact a target, but the product has access to the target, then the attacker can send a request to the product and have it be forwarded to the target. The request would appear to be coming from the product's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker. Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when: The product runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component; The attacker is prevented from making the request directly to the target; and The attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, hardware IP, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources.
444,Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling'),Base,Incomplete,The product acts as an intermediary HTTP agent (such as a proxy or firewall) in the data flow between two entities such as a client and server, but it does not interpret malformed HTTP requests or responses in ways that are consistent with how the messages will be processed by those entities that are at the ultimate destination.,HTTP requests or responses (messages) can be malformed or unexpected in ways that cause web servers or clients to interpret the messages in different ways than intermediary HTTP agents such as load balancers, reverse proxies, web caching proxies, application firewalls, etc. For example, an adversary may be able to add duplicate or different header fields that a client or server might interpret as one set of messages, whereas the intermediary might interpret the same sequence of bytes as a different set of messages. For example, discrepancies can arise in how to handle duplicate headers like two Transfer-encoding (TE) or two Content-length (CL), or the malicious HTTP message will have different headers for TE and CL. The inconsistent parsing and interpretation of messages can allow the adversary to smuggle a message to the client/server without the intermediary being aware of it. This weakness is usually the result of the usage of outdated or incompatible HTTP protocol versions in the HTTP agents.
446,UI Discrepancy for Security Feature,Class,Incomplete,The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state.,When the user interface does not properly reflect what the user asks of it, then it can lead the user into a false sense of security. For example, the user might check a box to enable a security option to enable encrypted communications, but the product does not actually enable the encryption. Alternately, the user might provide a restrict ALL access control rule, but the product only implements restrict SOME.
447,Unimplemented or Unsupported Feature in UI,Base,Draft,A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented.,
448,Obsolete Feature in UI,Base,Draft,A UI function is obsolete and the product does not warn the user.,
449,The UI Performs the Wrong Action,Base,Incomplete,The UI performs the wrong action with respect to the user's request.,
450,Multiple Interpretations of UI Input,Base,Draft,The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation.,
451,User Interface (UI) Misrepresentation of Critical Information,Class,Draft,The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.,If an attacker can cause the UI to display erroneous data, or to otherwise convince the user to display information that appears to come from a trusted source, then the attacker could trick the user into performing the wrong action. This is often a component in phishing attacks, but other kinds of problems exist. For example, if the UI is used to monitor the security state of a system or network, then omitting or obscuring an important indicator could prevent the user from detecting and reacting to a security-critical event. UI misrepresentation can take many forms: Incorrect indicator: incorrect information is displayed, which prevents the user from understanding the true state of the product or the environment the product is monitoring, especially of potentially-dangerous conditions or operations. This can be broken down into several different subtypes. Overlay: an area of the display is intended to give critical information, but another process can modify the display by overlaying another element on top of it. The user is not interacting with the expected portion of the user interface. This is the problem that enables clickjacking attacks, although many other types of attacks exist that involve overlay. Icon manipulation: the wrong icon, or the wrong color indicator, can be influenced (such as making a dangerous .EXE executable look like a harmless .GIF) Timing: the product is performing a state transition or context switch that is presented to the user with an indicator, but a race condition can cause the wrong indicator to be used before the product has fully switched context. The race window could be extended indefinitely if the attacker can trigger an error. Visual truncation: important information could be truncated from the display, such as a long filename with a dangerous extension that is not displayed in the GUI because the malicious portion is truncated. The use of excessive whitespace can also cause truncation, or place the potentially-dangerous indicator outside of the user's field of view (e.g. filename.txt .exe). A different type of truncation can occur when a portion of the information is removed due to reasons other than length, such as the accidental insertion of an end-of-input marker in the middle of an input, such as a NUL byte in a C-style string. Visual distinction: visual information might be presented in a way that makes it difficult for the user to quickly and correctly distinguish between critical and unimportant segments of the display. Homographs: letters from different character sets, fonts, or languages can appear very similar (i.e. may be visually equivalent) in a way that causes the human user to misread the text (for example, to conduct phishing attacks to trick a user into visiting a malicious web site with a visually-similar name as a trusted site). This can be regarded as a type of visual distinction issue.
453,Insecure Default Variable Initialization,Variant,Draft,The product, by default, initializes an internal variable with an insecure or less secure value than is possible.,
454,External Initialization of Trusted Variables or Data Stores,Base,Draft,The product initializes critical internal variables or data stores using inputs that can be modified by untrusted actors.,A product system should be reluctant to trust variables that have been initialized outside of its trust boundary, especially if they are initialized by users. The variables may have been initialized incorrectly. If an attacker can initialize the variable, then they can influence what the vulnerable system will do.
455,Non-exit on Failed Initialization,Base,Draft,The product does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error or a hardware security module (HSM) cannot be activated, which can cause the product to execute in a less secure fashion than intended by the administrator.,
456,Missing Initialization of a Variable,Variant,Draft,The product does not initialize critical variables, which causes the execution environment to use unexpected values.,
457,Use of Uninitialized Variable,Variant,Draft,The code uses a variable that has not been initialized, leading to unpredictable or unintended results.,In some languages such as C and C++, stack variables are not initialized by default. They generally contain junk data with the contents of stack memory before the function was invoked. An attacker can sometimes control or read these contents. In other languages or conditions, a variable that is not explicitly initialized can be given a default value that has security implications, depending on the logic of the program. The presence of an uninitialized variable can sometimes indicate a typographic error in the code.
459,Incomplete Cleanup,Base,Draft,The product does not properly clean up and remove temporary or supporting resources after they have been used.,
460,Improper Cleanup on Thrown Exception,Base,Draft,The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.,Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening.
462,Duplicate Key in Associative List (Alist),Base,Incomplete,Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.,A duplicate key entry -- if the alist is designed properly -- could be used as a constant time replace function. However, duplicate key entries could be inserted by mistake. Because of this ambiguity, duplicate key entries in an association list are not recommended and should not be allowed.
463,Deletion of Data Structure Sentinel,Base,Incomplete,The accidental deletion of a data-structure sentinel can cause serious programming logic problems.,Often times data-structure sentinels are used to mark structure of the data structure. A common example of this is the null character at the end of strings. Another common example is linked lists which may contain a sentinel to mark the end of the list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the deletion or modification outside of some wrapper interface which provides safety.
464,Addition of Data Structure Sentinel,Base,Incomplete,The accidental addition of a data-structure sentinel can cause serious programming logic problems.,Data-structure sentinels are often used to mark the structure of data. A common example of this is the null character at the end of strings or a special sentinel to mark the end of a linked list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the addition or modification of sentinels.
466,Return of Pointer Value Outside of Expected Range,Base,Draft,A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.,
467,Use of sizeof() on a Pointer Type,Variant,Draft,The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.,The use of sizeof() on a pointer can sometimes generate useful information. An obvious case is to find out the wordsize on a platform. More often than not, the appearance of sizeof(pointer) indicates a bug.
468,Incorrect Pointer Scaling,Base,Incomplete,In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled.,
469,Use of Pointer Subtraction to Determine Size,Base,Draft,The product subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.,
470,Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection'),Base,Draft,The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.,If the product uses external inputs to determine which class to instantiate or which method to invoke, then an attacker could supply values to select unexpected classes or methods. If this occurs, then the attacker could create control flow paths that were not intended by the developer. These paths could bypass authentication or access control checks, or otherwise cause the product to behave in an unexpected manner. This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the product's classpath (CWE-427) or add new entries to the product's classpath (CWE-426). Under either of these conditions, the attacker can use reflection to introduce new, malicious behavior into the product.
471,Modification of Assumed-Immutable Data (MAID),Base,Draft,The product does not properly protect an assumed-immutable element from being modified by an attacker.,This occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups.
472,External Control of Assumed-Immutable Web Parameter,Base,Draft,The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.,If a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input. For example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application.
473,PHP External Variable Modification,Variant,Draft,A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.,
474,Use of Function with Inconsistent Implementations,Base,Draft,The code uses a function that has inconsistent implementations across operating systems and versions.,The use of inconsistent implementations can cause changes in behavior when the code is ported or built under a different environment than the programmer expects, which can lead to security problems in some cases. The implementation of many functions varies by platform, and at times, even by different versions of the same platform. Implementation differences can include: Slight differences in the way parameters are interpreted leading to inconsistent results. Some implementations of the function carry significant security risks. The function might not be defined on all platforms. The function might change which return codes it can provide, or change the meaning of its return codes.
475,Undefined Behavior for Input to API,Base,Incomplete,The behavior of this function is undefined unless its control parameter is set to a specific value.,
476,NULL Pointer Dereference,Base,Stable,A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.,NULL pointer dereference issues can occur through a number of flaws, including race conditions, and simple programming omissions.
477,Use of Obsolete Function,Base,Draft,The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.,As programming languages evolve, functions occasionally become obsolete due to: Advances in the language Improved understanding of how operations should be performed effectively and securely Changes in the conventions that govern certain operations Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.
478,Missing Default Case in Multiple Condition Expression,Base,Draft,The code does not have a default case in an expression with multiple conditions, such as a switch statement.,If a multiple-condition expression (such as a switch in C) omits the default case but does not consider or handle all possible values that could occur, then this might lead to complex logical errors and resultant weaknesses. Because of this, further decisions are made based on poor information, and cascading failure results. This cascading failure may result in any number of security issues, and constitutes a significant failure in the system.
479,Signal Handler Use of a Non-reentrant Function,Variant,Draft,The product defines a signal handler that calls a non-reentrant function.,Non-reentrant functions are functions that cannot safely be called, interrupted, and then recalled before the first call has finished without resulting in memory corruption. This can lead to an unexpected system state and unpredictable results with a variety of potential consequences depending on context, including denial of service and code execution. Many functions are not reentrant, but some of them can result in the corruption of memory if they are used in a signal handler. The function call syslog() is an example of this. In order to perform its functionality, it allocates a small amount of memory as scratch space. If syslog() is suspended by a signal call and the signal handler calls syslog(), the memory used by both of these functions enters an undefined, and possibly, exploitable state. Implementations of malloc() and free() manage metadata in global structures in order to track which memory is allocated versus which memory is available, but they are non-reentrant. Simultaneous calls to these functions can cause corruption of the metadata.
480,Use of Incorrect Operator,Base,Draft,The product accidentally uses the wrong operator, which changes the logic in security-relevant ways.,These types of errors are generally the result of a typo by the programmer.
481,Assigning instead of Comparing,Variant,Draft,The code uses an operator for assignment when the intention was to perform a comparison.,In many languages the compare statement is very close in appearance to the assignment statement and are often confused. This bug is generally the result of a typo and usually causes obvious problems with program execution. If the comparison is in an if statement, the if statement will usually evaluate the value of the right-hand side of the predicate.
482,Comparing instead of Assigning,Variant,Draft,The code uses an operator for comparison when the intention was to perform an assignment.,In many languages, the compare statement is very close in appearance to the assignment statement; they are often confused.
483,Incorrect Block Delimitation,Base,Draft,The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error.,In some languages, braces (or other delimiters) are optional for blocks. When the delimiter is omitted, it is possible to insert a logic error in which a statement is thought to be in a block but is not. In some cases, the logic error can have security implications.
484,Omitted Break Statement in Switch,Base,Draft,The product omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.,This can lead to critical code executing in situations where it should not.
486,Comparison of Classes by Name,Variant,Draft,The product compares classes by name, which can cause it to use the wrong class when multiple classes can have the same name.,If the decision to trust the methods and data of an object is based on the name of a class, it is possible for malicious users to send objects of the same name as trusted classes and thereby gain the trust afforded to known classes and types.
487,Reliance on Package-level Scope,Base,Incomplete,Java packages are not inherently closed; therefore, relying on them for code security is not a good practice.,The purpose of package scope is to prevent accidental access by other parts of a program. This is an ease-of-software-development feature but not a security feature.
488,Exposure of Data Element to Wrong Session,Base,Draft,The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.,Data can bleed from one session to another through member variables of singleton objects, such as Servlets, and objects from a shared pool. In the case of Servlets, developers sometimes do not understand that, unless a Servlet implements the SingleThreadModel interface, the Servlet is a singleton; there is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads. A common result is that developers use Servlet member fields in such a way that one user may inadvertently see another user's data. In other words, storing user data in Servlet member fields introduces a data access race condition.
489,Active Debug Code,Base,Draft,The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.,A common development practice is to add back door code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the product. These back door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the product.
491,Public cloneable() Method Without Final ('Object Hijack'),Variant,Draft,A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state.,
492,Use of Inner Class Containing Sensitive Data,Variant,Draft,Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers.,Inner classes quietly introduce several security concerns because of the way they are translated into Java bytecode. In Java source code, it appears that an inner class can be declared to be accessible only by the enclosing class, but Java bytecode has no concept of an inner class, so the compiler must transform an inner class declaration into a peer class with package level access to the original outer class. More insidiously, since an inner class can access private fields in its enclosing class, once an inner class becomes a peer class in bytecode, the compiler converts private fields accessed by the inner class into protected fields.
493,Critical Public Variable Without Final Modifier,Variant,Draft,The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values.,If a field is non-final and public, it can be changed once the value is set by any function that has access to the class which contains the field. This could lead to a vulnerability if other parts of the program make assumptions about the contents of that field.
494,Download of Code Without Integrity Check,Base,Draft,The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.,An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit.
495,Private Data Structure Returned From A Public Method,Variant,Draft,The product has a method that is declared public, but returns a reference to a private data structure, which could then be modified in unexpected ways.,
496,Public Data Assigned to Private Array-Typed Field,Variant,Incomplete,Assigning public data to a private array is equivalent to giving public access to the array.,
497,Exposure of Sensitive System Information to an Unauthorized Control Sphere,Base,Incomplete,The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.,Network-based products, such as web applications, often run on top of an operating system or similar environment. When the product communicates with outside parties, details about the underlying system are expected to remain hidden, such as path names for data files, other OS users, installed packages, the application environment, etc. This system information may be provided by the product itself, or buried within diagnostic or debugging messages. Debugging information helps an adversary learn about the system and form an attack plan. An information exposure occurs when system data or debugging information leaves the program through an output stream or logging function that makes it accessible to unauthorized parties. Using other weaknesses, an attacker could cause errors to occur; the response to these errors can reveal detailed system information, along with other impacts. An attacker can use messages that reveal technologies, operating systems, and product versions to tune the attack against known vulnerabilities in these technologies. A product may use diagnostic methods that provide significant implementation details such as stack traces as part of its error handling mechanism.
498,Cloneable Class Containing Sensitive Information,Variant,Draft,The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class.,Cloneable classes are effectively open classes, since data cannot be hidden in them. Classes that do not explicitly deny cloning can be cloned by any other class without running the constructor.
499,Serializable Class Containing Sensitive Data,Variant,Draft,The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class.,Serializable classes are effectively open classes since data cannot be hidden in them. Classes that do not explicitly deny serialization can be serialized by any other class, which can then in turn use the data stored inside it.
500,Public Static Field Not Marked Final,Variant,Draft,An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.,Public static variables can be read without an accessor and changed without a mutator by any classes in the application.
501,Trust Boundary Violation,Base,Draft,The product mixes trusted and untrusted data in the same data structure or structured message.,A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the same data structure, it becomes easier for programmers to mistakenly trust unvalidated data.
502,Deserialization of Untrusted Data,Base,Draft,The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.,It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption. Data that is untrusted can not be trusted to be well-formed. When developers place no restrictions on gadget chains, or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell.
506,Embedded Malicious Code,Class,Incomplete,The product contains code that appears to be malicious in nature.,Malicious flaws have acquired colorful names, including Trojan horse, trapdoor, timebomb, and logic-bomb. A developer might insert malicious code with the intent to subvert the security of a product or its host system at some time in the future. It generally refers to a program that performs a useful service but exploits rights of the program's user in a way the user does not intend.
507,Trojan Horse,Base,Incomplete,The product appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator.,
508,Non-Replicating Malicious Code,Base,Incomplete,Non-replicating malicious code only resides on the target system or product that is attacked; it does not attempt to spread to other systems.,
509,Replicating Malicious Code (Virus or Worm),Base,Incomplete,Replicating malicious code, including viruses and worms, will attempt to attack other systems once it has successfully compromised the target system or the product.,
510,Trapdoor,Base,Incomplete,A trapdoor is a hidden piece of code that responds to a special input, allowing its user access to resources without passing through the normal security enforcement mechanism.,
511,Logic/Time Bomb,Base,Incomplete,The product contains code that is designed to disrupt the legitimate operation of the product (or its environment) when a certain time passes, or when a certain logical condition is met.,When the time bomb or logic bomb is detonated, it may perform a denial of service such as crashing the system, deleting critical data, or degrading system response time. This bomb might be placed within either a replicating or non-replicating Trojan horse.
512,Spyware,Base,Incomplete,The product collects personally identifiable information about a human user or the user's activities, but the product accesses this information using other resources besides itself, and it does not require that user's explicit approval or direct input into the product.,Spyware is a commonly used term with many definitions and interpretations. In general, it is meant to refer to products that collect information or install functionality that human users might not allow if they were fully aware of the actions being taken by the software. For example, a user might expect that tax software would collect a social security number and include it when filing a tax return, but that same user would not expect gaming software to obtain the social security number from that tax software's data.
514,Covert Channel,Class,Incomplete,A covert channel is a path that can be used to transfer information in a way not intended by the system's designers.,Typically the system has not given authorization for the transmission and has no knowledge of its occurrence.
515,Covert Storage Channel,Base,Incomplete,A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information.,Covert storage channels occur when out-of-band data is stored in messages for the purpose of memory reuse. Covert channels are frequently classified as either storage or timing channels. Examples would include using a file intended to hold only audit information to convey user passwords--using the name of a file or perhaps status bits associated with it that can be read by all users to signal the contents of the file. Steganography, concealing information in such a manner that no one but the intended recipient knows of the existence of the message, is a good example of a covert storage channel.
520,.NET Misconfiguration: Use of Impersonation,Variant,Incomplete,Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks.,.NET server applications can optionally execute using the identity of the user authenticated to the client. The intention of this functionality is to bypass authentication and access control checks within the .NET application code. Authentication is done by the underlying web server (Microsoft Internet Information Service IIS), which passes the authenticated token, or unauthenticated anonymous token, to the .NET application. Using the token to impersonate the client, the application then relies on the settings within the NTFS directories and files to control access. Impersonation enables the application, on the server running the .NET application, to both execute code and access resources in the context of the authenticated and authorized user.
521,Weak Password Requirements,Base,Draft,The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.,Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism.
522,Insufficiently Protected Credentials,Class,Incomplete,The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.,
523,Unprotected Transport of Credentials,Base,Incomplete,Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.,
524,Use of Cache Containing Sensitive Information,Base,Incomplete,The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.,Applications may use caches to improve efficiency when communicating with remote entities or performing intensive calculations. A cache maintains a pool of objects, threads, connections, pages, financial data, passwords, or other resources to minimize the time it takes to initialize and access these resources. If the cache is accessible to unauthorized actors, attackers can read the cache and obtain this sensitive information.
525,Use of Web Browser Cache Containing Sensitive Information,Variant,Incomplete,The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached.,
526,Cleartext Storage of Sensitive Information in an Environment Variable,Variant,Incomplete,The product uses an environment variable to store unencrypted sensitive information.,Information stored in an environment variable can be accessible by other processes with the execution context, including child processes that dependencies are executed in, or serverless functions in cloud environments. An environment variable's contents can also be inserted into messages, headers, log files, or other outputs. Often these other dependencies have no need to use the environment variable in question. A weakness that discloses environment variables could expose this information.
527,Exposure of Version-Control Repository to an Unauthorized Control Sphere,Variant,Incomplete,The product stores a CVS, git, or other repository in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.,Version control repositories such as CVS or git store version-specific metadata and other details within subdirectories. If these subdirectories are stored on a web server or added to an archive, then these could be used by an attacker. This information may include usernames, filenames, path root, IP addresses, and detailed diff data about how files have been changed - which could reveal source code snippets that were never intended to be made public.
528,Exposure of Core Dump File to an Unauthorized Control Sphere,Variant,Draft,The product generates a core dump file in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.,
529,Exposure of Access Control List Files to an Unauthorized Control Sphere,Variant,Incomplete,The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere.,Exposure of these access control list files may give the attacker information about the configuration of the site or system. This information may then be used to bypass the intended security policy or identify trusted systems from which an attack can be launched.
530,Exposure of Backup File to an Unauthorized Control Sphere,Variant,Incomplete,A backup file is stored in a directory or archive that is made accessible to unauthorized actors.,Often, older backup files are renamed with an extension such as .~bk to distinguish them from production files. The source code for old files that have been renamed in this manner and left in the webroot can often be retrieved. This renaming may have been performed automatically by the web server, or manually by the administrator.
531,Inclusion of Sensitive Information in Test Code,Variant,Incomplete,Accessible test applications can pose a variety of security risks. Since developers or administrators rarely consider that someone besides themselves would even know about the existence of these applications, it is common for them to contain sensitive information or functions.,
532,Insertion of Sensitive Information into Log File,Base,Incomplete,Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.,While logging all information may be helpful during development stages, it is important that logging levels be set appropriately before a product ships so that sensitive user data and system information are not accidentally exposed to potential attackers. Different log files may be produced and stored for: Server log files (e.g. server.log). This can give information on whatever application left the file. Usually this can give full path names and system information, and sometimes usernames and passwords. log files that are used for debugging
535,Exposure of Information Through Shell Error Message,Variant,Incomplete,A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system.,
536,Servlet Runtime Error Message Containing Sensitive Information,Variant,Incomplete,A servlet error message indicates that there exists an unhandled exception in your web application code and may provide useful information to an attacker.,
537,Java Runtime Error Message Containing Sensitive Information,Variant,Incomplete,In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system.,
538,Insertion of Sensitive Information into Externally-Accessible File or Directory,Base,Draft,The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.,
539,Use of Persistent Cookies Containing Sensitive Information,Variant,Incomplete,The web application uses persistent cookies, but the cookies contain sensitive information.,Cookies are small bits of data that are sent by the web application but stored locally in the browser. This lets the application use the cookie to pass information between pages and store variable information. The web application controls what information is stored in a cookie and how it is used. Typical types of information stored in cookies are session identifiers, personalization and customization information, and in rare cases even usernames to enable automated logins. There are two different types of cookies: session cookies and persistent cookies. Session cookies just live in the browser's memory and are not stored anywhere, but persistent cookies are stored on the browser's hard drive. This can cause security and privacy issues depending on the information stored in the cookie and how it is accessed.
540,Inclusion of Sensitive Information in Source Code,Base,Incomplete,Source code on a web server or repository often contains sensitive information and should generally not be accessible to users.,There are situations where it is critical to remove source code from an area or server. For example, obtaining Perl source code on a system allows an attacker to understand the logic of the script and extract extremely useful information such as code bugs or logins and passwords.
541,Inclusion of Sensitive Information in an Include File,Variant,Incomplete,If an include file source is accessible, the file can contain usernames and passwords, as well as sensitive information pertaining to the application and system.,
543,Use of Singleton Pattern Without Synchronization in a Multithreaded Context,Variant,Incomplete,The product uses the singleton pattern when creating a resource within a multithreaded environment.,The use of a singleton pattern may not be thread-safe.
544,Missing Standardized Error Handling Mechanism,Base,Draft,The product does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses.,If the product handles error messages individually, on a one-by-one basis, this is likely to result in inconsistent error handling. The causes of errors may be lost. Also, detailed information about the causes of an error may be unintentionally returned to the user.
546,Suspicious Comment,Variant,Draft,The code contains comments that suggest the presence of bugs, incomplete functionality, or weaknesses.,Many suspicious comments, such as BUG, HACK, FIXME, LATER, LATER2, TODO, in the code indicate missing security functionality and checking. Others indicate code problems that programmers should fix, such as hard-coded variables, error handling, not using stored procedures, and performance issues.
547,Use of Hard-coded, Security-relevant Constants,Variant,Draft,The product uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change.,If the developer does not find all occurrences of the hard-coded constants, an incorrect policy decision may be made if one of the constants is not changed. Making changes to these values will require code changes that may be difficult or impossible once the system is released to the field. In addition, these hard-coded values may become available to attackers if the code is ever disclosed.
548,Exposure of Information Through Directory Listing,Variant,Draft,A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers.,A directory listing provides an attacker with the complete index of all the resources located inside of the directory. The specific risks and consequences vary depending on which files are listed and accessible.
549,Missing Password Field Masking,Base,Draft,The product does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords.,
550,Server-generated Error Message Containing Sensitive Information,Variant,Incomplete,Certain conditions, such as network failure, will cause a server error message to be displayed.,While error messages in and of themselves are not dangerous, per se, it is what an attacker can glean from them that might cause eventual problems.
551,Incorrect Behavior Order: Authorization Before Parsing and Canonicalization,Base,Incomplete,If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.,For instance, the character strings /./ and / both mean current directory. If /SomeDirectory is a protected directory and an attacker requests /./SomeDirectory, the attacker may be able to gain access to the resource if /./ is not converted to / before the authorization check is performed.
552,Files or Directories Accessible to External Parties,Base,Draft,The product makes files or directories accessible to unauthorized actors, even though they should not be.,Web servers, FTP servers, and similar servers may store a set of files underneath a root directory that is accessible to the server's users. Applications may store sensitive files underneath this root without also using access control to limit which users may request those files, if any. Alternately, an application might package multiple files or directories into an archive file (e.g., ZIP or tar), but the application might not exclude sensitive files that are underneath those directories. In cloud technologies and containers, this weakness might present itself in the form of public (i.e., anonymous) access being allowed/overwritten to storage accounts.
553,Command Shell in Externally Accessible Directory,Variant,Incomplete,A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.,
554,ASP.NET Misconfiguration: Not Using Input Validation Framework,Variant,Draft,The ASP.NET application does not use an input validation framework.,
555,J2EE Misconfiguration: Plaintext Password in Configuration File,Variant,Draft,The J2EE application stores a plaintext password in a configuration file.,Storing a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resource, making it an easy target for attackers.
556,ASP.NET Misconfiguration: Use of Identity Impersonation,Variant,Incomplete,Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges.,The use of impersonated credentials allows an ASP.NET application to run with either the privileges of the client on whose behalf it is executing or with arbitrary privileges granted in its configuration.
558,Use of getlogin() in Multithreaded Application,Variant,Draft,The product uses the getlogin() function in a multithreaded context, potentially causing it to return incorrect values.,The getlogin() function returns a pointer to a string that contains the name of the user associated with the calling process. The function is not reentrant, meaning that if it is called from another process, the contents are not locked out and the value of the string can be changed by another process. This makes it very risky to use because the username can be changed by other processes, so the results of the function cannot be trusted.
560,Use of umask() with chmod-style Argument,Variant,Draft,The product calls umask() with an incorrect argument that is specified as if it is an argument to chmod().,
561,Dead Code,Base,Draft,The product contains dead code, which can never be executed.,Dead code is code that can never be executed in a running program. The surrounding code makes it impossible for a section of code to ever be executed.
562,Return of Stack Variable Address,Base,Draft,A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.,Because local variables are allocated on the stack, when a program returns a pointer to a local variable, it is returning a stack address. A subsequent function call is likely to re-use this same stack address, thereby overwriting the value of the pointer, which no longer corresponds to the same variable since a function's stack frame is invalidated when it returns. At best this will cause the value of the pointer to change unexpectedly. In many cases it causes the program to crash the next time the pointer is dereferenced.
563,Assignment to Variable without Use,Variant,Draft,The variable's value is assigned but never used, making it a dead store.,After the assignment, the variable is either assigned another value or goes out of scope. It is likely that the variable is simply vestigial, but it is also possible that the unused variable points out a bug.
564,SQL Injection: Hibernate,Variant,Incomplete,Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.,
565,Reliance on Cookies without Validation and Integrity Checking,Base,Incomplete,The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.,Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways.
566,Authorization Bypass Through User-Controlled SQL Primary Key,Variant,Incomplete,The product uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.,When a user can set a primary key to any value, then the user can modify the key to point to unauthorized records. Database access control errors occur when: Data enters a program from an untrusted source. The data is used to specify the value of a primary key in a SQL query. The untrusted source does not have the permissions to be able to access all rows in the associated table.
567,Unsynchronized Access to Shared Data in a Multithreaded Context,Base,Draft,The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.,Within servlets, shared static variables are not protected from concurrent access, but servlets are multithreaded. This is a typical programming mistake in J2EE applications, since the multithreading is handled by the framework. When a shared variable can be influenced by an attacker, one thread could wind up modifying the variable to contain data that is not valid for a different thread that is also using the data within the variable. Note that this weakness is not unique to servlets.
568,finalize() Method Without super.finalize(),Variant,Draft,The product contains a finalize() method that does not call super.finalize().,The Java Language Specification states that it is a good practice for a finalize() method to call super.finalize().
570,Expression is Always False,Base,Draft,The product contains an expression that will always evaluate to false.,
571,Expression is Always True,Base,Draft,The product contains an expression that will always evaluate to true.,
572,Call to Thread run() instead of start(),Variant,Draft,The product calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.,In most cases a direct call to a Thread object's run() method is a bug. The programmer intended to begin a new thread of control, but accidentally called run() instead of start(), so the run() method will execute in the caller's thread of control.
573,Improper Following of Specification by Caller,Class,Draft,The product does not follow or incorrectly follows the specifications as required by the implementation language, environment, framework, protocol, or platform.,When leveraging external functionality, such as an API, it is important that the caller does so in accordance with the requirements of the external functionality or else unintended behaviors may result, possibly leaving the system vulnerable to any number of exploits.
574,EJB Bad Practices: Use of Synchronization Primitives,Variant,Draft,The product violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.,The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: An enterprise bean must not use thread synchronization primitives to synchronize execution of multiple instances. The specification justifies this requirement in the following way: This rule is required to ensure consistent runtime semantics because while some EJB containers may use a single JVM to execute all enterprise bean's instances, others may distribute the instances across multiple JVMs.
575,EJB Bad Practices: Use of AWT Swing,Variant,Draft,The product violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing.,The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: An enterprise bean must not use the AWT functionality to attempt to output information to a display, or to input information from a keyboard. The specification justifies this requirement in the following way: Most servers do not allow direct interaction between an application program and a keyboard/display attached to the server system.
576,EJB Bad Practices: Use of Java I/O,Variant,Draft,The product violates the Enterprise JavaBeans (EJB) specification by using the java.io package.,The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: An enterprise bean must not use the java.io package to attempt to access files and directories in the file system. The specification justifies this requirement in the following way: The file system APIs are not well-suited for business components to access data. Business components should use a resource manager API, such as JDBC, to store data.
577,EJB Bad Practices: Use of Sockets,Variant,Draft,The product violates the Enterprise JavaBeans (EJB) specification by using sockets.,The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: An enterprise bean must not attempt to listen on a socket, accept connections on a socket, or use a socket for multicast. The specification justifies this requirement in the following way: The EJB architecture allows an enterprise bean instance to be a network socket client, but it does not allow it to be a network server. Allowing the instance to become a network server would conflict with the basic function of the enterprise bean-- to serve the EJB clients.
578,EJB Bad Practices: Use of Class Loader,Variant,Draft,The product violates the Enterprise JavaBeans (EJB) specification by using the class loader.,The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: The enterprise bean must not attempt to create a class loader; obtain the current class loader; set the context class loader; set security manager; create a new security manager; stop the JVM; or change the input, output, and error streams. The specification justifies this requirement in the following way: These functions are reserved for the EJB container. Allowing the enterprise bean to use these functions could compromise security and decrease the container's ability to properly manage the runtime environment.
579,J2EE Bad Practices: Non-serializable Object Stored in Session,Variant,Draft,The product stores a non-serializable object as an HttpSession attribute, which can hurt reliability.,A J2EE application can make use of multiple JVMs in order to improve application reliability and performance. In order to make the multiple JVMs appear as a single application to the end user, the J2EE container can replicate an HttpSession object across multiple JVMs so that if one JVM becomes unavailable another can step in and take its place without disrupting the flow of the application. This is only possible if all session data is serializable, allowing the session to be duplicated between the JVMs.
580,clone() Method Without super.clone(),Variant,Draft,The product contains a clone() method that does not call super.clone() to obtain the new object.,All implementations of clone() should obtain the new object by calling super.clone(). If a class does not follow this convention, a subclass's clone() method will return an object of the wrong type.
581,Object Model Violation: Just One of Equals and Hashcode Defined,Base,Draft,The product does not maintain equal hashcodes for equal objects.,Java objects are expected to obey a number of invariants related to equality. One of these invariants is that equal objects must have equal hashcodes. In other words, if a.equals(b) == true then a.hashCode() == b.hashCode().
582,Array Declared Public, Final, and Static,Variant,Draft,The product declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.,Because arrays are mutable objects, the final constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. As such, in most cases an array declared public, final and static is a bug.
583,finalize() Method Declared Public,Variant,Incomplete,The product violates secure coding principles for mobile code by declaring a finalize() method public.,A product should never call finalize explicitly, except to call super.finalize() inside an implementation of finalize(). In mobile code situations, the otherwise error prone practice of manual garbage collection can become a security threat if an attacker can maliciously invoke a finalize() method because it is declared with public access.
584,Return Inside Finally Block,Base,Draft,The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded.,
585,Empty Synchronized Block,Base,Draft,The product contains an empty synchronized block.,An empty synchronized block does not actually accomplish any synchronization and may indicate a troubled section of code. An empty synchronized block can occur because code no longer needed within the synchronized block is commented out without removing the synchronized block.
586,Explicit Call to Finalize(),Variant,Draft,The product makes an explicit call to the finalize() method from outside the finalizer.,While the Java Language Specification allows an object's finalize() method to be called from outside the finalizer, doing so is usually a bad idea. For example, calling finalize() explicitly means that finalize() will be called more than once: the first time will be the explicit call and the last time will be the call that is made after the object is garbage collected.
587,Assignment of a Fixed Address to a Pointer,Base,Draft,The product sets a pointer to a specific address other than NULL or 0.,Using a fixed address is not portable, because that address will probably not be valid in all environments or platforms.
588,Attempt to Access Child of a Non-structure Pointer,Variant,Incomplete,Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.,
589,Call to Non-ubiquitous API,Variant,Incomplete,The product uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.,Some functions that offer security features supported by the OS are not available on all versions of the OS in common use. Likewise, functions are often deprecated or made obsolete for security reasons and should not be used.
590,Free of Memory not on the Heap,Variant,Incomplete,The product calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc().,When free() is called on an invalid pointer, the program's memory management data structures may become corrupted. This corruption can cause the program to crash or, in some circumstances, an attacker may be able to cause free() to operate on controllable memory locations to modify critical program variables or execute code.
591,Sensitive Data Storage in Improperly Locked Memory,Variant,Draft,The product stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors.,On Windows systems the VirtualLock function can lock a page of memory to ensure that it will remain present in memory and not be swapped to disk. However, on older versions of Windows, such as 95, 98, or Me, the VirtualLock() function is only a stub and provides no protection. On POSIX systems the mlock() call ensures that a page will stay resident in memory but does not guarantee that the page will not appear in the swap. Therefore, it is unsuitable for use as a protection mechanism for sensitive data. Some platforms, in particular Linux, do make the guarantee that the page will not be swapped, but this is non-standard and is not portable. Calls to mlock() also require supervisor privilege. Return values for both of these calls must be checked to ensure that the lock operation was actually successful.
593,Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created,Variant,Draft,The product modifies the SSL context after connection creation has begun.,If the program modifies the SSL_CTX object after creating SSL objects from it, there is the possibility that older SSL objects created from the original context could all be affected by that change.
594,J2EE Framework: Saving Unserializable Objects to Disk,Variant,Incomplete,When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.,In heavy load conditions, most J2EE application frameworks flush objects to disk to manage memory requirements of incoming requests. For example, session scoped objects, and even application scoped objects, are written to disk when required. While these application frameworks do the real work of writing objects to disk, they do not enforce that those objects be serializable, thus leaving the web application vulnerable to crashes induced by serialization failure. An attacker may be able to mount a denial of service attack by sending enough requests to the server to force the web application to save objects to disk.
595,Comparison of Object References Instead of Object Contents,Variant,Incomplete,The product compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects.,For example, in Java, comparing objects using == usually produces deceptive results, since the == operator compares object references rather than values; often, this means that using == for strings is actually comparing the strings' references, not their values.
597,Use of Wrong Operator in String Comparison,Variant,Draft,The product uses the wrong operator when comparing a string, such as using == when the .equals() method should be used instead.,In Java, using == or != to compare two strings for equality actually compares two objects for equality rather than their string values for equality. Chances are good that the two references will never be equal. While this weakness often only affects program correctness, if the equality is used for a security decision, the unintended comparison result could be leveraged to affect program security.
598,Use of GET Request Method With Sensitive Query Strings,Variant,Draft,The web application uses the HTTP GET method to process a request and includes sensitive information in the query string of that request.,The query string for the URL could be saved in the browser's history, passed through Referers to other web sites, stored in web logs, or otherwise recorded in other sources. If the query string contains sensitive information such as session identifiers, then attackers can use this information to launch further attacks.
599,Missing Validation of OpenSSL Certificate,Variant,Incomplete,The product uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements.,This could allow an attacker to use an invalid certificate to claim to be a trusted host, use expired certificates, or conduct other attacks that could be detected if the certificate is properly validated.
600,Uncaught Exception in Servlet ,Base,Draft,The Servlet does not catch all exceptions, which may reveal sensitive debugging information.,When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.
601,URL Redirection to Untrusted Site ('Open Redirect'),Base,Draft,A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.,An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance.
602,Client-Side Enforcement of Server-Side Security,Class,Draft,The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.,When the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms, resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect.
603,Use of Client-Side Authentication,Base,Draft,A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.,Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected.
605,Multiple Binds to the Same Port,Base,Draft,When multiple sockets are allowed to bind to the same port, other services on that port may be stolen or spoofed.,On most systems, a combination of setting the SO_REUSEADDR socket option, and a call to bind() allows any process to bind to a port to which a previous process has bound with INADDR_ANY. This allows a user to bind to the specific address of a server bound to INADDR_ANY on an unprivileged port, and steal its UDP packets/TCP connection.
606,Unchecked Input for Loop Condition,Base,Draft,The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping.,
607,Public Static Final Field References Mutable Object,Variant,Draft,A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package.,
608,Struts: Non-private Field in ActionForm Class,Variant,Draft,An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter.,
609,Double-Checked Locking,Base,Draft,The product uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient.,Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as it is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block.
610,Externally Controlled Reference to a Resource in Another Sphere,Class,Draft,The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.,
611,Improper Restriction of XML External Entity Reference,Base,Draft,The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.,XML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing. By submitting an XML file that defines an external entity with a file:// URI, an attacker can cause the processing application to read the contents of a local file. For example, a URI such as file:///c:/winnt/win.ini designates (in Windows) the file C:Winntwin.ini, or file:///etc/passwd designates the password file in Unix-based systems. Using URIs with other schemes such as http://, the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning. Once the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data (e.g. in an error message), thereby exposing the file contents.
612,Improper Authorization of Index Containing Sensitive Information,Base,Draft,The product creates a search index of private or sensitive documents, but it does not properly limit index access to actors who are authorized to see the original information.,Web sites and other document repositories may apply an indexing routine against a group of private documents to facilitate search. If the index's results are available to parties who do not have access to the documents being indexed, then attackers could obtain portions of the documents by conducting targeted searches and reading the results. The risk is especially dangerous if search results include surrounding text that was not part of the search query. This issue can appear in search engines that are not configured (or implemented) to ignore critical files that should remain hidden; even without permissions to download these files directly, the remote user could read them.
613,Insufficient Session Expiration,Base,Incomplete,According to WASC, Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.,
614,Sensitive Cookie in HTTPS Session Without 'Secure' Attribute,Variant,Draft,The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.,
615,Inclusion of Sensitive Information in Source Code Comments,Variant,Incomplete,While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc.,An attacker who finds these comments can map the application's structure and files, expose hidden parts of the site, and study the fragments of code to reverse engineer the application, which may help develop further attacks against the site.
616,Incomplete Identification of Uploaded File Variables (PHP),Variant,Incomplete,The PHP application uses an old method for processing uploaded files by referencing the four global variables that are set for each file (e.g. $varname, $varname_size, $varname_name, $varname_type). These variables could be overwritten by attackers, causing the application to process unauthorized files.,These global variables could be overwritten by POST requests, cookies, or other methods of populating or overwriting these variables. This could be used to read or process arbitrary files by providing values such as /etc/passwd.
617,Reachable Assertion,Base,Draft,The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.,While assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service. For example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service.
618,Exposed Unsafe ActiveX Method,Base,Incomplete,An ActiveX control is intended for use in a web browser, but it exposes dangerous methods that perform actions that are outside of the browser's security model (e.g. the zone or domain).,ActiveX controls can exercise far greater control over the operating system than typical Java or javascript. Exposed methods can be subject to various vulnerabilities, depending on the implemented behaviors of those methods, and whether input validation is performed on the provided arguments. If there is no integrity checking or origin validation, this method could be invoked by attackers.
619,Dangling Database Cursor ('Cursor Injection'),Base,Incomplete,If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor dangling.,For example, an improper dangling cursor could arise from unhandled exceptions. The impact of the issue depends on the cursor's role, but SQL injection attacks are commonly possible.
620,Unverified Password Change,Base,Draft,When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.,This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user.
621,Variable Extraction Error,Base,Incomplete,The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables.,For example, in PHP, extraction can be used to provide functionality similar to register_globals, a dangerous functionality that is frequently disabled in production systems. Calling extract() or import_request_variables() without the proper arguments could allow arbitrary global variables to be overwritten, including superglobals. Similar functionality is possible in other interpreted languages, including custom languages.
622,Improper Validation of Function Hook Arguments,Variant,Draft,The product adds hooks to user-accessible API functions, but it does not properly validate the arguments. This could lead to resultant vulnerabilities.,Such hooks can be used in defensive software that runs with privileges, such as anti-virus or firewall, which hooks kernel calls. When the arguments are not validated, they could be used to bypass the protection scheme or attack the product itself.
623,Unsafe ActiveX Control Marked Safe For Scripting,Variant,Draft,An ActiveX control is intended for restricted use, but it has been marked as safe-for-scripting.,This might allow attackers to use dangerous functionality via a web page that accesses the control, which can lead to different resultant vulnerabilities, depending on the control's behavior.
624,Executable Regular Expression Error,Base,Incomplete,The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers.,Case (2) is possible in the PHP preg_replace() function, and possibly in other languages when a user-controlled input is inserted into a string that is later parsed as a regular expression.
625,Permissive Regular Expression,Base,Draft,The product uses a regular expression that does not sufficiently restrict the set of allowed values.,This effectively causes the regexp to accept substrings that match the pattern, which produces a partial comparison to the target. In some cases, this can lead to other weaknesses. Common errors include: not identifying the beginning and end of the target string using wildcards instead of acceptable character ranges others
626,Null Byte Interaction Error (Poison Null Byte),Variant,Draft,The product does not properly handle null bytes or NUL characters when passing data between different representations or components.,A null byte (NUL character) can have different meanings across representations or languages. For example, it is a string terminator in standard C libraries, but Perl and PHP strings do not treat it as a terminator. When two representations are crossed - such as when Perl or PHP invokes underlying C functionality - this can produce an interaction error with unexpected results. Similar issues have been reported for ASP. Other interpreters written in C might also be affected. The poison null byte is frequently useful in path traversal attacks by terminating hard-coded extensions that are added to a filename. It can play a role in regular expression processing in PHP.
627,Dynamic Variable Evaluation,Base,Incomplete,In a language where the user can influence the name of a variable at runtime, if the variable names are not controlled, an attacker can read or write to arbitrary variables, or access arbitrary functions.,The resultant vulnerabilities depend on the behavior of the application, both at the crossover point and in any control/data flow that is reachable by the related variables or functions.
628,Function Call with Incorrectly Specified Arguments,Base,Draft,The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses.,There are multiple ways in which this weakness can be introduced, including: the wrong variable or reference; an incorrect number of arguments; incorrect order of arguments; wrong type of arguments; or wrong value.
636,Not Failing Securely ('Failing Open'),Class,Draft,When the product encounters an error condition or failure, its design requires it to fall back to a state that is less secure than other options that are available, such as selecting the weakest encryption algorithm or using the most permissive access control restrictions.,By entering a less secure state, the product inherits the weaknesses associated with that state, making it easier to compromise. At the least, it causes administrators to have a false sense of security. This weakness typically occurs as a result of wanting to fail functional to minimize administration and support costs, instead of failing safe.
637,Unnecessary Complexity in Protection Mechanism (Not Using 'Economy of Mechanism'),Class,Draft,The product uses a more complex mechanism than necessary, which could lead to resultant weaknesses when the mechanism is not correctly understood, modeled, configured, implemented, or used.,Security mechanisms should be as simple as possible. Complex security mechanisms may engender partial implementations and compatibility problems, with resulting mismatches in assumptions and implemented security. A corollary of this principle is that data specifications should be as simple as possible, because complex data specifications result in complex validation code. Complex tasks and systems may also need to be guarded by complex security checks, so simple systems should be preferred.
638,Not Using Complete Mediation,Class,Draft,The product does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time.,
639,Authorization Bypass Through User-Controlled Key,Base,Incomplete,The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.,Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system. For example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value. One manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data.
640,Weak Password Recovery Mechanism for Forgotten Password,Base,Incomplete,The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.,It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme. This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.
641,Improper Restriction of Names for Files and Other Resources,Base,Incomplete,The product constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name.,This may produce resultant weaknesses. For instance, if the names of these resources contain scripting characters, it is possible that a script may get executed in the client's browser if the application ever displays the name of the resource on a dynamically generated web page. Alternately, if the resources are consumed by some application parser, a specially crafted name can exploit some vulnerability internal to the parser, potentially resulting in execution of arbitrary code on the server machine. The problems will vary based on the context of usage of such malformed resource names and whether vulnerabilities are present in or assumptions are made by the targeted technology that would make code execution possible.
642,External Control of Critical State Data,Class,Draft,The product stores security-critical state information about its users, or the product itself, in a location that is accessible to unauthorized actors.,If an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed. State information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an authenticated=true cookie. An attacker may simply create this cookie in order to bypass the authentication.
643,Improper Neutralization of Data within XPath Expressions ('XPath Injection'),Base,Incomplete,The product uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.,The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).
644,Improper Neutralization of HTTP Headers for Scripting Syntax,Variant,Incomplete,The product does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash.,An attacker may be able to conduct cross-site scripting and other attacks against users who have these components enabled. If a product does not neutralize user controlled data being placed in the header of an HTTP response coming from the server, the header may contain a script that will get executed in the client's browser context, potentially resulting in a cross site scripting vulnerability or possibly an HTTP response splitting attack. It is important to carefully control data that is being placed both in HTTP response header and in the HTTP response body to ensure that no scripting syntax is present, taking various encodings into account.
645,Overly Restrictive Account Lockout Mechanism,Base,Incomplete,The product contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.,Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive.
646,Reliance on File Name or Extension of Externally-Supplied File,Variant,Incomplete,The product allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion.,An application might use the file name or extension of of a user-supplied file to determine the proper course of action, such as selecting the correct process to which control should be passed, deciding what data should be made available, or what resources should be allocated. If the attacker can cause the code to misclassify the supplied file, then the wrong action could occur. For example, an attacker could supply a file that ends in a .php.gif extension that appears to be a GIF image, but would be processed as PHP code. In extreme cases, code execution is possible, but the attacker could also cause exhaustion of resources, denial of service, exposure of debug or system data (including application source code), or being bound to a particular server side process. This weakness may be due to a vulnerability in any of the technologies used by the web and application servers, due to misconfiguration, or resultant from another flaw in the application itself.
647,Use of Non-Canonical URL Paths for Authorization Decisions,Variant,Incomplete,The product defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization.,If an application defines policy namespaces and makes authorization decisions based on the URL, but it does not require or convert to a canonical URL before making the authorization decision, then it opens the application to attack. For example, if the application only wants to allow access to http://www.example.com/mypage, then the attacker might be able to bypass this restriction using equivalent URLs such as: http://WWW.EXAMPLE.COM/mypage http://www.example.com/%6Dypage (alternate encoding) http://192.168.1.1/mypage (IP address) http://www.example.com/mypage/ (trailing /) http://www.example.com:80/mypage Therefore it is important to specify access control policy that is based on the path information in some canonical form with all alternate encodings rejected (which can be accomplished by a default deny rule).
648,Incorrect Use of Privileged APIs,Base,Incomplete,The product does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.,When a product contains certain functions that perform operations requiring an elevated level of privilege, the caller of a privileged API must be careful to: ensure that assumptions made by the APIs are valid, such as validity of arguments account for known weaknesses in the design/implementation of the API call the API from a safe context If the caller of the API does not follow these requirements, then it may allow a malicious user or process to elevate their privilege, hijack the process, or steal sensitive data. For instance, it is important to know if privileged APIs do not shed their privileges before returning to the caller or if the privileged function might make certain assumptions about the data, context or state information passed to it by the caller. It is important to always know when and how privileged APIs can be called in order to ensure that their elevated level of privilege cannot be exploited.
649,Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking,Base,Incomplete,The product uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the product does not use integrity checks to detect if those inputs have been modified.,When an application relies on obfuscation or incorrectly applied / weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens/parameters for integrity, the application is vulnerable to an attack where an adversary traverses the space of possible values of the said token/parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate their privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens/parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service.
650,Trusting HTTP Permission Methods on the Server Side,Variant,Incomplete,The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks, since some applications allow GET to modify state.,The HTTP GET method and some other methods are designed to retrieve resources and not to alter the state of the application or resources on the server side. Furthermore, the HTTP specification requires that GET requests (and other requests) should not have side effects. Believing that it will be enough to prevent unintended resource alterations, an application may disallow the HTTP requests to perform DELETE, PUT and POST operations on the resource representation. However, there is nothing in the HTTP protocol itself that actually prevents the HTTP GET method from performing more than just query of the data. Developers can easily code programs that accept a HTTP GET request that do in fact create, update or delete data on the server. For instance, it is a common practice with REST based Web Services to have HTTP GET requests modifying resources on the server side. However, whenever that happens, the access control needs to be properly enforced in the application. No assumptions should be made that only HTTP DELETE, PUT, POST, and other methods have the power to alter the representation of the resource being accessed in the request.
651,Exposure of WSDL File Containing Sensitive Information,Variant,Incomplete,The Web services architecture may require exposing a Web Service Definition Language (WSDL) file that contains information on the publicly accessible services and how callers of these services should interact with them (e.g. what parameters they expect and what types they return).,An information exposure may occur if any of the following apply: The WSDL file is accessible to a wider audience than intended. The WSDL file contains information on the methods/services that should not be publicly accessible or information about deprecated methods. This problem is made more likely due to the WSDL often being automatically generated from the code. Information in the WSDL file helps guess names/locations of methods/resources that should not be publicly accessible.
652,Improper Neutralization of Data within XQuery Expressions ('XQuery Injection'),Base,Incomplete,The product uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.,The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).
653,Improper Isolation or Compartmentalization,Base,Draft,The product does not properly compartmentalize or isolate functionality, processes, or resources that require different privilege levels, rights, or permissions.,When a weakness occurs in functionality that is accessible by lower-privileged users, then without strong boundaries, an attack might extend the scope of the damage to higher-privileged users.
654,Reliance on a Single Factor in a Security Decision,Base,Draft,A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.,
655,Insufficient Psychological Acceptability,Base,Draft,The product has a protection mechanism that is too difficult or inconvenient to use, encouraging non-malicious users to disable or bypass the mechanism, whether by accident or on purpose.,
656,Reliance on Security Through Obscurity,Base,Draft,The product uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism.,This reliance on security through obscurity can produce resultant weaknesses if an attacker is able to reverse engineer the inner workings of the mechanism. Note that obscurity can be one small part of defense in depth, since it can create more work for an attacker; however, it is a significant risk if used as the primary means of protection.
657,Violation of Secure Design Principles,Class,Draft,The product violates well-established principles for secure design.,This can introduce resultant weaknesses or make it easier for developers to introduce related weaknesses during implementation. Because code is centered around design, it can be resource-intensive to fix design problems.
662,Improper Synchronization,Class,Draft,The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.,Synchronization refers to a variety of behaviors and mechanisms that allow two or more independently-operating processes or threads to ensure that they operate on shared resources in predictable ways that do not interfere with each other. Some shared resource operations cannot be executed atomically; that is, multiple steps must be guaranteed to execute sequentially, without any interference by other processes. Synchronization mechanisms vary widely, but they may include locking, mutexes, and semaphores. When a multi-step operation on a shared resource cannot be guaranteed to execute independent of interference, then the resulting behavior can be unpredictable. Improper synchronization could lead to data or memory corruption, denial of service, etc.
663,Use of a Non-reentrant Function in a Concurrent Context,Base,Draft,The product calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.,
664,Improper Control of a Resource Through its Lifetime,Pillar,Draft,The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.,Resources often have explicit instructions on how to be created, used and destroyed. When code does not follow these instructions, it can lead to unexpected behaviors and potentially exploitable states. Even without explicit instructions, various principles are expected to be adhered to, such as Do not use an object until after its creation is complete, or do not use an object after it has been slated for destruction.
665,Improper Initialization,Class,Draft,The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.,This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.
666,Operation on Resource in Wrong Phase of Lifetime,Class,Draft,The product performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors.,A resource's lifecycle includes several phases: initialization, use, and release. For each phase, it is important to follow the specifications outlined for how to operate on the resource and to ensure that the resource is in the expected phase. Otherwise, if a resource is in one phase but the operation is not valid for that phase (i.e., an incorrect phase of the resource's lifetime), then this can produce resultant weaknesses. For example, using a resource before it has been fully initialized could cause corruption or incorrect data to be used.
667,Improper Locking,Class,Draft,The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.,Locking is a type of synchronization behavior that ensures that multiple independently-operating processes or threads do not interfere with each other when accessing the same resource. All processes/threads are expected to follow the same steps for locking. If these steps are not followed precisely - or if no locking is done at all - then another process/thread could modify the shared resource in a way that is not visible or predictable to the original process. This can lead to data or memory corruption, denial of service, etc.
668,Exposure of Resource to Wrong Sphere,Class,Draft,The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.,Resources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files. A separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system. In either case, the end result is that a resource has been exposed to the wrong party.
669,Incorrect Resource Transfer Between Spheres,Class,Draft,The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource.,
670,Always-Incorrect Control Flow Implementation,Class,Draft,The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.,This weakness captures cases in which a particular code segment is always incorrect with respect to the algorithm that it is implementing. For example, if a C programmer intends to include multiple statements in a single block but does not include the enclosing braces (CWE-483), then the logic is always incorrect. This issue is in contrast to most weaknesses in which the code usually behaves correctly, except when it is externally manipulated in malicious ways.
671,Lack of Administrator Control over Security,Class,Draft,The product uses security features in a way that prevents the product's administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator.,If the product's administrator does not have the ability to manage security-related decisions at all times, then protecting the product from outside threats - including the product's developer - can become impossible. For example, a hard-coded account name and password cannot be changed by the administrator, thus exposing that product to attacks that the administrator can not prevent.
672,Operation on a Resource after Expiration or Release,Class,Draft,The product uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked.,
673,External Influence of Sphere Definition,Class,Draft,The product does not prevent the definition of control spheres from external actors.,Typically, a product defines its control sphere within the code itself, or through configuration by the product's administrator. In some cases, an external party can change the definition of the control sphere. This is typically a resultant weakness.
674,Uncontrolled Recursion,Class,Draft,The product does not properly control the amount of recursion that takes place, consuming excessive resources, such as allocated memory or the program stack.,
675,Multiple Operations on Resource in Single-Operation Context,Class,Draft,The product performs the same operation on a resource two or more times, when the operation should only be applied once.,
676,Use of Potentially Dangerous Function,Base,Draft,The product invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safely.,
681,Incorrect Conversion between Numeric Types,Base,Draft,When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur.,
682,Incorrect Calculation,Pillar,Draft,The product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.,When product performs a security-critical calculation incorrectly, it might lead to incorrect resource allocations, incorrect privilege assignments, or failed comparisons among other things. Many of the direct results of an incorrect calculation can lead to even larger problems such as failed protection mechanisms or even arbitrary code execution.
683,Function Call With Incorrect Order of Arguments,Variant,Draft,The product calls a function, procedure, or routine, but the caller specifies the arguments in an incorrect order, leading to resultant weaknesses.,While this weakness might be caught by the compiler in some languages, it can occur more frequently in cases in which the called function accepts variable numbers or types of arguments, such as format strings in C. It also can occur in languages or environments that do not enforce strong typing.
684,Incorrect Provision of Specified Functionality,Class,Draft,The code does not function according to its published specifications, potentially leading to incorrect usage.,When providing functionality to an external party, it is important that the product behaves in accordance with the details specified. When requirements of nuances are not documented, the functionality may produce unintended behaviors for the caller, possibly leading to an exploitable state.
685,Function Call With Incorrect Number of Arguments,Variant,Draft,The product calls a function, procedure, or routine, but the caller specifies too many arguments, or too few arguments, which may lead to undefined behavior and resultant weaknesses.,
686,Function Call With Incorrect Argument Type,Variant,Draft,The product calls a function, procedure, or routine, but the caller specifies an argument that is the wrong data type, which may lead to resultant weaknesses.,This weakness is most likely to occur in loosely typed languages, or in strongly typed languages in which the types of variable arguments cannot be enforced at compilation time, or where there is implicit casting.
687,Function Call With Incorrectly Specified Argument Value,Variant,Draft,The product calls a function, procedure, or routine, but the caller specifies an argument that contains the wrong value, which may lead to resultant weaknesses.,
688,Function Call With Incorrect Variable or Reference as Argument,Variant,Draft,The product calls a function, procedure, or routine, but the caller specifies the wrong variable or reference as one of the arguments, which may lead to undefined behavior and resultant weaknesses.,
691,Insufficient Control Flow Management,Pillar,Draft,The code does not sufficiently manage its control flow during execution, creating conditions in which the control flow can be modified in unexpected ways.,
693,Protection Mechanism Failure,Pillar,Draft,The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.,This weakness covers three distinct situations. A missing protection mechanism occurs when the application does not define any mechanism against a certain class of attack. An insufficient protection mechanism might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended. Finally, an ignored mechanism occurs when a mechanism is available and in active use within the product, but the developer has not applied it in some code path.
694,Use of Multiple Resources with Duplicate Identifier,Base,Incomplete,The product uses multiple resources that can have the same identifier, in a context in which unique identifiers are required.,If the product assumes that each resource has a unique identifier, the product could operate on the wrong resource if attackers can cause multiple resources to be associated with the same identifier.
695,Use of Low-Level Functionality,Base,Incomplete,The product uses low-level functionality that is explicitly prohibited by the framework or specification under which the product is supposed to operate.,The use of low-level functionality can violate the specification in unexpected ways that effectively disable built-in protection mechanisms, introduce exploitable inconsistencies, or otherwise expose the functionality to attack.
696,Incorrect Behavior Order,Class,Incomplete,The product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.,
697,Incorrect Comparison,Pillar,Incomplete,The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.,This Pillar covers several possibilities: the comparison checks one factor incorrectly; the comparison should consider multiple factors, but it does not check at least one of those factors at all; the comparison checks the wrong factor.
698,Execution After Redirect (EAR),Base,Incomplete,The web application sends a redirect to another location, but instead of exiting, it executes additional code.,
703,Improper Check or Handling of Exceptional Conditions,Pillar,Incomplete,The product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.,
704,Incorrect Type Conversion or Cast,Class,Incomplete,The product does not correctly convert an object, resource, or structure from one type to a different type.,
705,Incorrect Control Flow Scoping,Class,Incomplete,The product does not properly return control flow to the proper location after it has completed a task or detected an unusual condition.,
706,Use of Incorrectly-Resolved Name or Reference,Class,Incomplete,The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.,
707,Improper Neutralization,Pillar,Incomplete,The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.,If a message is malformed, it may cause the message to be incorrectly interpreted. Neutralization is an abstract term for any technique that ensures that input (and output) conforms with expectations and is safe. This can be done by: checking that the input/output is already safe (e.g. validation) transformation of the input/output to be safe using techniques such as filtering, encoding/decoding, escaping/unescaping, quoting/unquoting, or canonicalization preventing the input/output from being directly provided by an attacker (e.g. indirect selection that maps externally-provided values to internally-controlled values) preventing the input/output from being processed at all This weakness typically applies in cases where the product prepares a control message that another process must act on, such as a command or query, and malicious input that was intended as data, can enter the control plane instead. However, this weakness also applies to more general cases where there are not always control implications.
708,Incorrect Ownership Assignment,Base,Incomplete,The product assigns an owner to a resource, but the owner is outside of the intended control sphere.,This may allow the resource to be manipulated by actors outside of the intended control sphere.
710,Improper Adherence to Coding Standards,Pillar,Incomplete,The product does not follow certain coding rules for development, which can lead to resultant weaknesses or increase the severity of the associated vulnerabilities.,
732,Incorrect Permission Assignment for Critical Resource,Class,Draft,The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.,When a resource is given a permission setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution, or sensitive user data. For example, consider storage accounts for the cloud that allow or can be overwritten to provide public (i.e., anonymous) access.
733,Compiler Optimization Removal or Modification of Security-critical Code,Base,Incomplete,The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.,
749,Exposed Dangerous Method or Function,Base,Incomplete,The product provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted.,This weakness can lead to a wide variety of resultant weaknesses, depending on the behavior of the exposed method. It can apply to any number of technologies and approaches, such as ActiveX controls, Java functions, IOCTLs, and so on. The exposure can occur in a few different ways: The function/method was never intended to be exposed to outside actors. The function/method was only intended to be accessible to a limited set of actors, such as Internet-based access from a single web site.
754,Improper Check for Unusual or Exceptional Conditions,Class,Incomplete,The product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.,The programmer may assume that certain events or conditions will never occur or do not need to be worried about, such as low memory conditions, lack of access to resources due to restrictive permissions, or misbehaving clients or components. However, attackers may intentionally trigger these unusual conditions, thus violating the programmer's assumptions, possibly introducing instability, incorrect behavior, or a vulnerability. Note that this entry is not exclusively about the use of exceptions and exception handling, which are mechanisms for both checking and handling unusual or unexpected conditions.
755,Improper Handling of Exceptional Conditions,Class,Incomplete,The product does not handle or incorrectly handles an exceptional condition.,
756,Missing Custom Error Page,Base,Incomplete,The product does not return custom error pages to the user, possibly exposing sensitive information.,
757,Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade'),Base,Incomplete,A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.,When a security mechanism can be forced to downgrade to use a less secure algorithm, this can make it easier for attackers to compromise the product by exploiting weaker algorithm. The victim might not be aware that the less secure algorithm is being used. For example, if an attacker can force a communications channel to use cleartext instead of strongly-encrypted data, then the attacker could read the channel by sniffing, instead of going through extra effort of trying to decrypt the data using brute force techniques.
758,Reliance on Undefined, Unspecified, or Implementation-Defined Behavior,Class,Incomplete,The product uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity.,This can lead to resultant weaknesses when the required properties change, such as when the product is ported to a different platform or if an interaction error (CWE-435) occurs.
759,Use of a One-Way Hash without a Salt,Variant,Incomplete,The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product does not also use a salt as part of the input.,This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables. It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.
760,Use of a One-Way Hash with a Predictable Salt,Variant,Incomplete,The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product uses a predictable salt as part of the input.,This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables, effectively disabling the protection that an unpredictable salt would provide. It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.
761,Free of Pointer not at Start of Buffer,Variant,Incomplete,The product calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer.,This can cause the product to crash, or in some cases, modify critical program variables or execute code. This weakness often occurs when the memory is allocated explicitly on the heap with one of the malloc() family functions and free() is called, but pointer arithmetic has caused the pointer to be in the interior or end of the buffer.
762,Mismatched Memory Management Routines,Variant,Incomplete,The product attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource.,This weakness can be generally described as mismatching memory management routines, such as: The memory was allocated on the stack (automatically), but it was deallocated using the memory management routine free() (CWE-590), which is intended for explicitly allocated heap memory. The memory was allocated explicitly using one set of memory management functions, and deallocated using a different set. For example, memory might be allocated with malloc() in C++ instead of the new operator, and then deallocated with the delete operator. When the memory management functions are mismatched, the consequences may be as severe as code execution, memory corruption, or program crash. Consequences and ease of exploit will vary depending on the implementation of the routines and the object being managed.
763,Release of Invalid Pointer or Reference,Base,Incomplete,The product attempts to return a memory resource to the system, but it calls the wrong release function or calls the appropriate release function incorrectly.,This weakness can take several forms, such as: The memory was allocated, explicitly or implicitly, via one memory management method and deallocated using a different, non-compatible function (CWE-762). The function calls or memory management routines chosen are appropriate, however they are used incorrectly, such as in CWE-761.
764,Multiple Locks of a Critical Resource,Base,Incomplete,The product locks a critical resource more times than intended, leading to an unexpected state in the system.,When a product is operating in a concurrent environment and repeatedly locks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra locking calls will reduce the size of the total available pool, possibly leading to degraded performance or a denial of service. If this can be triggered by an attacker, it will be similar to an unrestricted lock (CWE-412). In the context of a binary lock, it is likely that any duplicate locking attempts will never succeed since the lock is already held and progress may not be possible.
765,Multiple Unlocks of a Critical Resource,Base,Incomplete,The product unlocks a critical resource more times than intended, leading to an unexpected state in the system.,When the product is operating in a concurrent environment and repeatedly unlocks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra calls to unlock will increase the count for the number of available resources, likely resulting in a crash or unpredictable behavior when the system nears capacity.
766,Critical Data Element Declared Public,Variant,Incomplete,The product declares a critical variable, field, or member to be public when intended security policy requires it to be private.,This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.
767,Access to Critical Private Variable via Public Method,Variant,Incomplete,The product defines a public method that reads or modifies a private variable.,If an attacker modifies the variable to contain unexpected values, this could violate assumptions from other parts of the code. Additionally, if an attacker can read the private variable, it may expose sensitive information or make it easier to launch further attacks.
768,Incorrect Short Circuit Evaluation,Variant,Incomplete,The product contains a conditional statement with multiple logical expressions in which one of the non-leading expressions may produce side effects. This may lead to an unexpected state in the program after the execution of the conditional, because short-circuiting logic may prevent the side effects from occurring.,Usage of short circuit evaluation, though well-defined in the C standard, may alter control flow in a way that introduces logic errors that are difficult to detect, possibly causing errors later during the product's execution. If an attacker can discover such an inconsistency, it may be exploitable to gain arbitrary control over a system. If the first condition of an or statement is assumed to be true under normal circumstances, or if the first condition of an and statement is assumed to be false, then any subsequent conditional may contain its own logic errors that are not detected during code review or testing. Finally, the usage of short circuit evaluation may decrease the maintainability of the code.
770,Allocation of Resources Without Limits or Throttling,Base,Incomplete,The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.,Code frequently has to work with limited resources, so programmers must be careful to ensure that resources are not consumed too quickly, or too easily. Without use of quotas, resource limits, or other protection mechanisms, it can be easy for an attacker to consume many resources by rapidly making many requests, or causing larger resources to be used than is needed. When too many resources are allocated, or if a single resource is too large, then it can prevent the code from working correctly, possibly leading to a denial of service.
771,Missing Reference to Active Allocated Resource,Base,Incomplete,The product does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed.,This does not necessarily apply in languages or frameworks that automatically perform garbage collection, since the removal of all references may act as a signal that the resource is ready to be reclaimed.
772,Missing Release of Resource after Effective Lifetime,Base,Draft,The product does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.,When a resource is not released after use, it can allow attackers to cause a denial of service by causing the allocation of resources without triggering their release. Frequently-affected resources include memory, CPU, disk space, power or battery, etc.
773,Missing Reference to Active File Descriptor or Handle,Variant,Incomplete,The product does not properly maintain references to a file descriptor or handle, which prevents that file descriptor/handle from being reclaimed.,This can cause the product to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations.
774,Allocation of File Descriptors or Handles Without Limits or Throttling,Variant,Incomplete,The product allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor.,This can cause the product to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations.
775,Missing Release of File Descriptor or Handle after Effective Lifetime,Variant,Incomplete,The product does not release a file descriptor or handle after its effective lifetime has ended, i.e., after the file descriptor/handle is no longer needed.,When a file descriptor or handle is not released after use (typically by explicitly closing it), attackers can cause a denial of service by consuming all available file descriptors/handles, or otherwise preventing other system processes from obtaining their own file descriptors/handles.
785,Use of Path Manipulation Function without Maximum-sized Buffer,Variant,Incomplete,The product invokes a function for normalizing paths or file names, but it provides an output buffer that is smaller than the maximum possible size, such as PATH_MAX.,Passing an inadequately-sized output buffer to a path manipulation function can result in a buffer overflow. Such functions include realpath(), readlink(), PathAppend(), and others.
