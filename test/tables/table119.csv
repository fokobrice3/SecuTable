CWE-ID,Name,Weakness Abstraction,Status,Description
5,J2EE Misconfiguration: Data Transmission Without Encryption,Variant,Draft,Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted.
6,J2EE Misconfiguration: Insufficient Session-ID Length,Variant,Incomplete,The J2EE application is configured to use an insufficient session ID length.
7,J2EE Misconfiguration: Missing Custom Error Page,Variant,Incomplete,The default error page of a web application should not display sensitive information about the product.
8,J2EE Misconfiguration: Entity Bean Declared Remote,Variant,Incomplete,When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean's data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application's expectations, potentially leading to other vulnerabilities.
9,J2EE Misconfiguration: Weak Access Permissions for EJB Methods,Variant,Draft,If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the product.
11,ASP.NET Misconfiguration: Creating Debug Binary,Variant,Draft,Debugging messages help attackers learn about the system and plan a form of attack.
12,ASP.NET Misconfiguration: Missing Custom Error Page,Variant,Draft,An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the framework's built-in responses.
13,ASP.NET Misconfiguration: Password in Configuration File,Variant,Draft,Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers.
14,Compiler Removal of Code to Clear Buffers,Variant,Draft,Sensitive memory is cleared according to the source code, but compiler optimizations leave the memory untouched when it is not read from again, aka dead store removal.
15,External Control of System or Configuration Setting,Base,Incomplete,One or more system settings or configuration elements can be externally controlled by a user.
20,Improper Input Validation,Class,Stable,The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.
22,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),Base,Stable,The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.
23,Relative Path Traversal,Base,Draft,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as .. that can resolve to a location that is outside of that directory.
24,Path Traversal: '../filedir',Variant,Incomplete,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ../ sequences that can resolve to a location that is outside of that directory.
25,Path Traversal: '/../filedir',Variant,Incomplete,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize /../ sequences that can resolve to a location that is outside of that directory.
26,Path Traversal: '/dir/../filename',Variant,Draft,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize /dir/../filename sequences that can resolve to a location that is outside of that directory.
27,Path Traversal: 'dir/../../filename',Variant,Draft,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize multiple internal ../ sequences that can resolve to a location that is outside of that directory.
28,Path Traversal: '..filedir',Variant,Incomplete,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize .. sequences that can resolve to a location that is outside of that directory.
29,Path Traversal: '..filename',Variant,Incomplete,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '..filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.
30,Path Traversal: 'dir..filename',Variant,Draft,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir..filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.
31,Path Traversal: 'dir....filename',Variant,Draft,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir....filename' (multiple internal backslash dot dot) sequences that can resolve to a location that is outside of that directory.
32,Path Traversal: '...' (Triple Dot),Variant,Incomplete,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '...' (triple dot) sequences that can resolve to a location that is outside of that directory.
33,Path Traversal: '....' (Multiple Dot),Variant,Incomplete,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....' (multiple dot) sequences that can resolve to a location that is outside of that directory.
34,Path Traversal: '....//',Variant,Incomplete,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....//' (doubled dot dot slash) sequences that can resolve to a location that is outside of that directory.
35,Path Traversal: '.../...//',Variant,Incomplete,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '.../...//' (doubled triple dot slash) sequences that can resolve to a location that is outside of that directory.
36,Absolute Path Traversal,Base,Draft,The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as /abs/path that can resolve to a location that is outside of that directory.
37,Path Traversal: '/absolute/pathname/here',Variant,Draft,The product accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.
38,Path Traversal: 'absolutepathnamehere',Variant,Draft,The product accepts input in the form of a backslash absolute path ('absolutepathnamehere') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.
39,Path Traversal: 'C:dirname',Variant,Draft,The product accepts input that contains a drive letter or Windows volume letter ('C:dirname') that potentially redirects access to an unintended location or arbitrary file.
40,Path Traversal: 'UNCsharename' (Windows UNC Share),Variant,Draft,The product accepts input that identifies a Windows UNC share ('UNCsharename') that potentially redirects access to an unintended location or arbitrary file.
41,Improper Resolution of Path Equivalence,Base,Incomplete,The product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.
42,Path Equivalence: 'filename.' (Trailing Dot),Variant,Incomplete,The product accepts path input in the form of trailing dot ('filedir.') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
43,Path Equivalence: 'filename....' (Multiple Trailing Dot),Variant,Incomplete,The product accepts path input in the form of multiple trailing dot ('filedir....') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
44,Path Equivalence: 'file.name' (Internal Dot),Variant,Incomplete,The product accepts path input in the form of internal dot ('file.ordir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
45,Path Equivalence: 'file...name' (Multiple Internal Dot),Variant,Incomplete,The product accepts path input in the form of multiple internal dot ('file...dir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
46,Path Equivalence: 'filename ' (Trailing Space),Variant,Incomplete,The product accepts path input in the form of trailing space ('filedir ') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
47,Path Equivalence: ' filename' (Leading Space),Variant,Incomplete,The product accepts path input in the form of leading space (' filedir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
48,Path Equivalence: 'file name' (Internal Whitespace),Variant,Incomplete,The product accepts path input in the form of internal space ('file(SPACE)name') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
49,Path Equivalence: 'filename/' (Trailing Slash),Variant,Incomplete,The product accepts path input in the form of trailing slash ('filedir/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
50,Path Equivalence: '//multiple/leading/slash',Variant,Incomplete,The product accepts path input in the form of multiple leading slash ('//multiple/leading/slash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
51,Path Equivalence: '/multiple//internal/slash',Variant,Incomplete,The product accepts path input in the form of multiple internal slash ('/multiple//internal/slash/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
52,Path Equivalence: '/multiple/trailing/slash//',Variant,Incomplete,The product accepts path input in the form of multiple trailing slash ('/multiple/trailing/slash//') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
53,Path Equivalence: 'multipleinternalbackslash',Variant,Incomplete,The product accepts path input in the form of multiple internal backslash ('multipletrailingslash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
54,Path Equivalence: 'filedir' (Trailing Backslash),Variant,Incomplete,The product accepts path input in the form of trailing backslash ('filedir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
55,Path Equivalence: '/./' (Single Dot Directory),Variant,Incomplete,The product accepts path input in the form of single dot directory exploit ('/./') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
56,Path Equivalence: 'filedir*' (Wildcard),Variant,Incomplete,The product accepts path input in the form of asterisk wildcard ('filedir*') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
57,Path Equivalence: 'fakedir/../realdir/filename',Variant,Incomplete,The product contains protection mechanisms to restrict access to 'realdir/filename', but it constructs pathnames using external input in the form of 'fakedir/../realdir/filename' that are not handled by those mechanisms. This allows attackers to perform unauthorized actions against the targeted file.
58,Path Equivalence: Windows 8.3 Filename,Variant,Incomplete,The product contains a protection mechanism that restricts access to a long filename on a Windows operating system, but it does not properly restrict access to the equivalent short 8.3 filename.
59,Improper Link Resolution Before File Access ('Link Following'),Base,Draft,The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.
61,UNIX Symbolic Link (Symlink) Following,Compound,Incomplete,The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.
62,UNIX Hard Link,Variant,Incomplete,The product, when opening a file or directory, does not sufficiently account for when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.
64,Windows Shortcut Following (.LNK),Variant,Incomplete,The product, when opening a file or directory, does not sufficiently handle when the file is a Windows shortcut (.LNK) whose target is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.
65,Windows Hard Link,Variant,Incomplete,The product, when opening a file or directory, does not sufficiently handle when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.
66,Improper Handling of File Names that Identify Virtual Resources,Base,Draft,The product does not handle or incorrectly handles a file name that identifies a virtual resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file.
67,Improper Handling of Windows Device Names,Variant,Incomplete,The product constructs pathnames from user input, but it does not handle or incorrectly handles a pathname containing a Windows device name such as AUX or CON. This typically leads to denial of service or an information exposure when the application attempts to process the pathname as a regular file.
69,Improper Handling of Windows ::DATA Alternate Data Stream,Variant,Incomplete,The product does not properly prevent access to, or detect usage of, alternate data streams (ADS).
72,Improper Handling of Apple HFS+ Alternate Data Stream Path,Variant,Incomplete,The product does not properly handle special paths that may identify the data or resource fork of a file on the HFS+ file system.
73,External Control of File Name or Path,Base,Draft,The product allows user input to control or influence paths or file names that are used in filesystem operations.
74,Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'),Class,Incomplete,The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.
75,Failure to Sanitize Special Elements into a Different Plane (Special Element Injection),Class,Draft,The product does not adequately filter user-controlled input for special elements with control implications.
76,Improper Neutralization of Equivalent Special Elements,Base,Draft,The product correctly neutralizes certain special elements, but it improperly neutralizes equivalent special elements.
77,Improper Neutralization of Special Elements used in a Command ('Command Injection'),Class,Draft,The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.
78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'),Base,Stable,The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.
79,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Stable,The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.
80,Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as <, >, and & that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.
81,Improper Neutralization of Script in an Error Message Web Page,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page.
82,Improper Neutralization of Script in Attributes of IMG Tags in a Web Page,Variant,Incomplete,The web application does not neutralize or incorrectly neutralizes scripting elements within attributes of HTML IMG tags, such as the src attribute.
83,Improper Neutralization of Script in Attributes in a Web Page,Variant,Draft,The product does not neutralize or incorrectly neutralizes javascript: or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.
84,Improper Neutralization of Encoded URI Schemes in a Web Page,Variant,Draft,The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings.
85,Doubled Character XSS Manipulations,Variant,Draft,The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters.
86,Improper Neutralization of Invalid Characters in Identifiers in Web Pages,Variant,Draft,The product does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.
87,Improper Neutralization of Alternate XSS Syntax,Variant,Draft,The product does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.
88,Improper Neutralization of Argument Delimiters in a Command ('Argument Injection'),Base,Draft,The product constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.
89,Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),Base,Stable,The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.
90,Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection'),Base,Draft,The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.
91,XML Injection (aka Blind XPath Injection),Base,Draft,The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.
93,Improper Neutralization of CRLF Sequences ('CRLF Injection'),Base,Draft,The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.
94,Improper Control of Generation of Code ('Code Injection'),Base,Draft,The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.
95,Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection'),Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. eval).
96,Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection'),Base,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.
97,Improper Neutralization of Server-Side Includes (SSI) Within a Web Page,Variant,Draft,The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.
98,Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion'),Variant,Draft,The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in require, include, or similar functions.
99,Improper Control of Resource Identifiers ('Resource Injection'),Class,Draft,The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.
102,Struts: Duplicate Validation Forms,Variant,Incomplete,The product uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.
103,Struts: Incomplete validate() Method Definition,Variant,Draft,The product has a validator form that either does not define a validate() method, or defines a validate() method but does not call super.validate().
104,Struts: Form Bean Does Not Extend Validation Class,Variant,Draft,If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation.
105,Struts: Form Field Without Validator,Variant,Draft,The product has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation.
106,Struts: Plug-in Framework not in Use,Variant,Draft,When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.
107,Struts: Unused Validation Form,Variant,Draft,An unused validation form indicates that validation logic is not up-to-date.
108,Struts: Unvalidated Action Form,Variant,Incomplete,Every Action Form must have a corresponding validation form.
109,Struts: Validator Turned Off,Variant,Draft,Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation.
110,Struts: Validator Without Form Field,Variant,Draft,Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.
111,Direct Use of Unsafe JNI,Variant,Draft,When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.
112,Missing XML Validation,Base,Draft,The product accepts XML from an untrusted source but does not validate the XML against the proper schema.
113,Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting'),Variant,Incomplete,The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.
114,Process Control,Class,Incomplete,Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.
115,Misinterpretation of Input,Base,Incomplete,The product misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.
116,Improper Encoding or Escaping of Output,Class,Draft,The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.
117,Improper Output Neutralization for Logs,Base,Draft,The product does not neutralize or incorrectly neutralizes output that is written to logs.
118,Incorrect Access of Indexable Resource ('Range Error'),Class,Incomplete,The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.
119,Improper Restriction of Operations within the Bounds of a Memory Buffer,Class,Stable,The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.
120,Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'),Base,Incomplete,The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.
121,Stack-based Buffer Overflow,Variant,Draft,A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).
122,Heap-based Buffer Overflow,Variant,Draft,A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().
123,Write-what-where Condition,Base,Draft,Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow.
124,Buffer Underwrite ('Buffer Underflow'),Base,Incomplete,The product writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.
125,Out-of-bounds Read,Base,Draft,The product reads data past the end, or before the beginning, of the intended buffer.
126,Buffer Over-read,Variant,Draft,The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.
127,Buffer Under-read,Variant,Draft,The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer.
128,Wrap-around Error,Base,Incomplete,Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore wraps around to a very small, negative, or undefined value.
129,Improper Validation of Array Index,Variant,Draft,The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.
130,Improper Handling of Length Parameter Inconsistency,Base,Incomplete,The product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.
131,Incorrect Calculation of Buffer Size,Base,Draft,The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.
134,Use of Externally-Controlled Format String,Base,Draft,The product uses a function that accepts a format string as an argument, but the format string originates from an external source.
135,Incorrect Calculation of Multi-Byte String Length,Base,Draft,The product does not correctly calculate the length of strings that can contain wide or multi-byte characters.
138,Improper Neutralization of Special Elements,Class,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.
140,Improper Neutralization of Delimiters,Base,Draft,The product does not neutralize or incorrectly neutralizes delimiters.
141,Improper Neutralization of Parameter/Argument Delimiters,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as parameter or argument delimiters when they are sent to a downstream component.
142,Improper Neutralization of Value Delimiters,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as value delimiters when they are sent to a downstream component.
143,Improper Neutralization of Record Delimiters,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as record delimiters when they are sent to a downstream component.
144,Improper Neutralization of Line Delimiters,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as line delimiters when they are sent to a downstream component.
145,Improper Neutralization of Section Delimiters,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as section delimiters when they are sent to a downstream component.
146,Improper Neutralization of Expression/Command Delimiters,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.
147,Improper Neutralization of Input Terminators,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as input terminators when they are sent to a downstream component.
148,Improper Neutralization of Input Leaders,Variant,Draft,The product does not properly handle when a leading character or sequence (leader) is missing or malformed, or if multiple leaders are used when only one should be allowed.
149,Improper Neutralization of Quoting Syntax,Variant,Draft,Quotes injected into a product can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions.
150,Improper Neutralization of Escape, Meta, or Control Sequences,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.
151,Improper Neutralization of Comment Delimiters,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as comment delimiters when they are sent to a downstream component.
152,Improper Neutralization of Macro Symbols,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as macro symbols when they are sent to a downstream component.
153,Improper Neutralization of Substitution Characters,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as substitution characters when they are sent to a downstream component.
154,Improper Neutralization of Variable Name Delimiters,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as variable name delimiters when they are sent to a downstream component.
155,Improper Neutralization of Wildcards or Matching Symbols,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as wildcards or matching symbols when they are sent to a downstream component.
156,Improper Neutralization of Whitespace,Variant,Draft,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as whitespace when they are sent to a downstream component.
157,Failure to Sanitize Paired Delimiters,Variant,Draft,The product does not properly handle the characters that are used to mark the beginning and ending of a group of entities, such as parentheses, brackets, and braces.
158,Improper Neutralization of Null Byte or NUL Character,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component.
159,Improper Handling of Invalid Use of Special Elements,Class,Draft,The product does not properly filter, remove, quote, or otherwise manage the invalid use of special elements in user-controlled input, which could cause adverse effect on its behavior and integrity.
160,Improper Neutralization of Leading Special Elements,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.
161,Improper Neutralization of Multiple Leading Special Elements,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.
162,Improper Neutralization of Trailing Special Elements,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.
163,Improper Neutralization of Multiple Trailing Special Elements,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.
164,Improper Neutralization of Internal Special Elements,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.
165,Improper Neutralization of Multiple Internal Special Elements,Variant,Incomplete,The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.
166,Improper Handling of Missing Special Element,Base,Draft,The product receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing.
167,Improper Handling of Additional Special Element,Base,Draft,The product receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is provided.
168,Improper Handling of Inconsistent Special Elements,Base,Draft,The product does not properly handle input in which an inconsistency exists between two or more special characters or reserved words.
170,Improper Null Termination,Base,Incomplete,The product does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator.
172,Encoding Error,Class,Draft,The product does not properly encode or decode the data, resulting in unexpected values.
173,Improper Handling of Alternate Encoding,Variant,Draft,The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.
174,Double Decoding of the Same Data,Variant,Draft,The product decodes the same input twice, which can limit the effectiveness of any protection mechanism that occurs in between the decoding operations.
175,Improper Handling of Mixed Encoding,Variant,Draft,The product does not properly handle when the same input uses several different (mixed) encodings.
176,Improper Handling of Unicode Encoding,Variant,Draft,The product does not properly handle when an input contains Unicode encoding.
177,Improper Handling of URL Encoding (Hex Encoding),Variant,Draft,The product does not properly handle when all or part of an input has been URL encoded.
178,Improper Handling of Case Sensitivity,Base,Incomplete,The product does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results.
179,Incorrect Behavior Order: Early Validation,Base,Incomplete,The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.
180,Incorrect Behavior Order: Validate Before Canonicalize,Variant,Draft,The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.
181,Incorrect Behavior Order: Validate Before Filter,Variant,Draft,The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.
182,Collapse of Data into Unsafe Value,Base,Draft,The product filters data in a way that causes it to be reduced or collapsed into an unsafe value that violates an expected security property.
183,Permissive List of Allowed Inputs,Base,Draft,The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.
184,Incomplete List of Disallowed Inputs,Base,Draft,The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.
185,Incorrect Regular Expression,Class,Draft,The product specifies a regular expression in a way that causes data to be improperly matched or compared.
186,Overly Restrictive Regular Expression,Base,Draft,A regular expression is overly restrictive, which prevents dangerous values from being detected.
187,Partial String Comparison,Variant,Incomplete,The product performs a comparison that only examines a portion of a factor before determining whether there is a match, such as a substring, leading to resultant weaknesses.
188,Reliance on Data/Memory Layout,Base,Draft,The product makes invalid assumptions about how protocol data or memory is organized at a lower level, resulting in unintended program behavior.
190,Integer Overflow or Wraparound,Base,Stable,The product performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.
191,Integer Underflow (Wrap or Wraparound),Base,Draft,The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.
192,Integer Coercion Error,Variant,Incomplete,Integer coercion refers to a set of flaws pertaining to the type casting, extension, or truncation of primitive data types.
193,Off-by-one Error,Base,Draft,A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.
194,Unexpected Sign Extension,Variant,Incomplete,The product performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses.
195,Signed to Unsigned Conversion Error,Variant,Draft,The product uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive.
196,Unsigned to Signed Conversion Error,Variant,Draft,The product uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive.
197,Numeric Truncation Error,Base,Incomplete,Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.
198,Use of Incorrect Byte Ordering,Base,Draft,The product receives input from an upstream component, but it does not account for byte ordering (e.g. big-endian and little-endian) when processing the input, causing an incorrect number or value to be used.
200,Exposure of Sensitive Information to an Unauthorized Actor,Class,Draft,The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.
201,Insertion of Sensitive Information Into Sent Data,Base,Draft,The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.
202,Exposure of Sensitive Information Through Data Queries,Variant,Draft,When trying to keep information confidential, an attacker can often infer some of the information by using statistics.
203,Observable Discrepancy,Base,Incomplete,The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.
204,Observable Response Discrepancy,Base,Incomplete,The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.
205,Observable Behavioral Discrepancy,Base,Incomplete,The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality.
206,Observable Internal Behavioral Discrepancy,Variant,Incomplete,The product performs multiple behaviors that are combined to produce a single result, but the individual behaviors are observable separately in a way that allows attackers to reveal internal state or internal decision points.
207,Observable Behavioral Discrepancy With Equivalent Products,Variant,Draft,The product operates in an environment in which its existence or specific identity should not be known, but it behaves differently than other products with equivalent functionality, in a way that is observable to an attacker.
208,Observable Timing Discrepancy,Base,Incomplete,Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.
209,Generation of Error Message Containing Sensitive Information,Base,Draft,The product generates an error message that includes sensitive information about its environment, users, or associated data.
210,Self-generated Error Message Containing Sensitive Information,Base,Draft,The product identifies an error condition and creates its own diagnostic or error messages that contain sensitive information.
211,Externally-Generated Error Message Containing Sensitive Information,Base,Incomplete,The product performs an operation that triggers an external diagnostic or error message that is not directly generated or controlled by the product, such as an error generated by the programming language interpreter that a software application uses. The error can contain sensitive system information.
212,Improper Removal of Sensitive Information Before Storage or Transfer,Base,Incomplete,The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.
213,Exposure of Sensitive Information Due to Incompatible Policies,Base,Draft,The product's intended functionality exposes information to certain actors in accordance with the developer's security policy, but this information is regarded as sensitive according to the intended security policies of other stakeholders such as the product's administrator, users, or others whose information is being processed.
214,Invocation of Process Using Visible Sensitive Information,Base,Incomplete,A process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.
215,Insertion of Sensitive Information Into Debugging Code,Base,Draft,The product inserts sensitive information into debugging code, which could expose this information if the debugging code is not disabled in production.
219,Storage of File with Sensitive Data Under Web Root,Variant,Draft,The product stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties.
220,Storage of File With Sensitive Data Under FTP Root,Variant,Draft,The product stores sensitive data under the FTP server root with insufficient access control, which might make it accessible to untrusted parties.
221,Information Loss or Omission,Class,Incomplete,The product does not record, or improperly records, security-relevant information that leads to an incorrect decision or hampers later analysis.
222,Truncation of Security-relevant Information,Base,Draft,The product truncates the display, recording, or processing of security-relevant information in a way that can obscure the source or nature of an attack.
223,Omission of Security-relevant Information,Base,Draft,The product does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe.
224,Obscured Security-relevant Information by Alternate Name,Base,Incomplete,The product records security-relevant information according to an alternate name of the affected entity, instead of the canonical name.
226,Sensitive Information in Resource Not Removed Before Reuse,Base,Draft,The product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or zeroize the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.
228,Improper Handling of Syntactically Invalid Structure,Class,Incomplete,The product does not handle or incorrectly handles input that is not syntactically well-formed with respect to the associated specification.
229,Improper Handling of Values,Base,Incomplete,The product does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined.
230,Improper Handling of Missing Values,Variant,Draft,The product does not handle or incorrectly handles when a parameter, field, or argument name is specified, but the associated value is missing, i.e. it is empty, blank, or null.
231,Improper Handling of Extra Values,Variant,Draft,The product does not handle or incorrectly handles when more values are provided than expected.
232,Improper Handling of Undefined Values,Variant,Draft,The product does not handle or incorrectly handles when a value is not defined or supported for the associated parameter, field, or argument name.
233,Improper Handling of Parameters,Base,Incomplete,The product does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.
234,Failure to Handle Missing Parameter,Variant,Incomplete,If too few arguments are sent to a function, the function will still pop the expected number of arguments from the stack. Potentially, a variable number of arguments could be exhausted in a function as well.
235,Improper Handling of Extra Parameters,Variant,Draft,The product does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.
236,Improper Handling of Undefined Parameters,Variant,Draft,The product does not handle or incorrectly handles when a particular parameter, field, or argument name is not defined or supported by the product.
237,Improper Handling of Structural Elements,Base,Incomplete,The product does not handle or incorrectly handles inputs that are related to complex structures.
238,Improper Handling of Incomplete Structural Elements,Variant,Draft,The product does not handle or incorrectly handles when a particular structural element is not completely specified.
239,Failure to Handle Incomplete Element,Variant,Draft,The product does not properly handle when a particular element is not completely specified.
240,Improper Handling of Inconsistent Structural Elements,Base,Draft,The product does not handle or incorrectly handles when two or more structural elements should be consistent, but are not.
241,Improper Handling of Unexpected Data Type,Base,Draft,The product does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z).
242,Use of Inherently Dangerous Function,Base,Draft,The product calls a function that can never be guaranteed to work safely.
243,Creation of chroot Jail Without Changing Working Directory,Variant,Draft,The product uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail.
244,Improper Clearing of Heap Memory Before Release ('Heap Inspection'),Variant,Draft,Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory.
245,J2EE Bad Practices: Direct Management of Connections,Variant,Draft,The J2EE application directly manages connections, instead of using the container's connection management facilities.
246,J2EE Bad Practices: Direct Use of Sockets,Variant,Draft,The J2EE application directly uses sockets instead of using framework method calls.
248,Uncaught Exception,Base,Draft,An exception is thrown from a function, but it is not caught.
250,Execution with Unnecessary Privileges,Base,Draft,The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.
252,Unchecked Return Value,Base,Draft,The product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.
253,Incorrect Check of Function Return Value,Base,Incomplete,The product incorrectly checks a return value from a function, which prevents it from detecting errors or exceptional conditions.
256,Plaintext Storage of a Password,Base,Incomplete,Storing a password in plaintext may result in a system compromise.
257,Storing Passwords in a Recoverable Format,Base,Incomplete,The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.
258,Empty Password in Configuration File,Variant,Incomplete,Using an empty string as a password is insecure.
259,Use of Hard-coded Password,Variant,Draft,The product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.
260,Password in Configuration File,Base,Incomplete,The product stores a password in a configuration file that might be accessible to actors who do not know the password.
261,Weak Encoding for Password,Base,Incomplete,Obscuring a password with a trivial encoding does not protect the password.
262,Not Using Password Aging,Base,Draft,The product does not have a mechanism in place for managing password aging.
263,Password Aging with Long Expiration,Base,Draft,The product supports password aging, but the expiration period is too long.
266,Incorrect Privilege Assignment,Base,Draft,A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.
267,Privilege Defined With Unsafe Actions,Base,Incomplete,A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.
268,Privilege Chaining,Base,Draft,Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination.
269,Improper Privilege Management,Class,Draft,The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.
270,Privilege Context Switching Error,Base,Draft,The product does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.
271,Privilege Dropping / Lowering Errors,Class,Incomplete,The product does not drop privileges before passing control of a resource to an actor that does not have those privileges.
272,Least Privilege Violation,Base,Incomplete,The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.
273,Improper Check for Dropped Privileges,Base,Incomplete,The product attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded.
274,Improper Handling of Insufficient Privileges,Base,Draft,The product does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses.
276,Incorrect Default Permissions,Base,Draft,During installation, installed file permissions are set to allow anyone to modify those files.
277,Insecure Inherited Permissions,Variant,Draft,A product defines a set of insecure permissions that are inherited by objects that are created by the program.
278,Insecure Preserved Inherited Permissions,Variant,Incomplete,A product inherits a set of insecure permissions for an object, e.g. when copying from an archive file, without user awareness or involvement.
279,Incorrect Execution-Assigned Permissions,Variant,Draft,While it is executing, the product sets the permissions of an object in a way that violates the intended permissions that have been specified by the user.
280,Improper Handling of Insufficient Permissions or Privileges ,Base,Draft,The product does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the product in an invalid state.
281,Improper Preservation of Permissions,Base,Draft,The product does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended.
282,Improper Ownership Management,Class,Draft,The product assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.
283,Unverified Ownership,Base,Draft,The product does not properly verify that a critical resource is owned by the proper entity.
284,Improper Access Control,Pillar,Incomplete,The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.
285,Improper Authorization,Class,Draft,The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.
286,Incorrect User Management,Class,Incomplete,The product does not properly manage a user within its environment.
287,Improper Authentication,Class,Draft,When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.
288,Authentication Bypass Using an Alternate Path or Channel,Base,Incomplete,A product requires authentication, but the product has an alternate path or channel that does not require authentication.
289,Authentication Bypass by Alternate Name,Base,Incomplete,The product performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor.
290,Authentication Bypass by Spoofing,Base,Incomplete,This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.
291,Reliance on IP Address for Authentication,Variant,Incomplete,The product uses an IP address for authentication.
293,Using Referer Field for Authentication,Variant,Draft,The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking.
294,Authentication Bypass by Capture-replay,Base,Incomplete,A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).
295,Improper Certificate Validation,Base,Draft,The product does not validate, or incorrectly validates, a certificate.
296,Improper Following of a Certificate's Chain of Trust,Base,Draft,The product does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate.
297,Improper Validation of Certificate with Host Mismatch,Variant,Incomplete,The product communicates with a host that provides a certificate, but the product does not properly ensure that the certificate is actually associated with that host.
298,Improper Validation of Certificate Expiration,Variant,Draft,A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age.
299,Improper Check for Certificate Revocation,Base,Draft,The product does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised.
300,Channel Accessible by Non-Endpoint,Class,Draft,The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.
301,Reflection Attack in an Authentication Protocol,Base,Draft,Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.
302,Authentication Bypass by Assumed-Immutable Data,Base,Incomplete,The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.
303,Incorrect Implementation of Authentication Algorithm,Base,Draft,The requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.
304,Missing Critical Step in Authentication,Base,Draft,The product implements an authentication technique, but it skips a step that weakens the technique.
305,Authentication Bypass by Primary Weakness,Base,Draft,The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error.
306,Missing Authentication for Critical Function,Base,Draft,The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.
307,Improper Restriction of Excessive Authentication Attempts,Base,Draft,The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.
308,Use of Single-factor Authentication,Base,Draft,The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.
309,Use of Password System for Primary Authentication,Base,Draft,The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.
311,Missing Encryption of Sensitive Data,Class,Draft,The product does not encrypt sensitive or critical information before storage or transmission.
312,Cleartext Storage of Sensitive Information,Base,Draft,The product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.
313,Cleartext Storage in a File or on Disk,Variant,Draft,The product stores sensitive information in cleartext in a file, or on disk.
314,Cleartext Storage in the Registry,Variant,Draft,The product stores sensitive information in cleartext in the registry.
315,Cleartext Storage of Sensitive Information in a Cookie,Variant,Draft,The product stores sensitive information in cleartext in a cookie.
316,Cleartext Storage of Sensitive Information in Memory,Variant,Draft,The product stores sensitive information in cleartext in memory.
317,Cleartext Storage of Sensitive Information in GUI,Variant,Draft,The product stores sensitive information in cleartext within the GUI.
318,Cleartext Storage of Sensitive Information in Executable,Variant,Draft,The product stores sensitive information in cleartext in an executable.
