'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
629,"DEPRECATED: Unauthorized Use of Device Resources",Standard,Deprecated,"This attack pattern has been deprecated.","",,,"","","","","","","","","","","","",
63,"Cross-Site Scripting (XSS)",Standard,Draft,"An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:242::NATURE:CanPrecede:CAPEC ID:107::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS vulnerability] The attacker uses the entry points gathered in the Explore phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.:TECHNIQUE:Use a list of XSS probe strings to inject script into UI entry fields. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a list of XSS probe strings to inject script into resources accessed by the application. If possible, the probe strings contain a unique identifier.::STEP:3:PHASE:Exploit:DESCRIPTION:[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.:TECHNIQUE:Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.::STEP:4:PHASE:Exploit:DESCRIPTION:[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site:TECHNIQUE:Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).::STEP:5:PHASE:Exploit:DESCRIPTION:[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.:TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.::","::Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.::","::SKILL:To achieve a redirection and use of less trusted source, an attacker can simply place a script in bulletin board, blog, wiki, or other user-generated content site that are echoed back to other client machines.:LEVEL:Low::SKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High::","::Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine.::","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Session tokens for specific host::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::","::Classic phishing attacks lure users to click on content that appears trustworthy, such as logos, and links that seem to go to their trusted financial institutions and online auction sites. But instead the attacker appends malicious scripts into the otherwise innocent appearing resources. The HTML source for a standard phishing attack looks like this: <a href=www.exampletrustedsite.com?Name=<script>maliciousscript</script>>Trusted Site</a> When the user clicks the link, the appended script also executes on the local user's machine.::","::79::20::","TAXONOMY NAME:WASC:ENTRY ID:08:ENTRY NAME:Cross-Site Scripting::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cross Site Scripting (XSS)::","",
630,"TypoSquatting",Detailed,Draft,"An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.","",Low,Medium,"::NATURE:ChildOf:CAPEC ID:616::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.:TECHNIQUE:Research popular or high traffic websites.::STEP:2:PHASE:Experiment:DESCRIPTION:[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the TypoSquatted URL.:TECHNIQUE:Register the TypoSquatted domain.::STEP:3:PHASE:Exploit:DESCRIPTION:[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the TypoSquatted domain.:TECHNIQUE:Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the TypoSquatted domain.:TECHNIQUE:Assume that a user will incorrectly type the legitimate URL, leading the user to the TypoSquatted domain.::","::An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.::","::SKILL:Adversaries must be able to register DNS hostnames/URLâ€™s.:LEVEL:Low::","","","::SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful TypoSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.::","::Authenticate all servers and perform redundant checks when using DNS hostnames.::Purchase potential TypoSquatted domains and forward to legitimate domain.::","::An adversary sends an email, impersonating paypal.com, to a user stating that they have just received a money transfer and to click the given link to obtain their money. However, the link the in email is paypa1.com instead of paypal.com, which the user clicks without fully reading the link. The user is directed to the adversary's website, which appears as if it is the legitimate paypal.com login page. The user thinks they are logging into their account, but have actually just given their paypal credentials to the adversary. The adversary can now use the user's legitimate paypal credentials to log into the user's account and steal any money which may be in the account. TypoSquatting vulnerability allows an adversary to impersonate a trusted domain and trick a user into visiting the malicious website to steal user credentials.::","","","",
631,"SoundSquatting",Detailed,Draft,"An adversary registers a domain name that sounds the same as a trusted domain, but has a different spelling. A SoundSquatting attack takes advantage of a user's confusion of the two words to direct Internet traffic to adversary-controlled destinations. SoundSquatting does not require an attack against the trusted domain or complicated reverse engineering.","::TERM:Homophone Attack:DESCRIPTION:::",Low,Medium,"::NATURE:ChildOf:CAPEC ID:616::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted, receives a consistent amount of traffic, and is a homophone.:TECHNIQUE:Research popular or high traffic websites which are also homophones.::STEP:2:PHASE:Experiment:DESCRIPTION:[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the SoundSquatted URL.:TECHNIQUE:Register the SoundSquatted domain.::STEP:3:PHASE:Exploit:DESCRIPTION:[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the SoundSquatted domain.:TECHNIQUE:Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the SoundSquatted domain.:TECHNIQUE:Assume that a user will unintentionally use the homophone in the URL, leading the user to the SoundSquatted domain.::","::An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.::","::SKILL:Adversaries must be able to register DNS hostnames/URLâ€™s.:LEVEL:Low::","","","::SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful SoundSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.::","::Authenticate all servers and perform redundant checks when using DNS hostnames.::Purchase potential SoundSquatted domains and forward to legitimate domain.::","::An adversary sends an email, impersonating the popular banking website guaranteebanking.com, to a user stating that they have just received a new deposit and to click the given link to confirm the deposit. However, the link the in email is guarantybanking.com instead of guaranteebanking.com, which the user clicks without fully reading the link. The user is directed to the adversary's website, which appears as if it is the legitimate guaranteebanking.com login page. The user thinks they are logging into their account, but have actually just given their guaranteebanking.com credentials to the adversary. The adversary can now use the user's legitimate guaranteebanking.com credentials to log into the user's account and steal any money which may be in the account.See also: SoundSquatting vulnerability allows an adversary to impersonate a trusted domain and leverages a user's confusion between the meaning of two words which are pronounced the same into visiting the malicious website to steal user credentials.::","","","",
632,"Homograph Attack via Homoglyphs",Detailed,Draft,"An adversary registers a domain name containing a homoglyph, leading the registered domain to appear the same as a trusted domain. A homograph attack leverages the fact that different characters among various character sets look the same to the user. Homograph attacks must generally be combined with other attacks, such as phishing attacks, in order to direct Internet traffic to the adversary-controlled destinations.","::TERM:Homoglyph Attack:DESCRIPTION:::",Low,Medium,"::NATURE:ChildOf:CAPEC ID:616::NATURE:CanPrecede:CAPEC ID:89::NATURE:CanPrecede:CAPEC ID:543::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.:TECHNIQUE:Research popular or high traffic websites.::STEP:2:PHASE:Experiment:DESCRIPTION:[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the URL containing the homoglpyh character(s).:TECHNIQUE:Register the Homograph domain.::STEP:3:PHASE:Exploit:DESCRIPTION:[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the Homograph domain.:TECHNIQUE:Execute a phishing attack and send a user an e-mail convincing the to click on a link leading the user to the malicious domain.::","::An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets.::","::SKILL:Adversaries must be able to register DNS hostnames/URLâ€™s.:LEVEL:Low::","","","::SCOPE:Other:TECHNICAL IMPACT:Other:NOTE:Depending on the intention of the adversary, a successful Homograph attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials.::","::Authenticate all servers and perform redundant checks when using DNS hostnames.::Utilize browsers that can warn users if URLs contain characters from different character sets.::","::An adversary sends an email, impersonating bankofamerica.com to a user stating that they have just received a new deposit and to click the given link to confirm the deposit. However, the link the in email is bankofamerica.com, where the 'a' and 'e' characters are Cyrillic and not ASCII, instead of bankofamerica.com (all ASCII), which the user clicks after carefully reading the URL, making sure that typosquatting and soundsquatting attacks are not being leveraged against them. The user is directed to the adversary's website, which appears as if it is the legitimate bankofamerica.com login page. The user thinks they are logging into their account, but have actually just given their bankofamerica.com credentials to the adversary. The adversary can now use the user's legitimate bankofamerica.com credentials to log into the user's account and steal any money which may be in the account. Homograph vulnerability allows an adversary to impersonate a trusted domain by leveraging homoglyphs and tricking a user into visiting the malicious website to steal user credentials.See also: CVE-2012-0584 CVE-2009-0652 CVE-2005-0233 CVE-2005-0234 CVE-2005-0235 CVE-2005-0236 CVE-2005-0237 CVE-2005-0238::","::1007::","","",
633,"Token Impersonation",Detailed,Stable,"An adversary exploits a weakness in authentication to create an access token (or equivalent) that impersonates a different entity, and then associates a process/thread to that that impersonated token. This action causes a downstream user to make a decision or take action that is based on the assumed identity, and not the response that blocks the adversary.","",,Medium,"::NATURE:ChildOf:CAPEC ID:194::","","::This pattern of attack is only applicable when a downstream user leverages tokens to verify identity, and then takes action based on that identity.::","","","","::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic:NOTE:By faking the source of data or services, an adversary can cause a target to make incorrect decisions about how to proceed.::SCOPE:Integrity:TECHNICAL IMPACT:Gain Privileges:NOTE:By impersonating identities that have an increased level of access, an adversary gain privilege that they many not have otherwise had.::SCOPE:Integrity:TECHNICAL IMPACT:Hide Activities:NOTE:Faking the source of data or services can be used to create a false trail in logs as the target will associated any actions with the impersonated identity instead of the adversary.::","","","::287::1270::","TAXONOMY NAME:ATTACK:ENTRY ID:1134:ENTRY NAME:Access Token Manipulation::","",
634,"Probe Audio and Video Peripherals",Detailed,Stable,"The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system.","",Low,High,"::NATURE:ChildOf:CAPEC ID:651::NATURE:ChildOf:CAPEC ID:545::","","::Knowledge of the target device's or applicationâ€™s vulnerabilities that can be capitalized on with malicious code. The adversary must be able to place the malicious code on the target device.::","::SKILL:To deploy a hidden process or malware on the system to automatically collect audio and video data.:LEVEL:High::","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Prevent unknown code from executing on a system through the use of an allowlist policy.::Patch installed applications as soon as new updates become available.::","::An adversary can capture audio and video, and transmit the recordings to a C2 server or a similar capability.::An adversary can capture and record from audio peripherals in a vehicle via a Car Whisperer attack. If an adversary is within close proximity to a vehicle with Bluetooth capabilities, they may attempt to connect to the hands-free system when it is in pairing mode. With successful authentication, if an authentication system is present at all, an adversary may be able to play music/voice recordings, as well begin a recording and capture conversations happening inside the vehicle. Successful authentication relies on the pairing security key being set to a default value, or by brute force (which may be less practical in an outside environment) Depending on the sensitivity of the information being discussed, this scenario can be extremely compromising.::An adversary may also use a technique called Bluebugging, which is similar to Bluesnarfing but requires the adversary to be between 10-15 meters of the target device. Bluebugging creates a backdoor for an attacker to listen/record phone calls, forward calls, send SMS and retrieve the phonebook.::","::267::","TAXONOMY NAME:ATTACK:ENTRY ID:1123:ENTRY NAME:Audio Capture::::TAXONOMY NAME:ATTACK:ENTRY ID:1125:ENTRY NAME:Video Capture::","",
635,"Alternative Execution Due to Deceptive Filenames",Standard,Draft,"The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.","",,High,"::NATURE:ChildOf:CAPEC ID:165::","","::The use of the file must be controlled by the file extension.::","","","","","::Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.::","","::162::","TAXONOMY NAME:ATTACK:ENTRY ID:1036.007:ENTRY NAME:Masquerading: Double File Extension::","",
636,"Hiding Malicious Data or Code within Files",Standard,Draft,"Files on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.","",,High,"::NATURE:ChildOf:CAPEC ID:165::","","::The operating system must support a file system that allows for alternate data storage for a file.::","","","","","::Many tools are available to search for the hidden data. Scan regularly for such data using one of these tools.::","","::506::","TAXONOMY NAME:ATTACK:ENTRY ID:1001.002:ENTRY NAME:Data Obfuscation: Steganography::::TAXONOMY NAME:ATTACK:ENTRY ID:1027.003:ENTRY NAME:Obfuscated Files or Information: Steganography::::TAXONOMY NAME:ATTACK:ENTRY ID:1027.004:ENTRY NAME:Obfuscated Files or Information: Compile After Delivery::::TAXONOMY NAME:ATTACK:ENTRY ID:1218.001:ENTRY NAME:Signed Binary Proxy Execution: Compiled HTML File::::TAXONOMY NAME:ATTACK:ENTRY ID:1221:ENTRY NAME:Template Injection::","",
637,"Collect Data from Clipboard",Detailed,Stable,"The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.","",Low,Low,"::NATURE:ChildOf:CAPEC ID:150::","::STEP:1:PHASE:Explore:DESCRIPTION:[Find an application that allows copying sensititve data to clipboad] An adversary first needs to find an application that allows copying and pasting of sensitive information. This could be an application that prints out temporary passwords to the screen, private email addresses, or any other sensitive information or data::STEP:2:PHASE:Experiment:DESCRIPTION:[Target users of the application] An adversary will target users of the application in order to obtain the information in their clipboard on a periodic basic:TECHNIQUE:Install malware on a user's system designed to log clipboard contents periodically:TECHNIQUE:Get the user to click on a malicious link that will bring them to an application to log the contents of the clipboard::STEP:3:PHASE:Exploit:DESCRIPTION:[Follow-up attack] Use any sensitive information found to carry out a follow-up attack::","::The adversary must have a means (i.e., a pre-installed tool or background process) by which to collect data from the clipboard and store it. That is, when the target copies data to the clipboard (e.g., to paste into another application), the adversary needs some means of capturing that data in a third location.::","::SKILL:To deploy a hidden process or malware on the system to automatically collect clipboard data.:LEVEL:High::","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.::Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern.::","","::267::","TAXONOMY NAME:ATTACK:ENTRY ID:1115:ENTRY NAME:Clipboard Data::","",
638,"Altered Component Firmware",Detailed,Stable,"An adversary exploits systems features and/or improperly protected firmware of hardware components, such as Hard Disk Drives (HDD), with the goal of executing malicious code from within the component's Master Boot Record (MBR). Conducting this type of attack entails the adversary infecting the target with firmware altering malware, using known tools, and a payload. Once this malware is executed, the MBR is modified to include instructions to execute the payload at desired intervals and when the system is booted up. A successful attack will obtain persistence within the victim system even if the operating system is reinstalled and/or if the component is formatted or has its data erased.","",Low,Very High,"::NATURE:ChildOf:CAPEC ID:452::","::STEP:1:PHASE:Explore:DESCRIPTION:[Select Target] The adversary searches for a suitable target to attack, such as government and/or private industry organizations.:TECHNIQUE:Conduct reconnaissance to determine potential targets to exploit.::STEP:2:PHASE:Explore:DESCRIPTION:[Identify Components] After selecting a target, the adversary determines whether a vulnerable component, such as a specific make and model of a HDD, is contained within the target system.:TECHNIQUE:[Remote Access Vector] The adversary gains remote access to the target, typically via additional malware, and explores the system to determine hardware components that are being leveraged.:TECHNIQUE:[Physical Access Vector] The adversary intercepts components in transit and determines if the component is vulnerable to attack.::STEP:3:PHASE:Experiment:DESCRIPTION:[Optional: Create Payload] If not using an already existing payload, the adversary creates their own to be executed at defined intervals and upon system boot processes. This payload may then be tested on the target system or a test system to confirm its functionality.::STEP:4:PHASE:Exploit:DESCRIPTION:[Insert Firmware Altering Malware] Once a vulnerable component has been identified, the adversary leverages known malware tools to infect the component's firmware and drop the payload within the component's MBR. This allows the adversary to maintain persistence on the target and execute the payload without being detected.:TECHNIQUE:The adversary inserts the firmware altering malware on the target component, via the use of known malware tools.:TECHNIQUE:[Physical Access Vector] The adversary then sends the component to its original intended destination, where it will be installed onto a victim system.::","::Advanced knowledge about the target component's firmware::Advanced knowledge about Master Boot Records (MBR)::Advanced knowledge about tools used to insert firmware altering malware.::Advanced knowledge about component shipments to the target organization.::","::SKILL:Ability to access and reverse engineer hardware component firmware.:LEVEL:High::SKILL:Ability to intercept components in transit.:LEVEL:High::SKILL:Ability to create malicious payload to be executed from MBR.:LEVEL:Medium::SKILL:Ability to leverage known malware tools to infect target system and insert firmware altering malware/payload:LEVEL:Low::","::Manufacturer source code for hardware components.::Malware tools used to insert malware and payload onto target component.::Either remote or physical access to the target component.::","::Output observed from processes, API calls, or Self-Monitoring, Analysis and Reporting Technology (SMART) may provide insight into malicious modifications of MBRs.::Digital forensics tools may produce output that indicates an attack of this nature has occurred. Examples include unexpected disk partitions and/or unusual strings.::","::SCOPE:Authentication:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data::","::Leverage hardware components known to not be susceptible to these types of attacks.::Implement hardware RAID infrastructure.::","::In 2014, the Equation group was observed levering known malware tools to conduct component firmware alteration attacks against hard drives. In total, 12 HDD categories were shown to be vulnerable from manufacturers such as Western Digital, HGST, Samsung, and Seagate. Because of their complexity, only a few victims were targeted by these attacks. [REF-664]::","","TAXONOMY NAME:ATTACK:ENTRY ID:1542.002:ENTRY NAME:Pre-OS Boot:Component Firmware::","",
639,"Probe System Files",Detailed,Stable,"An adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information.","",,Medium,"::NATURE:ChildOf:CAPEC ID:545::","","::An adversary has access to the file system of a system.::","","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary.::","::Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.::Adversaries may search network shares on computers they have compromised to find files of interest.::","::552::","TAXONOMY NAME:ATTACK:ENTRY ID:1039:ENTRY NAME:Data from Network Shared Drive::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.001:ENTRY NAME:Unsecured Credentials: Credentials in Files::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.003:ENTRY NAME:Unsecured Credentials: Bash History::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.004:ENTRY NAME:Unsecured Credentials: Private Keys::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.006:ENTRY NAME:Unsecured Credentials: Group Policy Preferences::","",
64,"Using Slashes and URL Encoding Combined to Bypass Validation Logic",Detailed,Draft,"This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.","",High,High,"::NATURE:ChildOf:CAPEC ID:267::","::STEP:1:PHASE:Explore:DESCRIPTION:The attacker accesses the server using a specific URL.::STEP:2:PHASE:Experiment:DESCRIPTION:The attacker tries to encode some special characters in the URL. The attacker find out that some characters are not filtered properly.::STEP:3:PHASE:Exploit:DESCRIPTION:The attacker crafts a malicious URL string request and sends it to the server.::STEP:4:PHASE:Exploit:DESCRIPTION:The server decodes and interprets the URL string. Unfortunately since the input filtering is not done properly, the special characters have harmful consequences.::","::The application accepts and decodes URL string request.::The application performs insufficient filtering/canonicalization on the URLs.::","::SKILL:An attacker can try special characters in the URL and bypass the URL validation.:LEVEL:Low::SKILL:The attacker may write a script to defeat the input filtering mechanism.:LEVEL:Medium::","","::If the first decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.::Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.::","::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:Denial of Service::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::","::Attack Example: Combined Encodings CesarFTP Alexandre Cesari released a freeware FTP server for Windows that fails to provide proper filtering against multiple encoding. The FTP server, CesarFTP, included a Web server component that could be attacked with a combination of the triple-dot and URL encoding attacks. An attacker could provide a URL that included a string like /...%5C/ This is an interesting exploit because it involves an aggregation of several tricks: the escape character, URL encoding, and the triple dot.See also: CVE-2001-1335::","::177::173::172::73::22::74::20::697::707::","","",
640,"Inclusion of Code in Existing Process",Detailed,Stable,"The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, function hooking, reflective code loading, and more.","",Low,High,"::NATURE:ChildOf:CAPEC ID:251::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target process] The adversary determines a process with sufficient privileges that they wish to include code into.:TECHNIQUE:On Windows, use the process explorer's security tab to see if a process is running with administror privileges.:TECHNIQUE:On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt to include simple code with known output] The adversary attempts to include very simple code into the existing process to determine if the code inclusion worked. The code will differ based on the approach used to include code into an existing process.::STEP:3:PHASE:Exploit:DESCRIPTION:[Include arbitrary code into existing process] Once an adversary has determined that including code into the existing process is possible, they will include code for a targeted purpose, such as accessing that process's memory.::","::The targeted application fails to verify the integrity of the running process that allows an adversary to execute arbitrary code.::","::SKILL:Knowledge of how to load malicious code into the memory space of a running process, as well as the ability to have the running process execute this code. For example, with DLL injection, the adversary must know how to load a DLL into the memory space of another running process, and cause this process to execute the code inside of the DLL.:LEVEL:High::","","","::SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Read Data::","::Prevent unknown or malicious software from loading through using an allowlist policy.::Properly restrict the location of the software being used.::Leverage security kernel modules providing advanced access control and process restrictions like SELinux.::Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.::Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.::Monitor API calls like SetWindowsHookEx and SetWinEventHook which install hook procedures for Windows.::Monitor processes and command-line arguments for unknown behavior related to code injection.::","","::114::829::","TAXONOMY NAME:ATTACK:ENTRY ID:1505.005:ENTRY NAME:Server Software Component: Terminal Services DLL::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.006:ENTRY NAME:Hijack Execution Flow: Dynamic Linker Hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.013:ENTRY NAME:Hijack Execution Flow: KernelCallbackTable::::TAXONOMY NAME:ATTACK:ENTRY ID:1620:ENTRY NAME:Reflective Code Loading::","",
641,"DLL Side-Loading",Detailed,Stable,"An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.","",Low,High,"::NATURE:ChildOf:CAPEC ID:159::","","::The target must fail to verify the integrity of the DLL before using them.::","::SKILL:Trick the operating system in loading a malicious DLL instead of a legitimate DLL.:LEVEL:High::","","","::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Bypass Protection Mechanism::","::Prevent unknown DLLs from loading through using an allowlist policy.::Patch installed applications as soon as new updates become available.::Properly restrict the location of the software being used.::Use of sxstrace.exe on Windows as well as manual inspection of the manifests.::Require code signing and avoid using relative paths for resources.::","","::706::","TAXONOMY NAME:ATTACK:ENTRY ID:1574.002:ENTRY NAME:Hijack Execution Flow:DLL Side-Loading::","",
642,"Replace Binaries",Detailed,Draft,"Adversaries know that certain binaries will be regularly executed as part of normal processing. If these binaries are not protected with the appropriate file system permissions, it could be possible to replace them with malware. This malware might be executed at higher system permission levels. A variation of this pattern is to discover self-extracting installation packages that unpack binaries to directories with weak file permissions which it does not clean up appropriately. These binaries can be replaced by malware, which can then be executed.","",,High,"::NATURE:ChildOf:CAPEC ID:17::","","::The attacker must be able to place the malicious binary on the target machine.::","","","","","::Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.::","::The installer for a previous version of Firefox would use a DLL maliciously placed in the default download directory instead of the existing DLL located elsewhere, probably due to DLL hijacking. This DLL would be run with administrator privileges if the installer has those privileges.::By default, the Windows screensaver application SCRNSAVE.exe leverages the scrnsave.scr Portable Executable (PE) file in C:Windowssystem32. This value is set in the registry at HKEY_CURRENT_USERControl PanelDesktop, which can be modified by an adversary to instead point to a malicious program. This program would then run any time the SCRNSAVE.exe program is activated and with administrator privileges. An adversary may additionally modify other registry values within the same location to set the SCRNSAVE.exe program to run more frequently.::","::732::","TAXONOMY NAME:ATTACK:ENTRY ID:1505.005:ENTRY NAME:Server Software Component: Terminal Services DLL::::TAXONOMY NAME:ATTACK:ENTRY ID:1554:ENTRY NAME:Compromise Client Software Binary::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.005:ENTRY NAME:Hijack Execution Flow:Executable Installer File Permissions Weakness::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Binary planting::","",
643,"Identify Shared Files/Directories on System",Detailed,Draft,"An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.","",Medium,Medium,"::NATURE:ChildOf:CAPEC ID:309::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:545::NATURE:CanPrecede:CAPEC ID:165::","","::The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).::","::SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line. The adversary, or their malware, can simply employ a set of commands that search for shared drives on the system (e.g., net view remote system or net share).:LEVEL:Low::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is potentially able to identify the location of sensitive information or lateral pathways through the network.::","::Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools.::","","::267::200::","TAXONOMY NAME:ATTACK:ENTRY ID:1135:ENTRY NAME:Network Share Discovery::","",
644,"Use of Captured Hashes (Pass The Hash)",Detailed,Stable,"An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:653::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:549::NATURE:CanPrecede:CAPEC ID:545::","::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known Windows credential hash value pairs] The adversary must obtain known Windows credential hash value pairs of accounts that exist on the domain.:TECHNIQUE:An adversary purchases breached Windows credential hash value pairs from the dark web.:TECHNIQUE:An adversary conducts a sniffing attack to steal Windows credential hash value pairs as they are transmitted.:TECHNIQUE:An adversary gains access to a Windows domain system/files and exfiltrates Windows credential hash value pairs.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded Windows credential hash value pairs.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt domain authentication] Try each Windows credential hash value pair until the target grants access.:TECHNIQUE:Manually or automatically enter each Windows credential hash value pair through the target's interface.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications.::","::The system/application is connected to the Windows domain.::The system/application leverages the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.::The adversary possesses known Windows credential hash value pairs that exist on the target domain.::","::SKILL:Once an adversary obtains a known Windows credential hash value pair, leveraging it is trivial.:LEVEL:Low::","::A list of known Window credential hash value pairs for the targeted domain.::","::Authentication attempts use credentials that have been used previously by the account in question.::Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.::Data is being transferred and/or removed from systems/applications within the network.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.::","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.::Monitor system and domain logs for abnormal credential access.::Create a strong password policy and ensure that your system enforces this policy.::Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.::","::Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credential hash value pairs from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]::Operation Soft Cell, which has been underway since at least 2012, leveraged a modified Mimikatz that dumped NTLM hashes. The acquired hashes were then used to authenticate to other systems within the network via Pass The Hash attacks. [REF-580]::","::522::836::308::294::308::","TAXONOMY NAME:ATTACK:ENTRY ID:1550.002:ENTRY NAME:Use Alternate Authentication Material:Pass The Hash::","",
645,"Use of Captured Tickets (Pass The Ticket)",Detailed,Stable,"An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.","",Low,High,"::NATURE:ChildOf:CAPEC ID:652::NATURE:CanPrecede:CAPEC ID:151::","","::The adversary needs physical access to the victim system.::The use of a third-party credential harvesting tool.::","::SKILL:Determine if Kerberos authentication is used on the server.:LEVEL:Low::SKILL:The adversary uses a third-party tool to obtain the necessary tickets to execute the attack.:LEVEL:High::","","","::SCOPE:Integrity:TECHNICAL IMPACT:Gain Privileges::","::Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.::Monitor system and domain logs for abnormal access.::","::Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]::","::522::294::308::","TAXONOMY NAME:ATTACK:ENTRY ID:1550.003:ENTRY NAME:Use Alternate Authentication Material:Pass The Ticket::","",
646,"Peripheral Footprinting",Standard,Stable,"Adversaries may attempt to obtain information about attached peripheral devices and components connected to a computer system. Examples may include discovering the presence of iOS devices by searching for backups, analyzing the Windows registry to determine what USB devices have been connected, or infecting a victim system with malware to report when a USB device has been connected. This may allow the adversary to gain additional insight about the system or network environment, which may be useful in constructing further attacks.","",Low,Medium,"::NATURE:ChildOf:CAPEC ID:169::","","::The adversary needs either physical or remote access to the victim system.::","::SKILL:The adversary needs to be able to infect the victim system in a manner that gives them remote access.:LEVEL:Medium::SKILL:If analyzing the Windows registry, the adversary must understand the registry structure to know where to look for devices.:LEVEL:Medium::","","","","::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::","","::200::","TAXONOMY NAME:ATTACK:ENTRY ID:1120:ENTRY NAME:Peripheral Device Discovery::","",
647,"Collect Data from Registries",Detailed,Draft,"An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.","",Medium,Medium,"::NATURE:ChildOf:CAPEC ID:150::","::STEP:1:PHASE:Explore:DESCRIPTION:[Gain logical access to system] An adversary must first gain logical access to the system it wants to gather registry information from,:TECHNIQUE:Obtain user account credentials and access the system:TECHNIQUE:Plant malware on the system that will give remote logical access to the adversary::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine if the permissions are correct] Once logical access is gained, an adversary will determine if they have the proper permissions, or are authorized, to view registry information. If they do not, they will need to escalate privileges on the system through other means::STEP:3:PHASE:Experiment:DESCRIPTION:[Peruse registry for information] Once an adversary has access to a registry, they will gather all system-specific data and sensitive information that they deem useful.::STEP:4:PHASE:Exploit:DESCRIPTION:[Follow-up attack] Use any information or weaknesses found to carry out a follow-up attack::","::The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).::The adversary must have capability to navigate the operating system to peruse the registry.::","::SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line.:LEVEL:Low::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to read sensitive information about the system in the registry.::","::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::","","::285::","TAXONOMY NAME:ATTACK:ENTRY ID:1005:ENTRY NAME:Data from Local System::::TAXONOMY NAME:ATTACK:ENTRY ID:1012:ENTRY NAME:Query Registry::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.002:ENTRY NAME:Unsecured Credentials: Credentials in Registry::","",
648,"Collect Data from Screen Capture",Detailed,Draft,"An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.","",Medium,Medium,"::NATURE:ChildOf:CAPEC ID:150::","","::The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).::","::SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only to leverage the relevant command for screen capture.:LEVEL:Low::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to capture potentially sensitive information and processes as they appear on the screen.::","::Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.::While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.::","","::267::","TAXONOMY NAME:ATTACK:ENTRY ID:1113:ENTRY NAME:Screen Capture::::TAXONOMY NAME:ATTACK:ENTRY ID:1513:ENTRY NAME:Screen Capture::","",
649,"Adding a Space to a File Extension",Detailed,Draft,"An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.","",Low,Medium,"::NATURE:ChildOf:CAPEC ID:635::","","::The use of the file must be controlled by the file extension.::","","","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::","::File extensions should be checked to see if non-visible characters are being included.::","","::46::","TAXONOMY NAME:ATTACK:ENTRY ID:1036.006:ENTRY NAME:Masquerading:Space after Filename::","",
65,"Sniff Application Code",Detailed,Draft,"An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.","",Low,High,"::NATURE:ChildOf:CAPEC ID:157::NATURE:CanPrecede:CAPEC ID:37::","::STEP:1:PHASE:Explore:DESCRIPTION:[Set up a sniffer] The adversary sets up a sniffer in the path between the server and the client and watches the traffic.:TECHNIQUE:The adversary sets up a sniffer in the path between the server and the client.::STEP:2:PHASE:Exploit:DESCRIPTION:[Capturing Application Code Bound During Patching]adversary knows that the computer/OS/application can request new applications to install, or it periodically checks for an available update. The adversary loads the sniffer set up during Explore phase, and extracts the application code from subsequent communication. The adversary then proceeds to reverse engineer the captured code.:TECHNIQUE:adversary loads the sniffer to capture the application code bound during a dynamic update.:TECHNIQUE:The adversary proceeds to reverse engineer the captured code.::","::The attacker must have the ability to place themself in the communication path between the client and server.::The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.::The attacker must be able to employ a sniffer on the network without being detected.::","::SKILL:The attacker needs to setup a sniffer for a sufficient period of time so as to capture meaningful quantities of code. The presence of the sniffer should not be detected on the network. Also if the attacker plans to employ an adversary-in-the-middle attack (CAPEC-94), the client or server must not realize this. Finally, the attacker needs to regenerate source code from binary code if the need be.:LEVEL:Medium::","::The Attacker needs the ability to capture communications between the client being updated and the server providing the update. In the case that encryption obscures client/server communication the attacker will either need to lift key material from the client.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Design: Encrypt all communication between the client and server.::Implementation: Use SSL, SSH, SCP.::Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network.::","::Attacker receives notification that the computer/OS/application has an available update, loads a network sniffing tool, and extracts update data from subsequent communication. The attacker then proceeds to reverse engineer the captured stream to gain sensitive information, such as encryption keys, validation algorithms, applications patches, etc..::Plain code, such as applets or JavaScript, is also part of the executing application. If such code is transmitted unprotected, the attacker can capture the code and possibly reverse engineer it to gain sensitive information, such as encryption keys, validation algorithms and such.::","::319::311::318::693::","TAXONOMY NAME:ATTACK:ENTRY ID:1040:ENTRY NAME:Network Sniffing::","",
650,"Upload a Web Shell to a Web Server",Detailed,Draft,"By exploiting insufficient permissions, it is possible to upload a web shell to a web server in such a way that it can be executed remotely. This shell can have various capabilities, thereby acting as a gateway to the underlying web server. The shell might execute at the higher permission level of the web server, providing the ability the execute malicious code at elevated levels.","",,High,"::NATURE:ChildOf:CAPEC ID:17::","","::The web server is susceptible to one of the various web application exploits that allows for uploading a shell file.::","","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::","::Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.::Ensure that the file permissions in directories on the web server from which files can be execute is set to the least privilege settings, and that those directories contents is controlled by an allowlist.::","","::287::553::","TAXONOMY NAME:ATTACK:ENTRY ID:1505.003:ENTRY NAME:Server Software Component:Web Shell::","",
651,"Eavesdropping",Standard,Draft,"An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.","",,Medium,"::NATURE:ChildOf:CAPEC ID:117::","","::The adversary typically requires physical proximity to the target's environment, whether for physical eavesdropping or for placing recording equipment. This is not always the case for software-based eavesdropping, if the adversary has the capability to install malware on the target system that can activate a microphone and record audio digitally.::","","::For logical eavesdropping, some equipment may be necessary (e.g., microphone, tape recorder, etc.). For physical eavesdropping, only proximity is required.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:The adversary gains unauthorized access to information.::","::Be mindful of your surroundings when discussing sensitive information in public areas.::Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.::If possible, physically disable the microphone on your machine if it is not needed.::","","::200::","TAXONOMY NAME:ATTACK:ENTRY ID:1111:ENTRY NAME:Multi-Factor Authentication Interception::","",
652,"Use of Known Kerberos Credentials",Standard,Draft,"An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::","::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known Kerberos credentials] The adversary must obtain known Kerberos credentials in order to access the target system, application, or service within the domain.:TECHNIQUE:An adversary purchases breached Kerberos service account username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary guesses the credentials to a weak Kerberos service account.:TECHNIQUE:An adversary conducts a sniffing attack to steal Kerberos tickets as they are transmitted.:TECHNIQUE:An adversary conducts a Kerberoasting attack.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt Kerberos authentication] Try each Kerberos credential against various resources within the domain until the target grants access.:TECHNIQUE:Manually or automatically enter each Kerberos service account credential through the target's interface.:TECHNIQUE:Attempt a Pass the Ticket attack.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications.::","::The system/application leverages Kerberos authentication.::The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication for Kerberos service accounts.::The system/application does not have a sound password policy that is being enforced for Kerberos service accounts.::The system/application does not implement an effective password throttling mechanism for authenticating to Kerberos service accounts.::The targeted network allows for network sniffing attacks to succeed.::","::SKILL:Once an adversary obtains a known Kerberos credential, leveraging it is trivial.:LEVEL:Low::","::A valid Kerberos ticket or a known Kerberos service account credential.::","::Authentication attempts use expired or invalid credentials.::Authentication attempts are originating from IP addresses or locations that are inconsistent with an account's normal IP addresses or locations.::Data is being transferred and/or removed from systems/applications within the network.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.::","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.::Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse Kerberos service account credentials across systems.::Deny remote use of Kerberos service account credentials to log into domain systems.::Do not allow Kerberos service accounts to be a local administrator on more than one system.::Enable at least AES Kerberos encryption for tickets.::Monitor system and domain logs for abnormal credential access.::","::Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]::PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]::","::522::307::308::309::262::263::654::294::836::","TAXONOMY NAME:ATTACK:ENTRY ID:1558:ENTRY NAME:Steal or Forge Kerberos Tickets::","TYPE:Other:NOTE:Kerberos centers around a ticketing system that is used to request/grant access to resources and to then access the requested resources. If one of these tickets is acquired, an adversary could gain access to a specific resource; access any resource a user has privileges to access; gain access to services that use Kerberos as an authentication mechanism and generate tickets to access a particular resource and the system that hosts the resource; or generate Ticket Granting Tickets (TGTs) for any domain account within Active Directory.::",
653,"Use of Known Operating System Credentials",Standard,Draft,"An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.","",High,High,"::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::","::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known operating system credentials] The adversary must obtain known operating system credentials in order to access the target system, application, or service within the domain.:TECHNIQUE:An adversary purchases breached operating system username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.:TECHNIQUE:An adversary conducts a sniffing attack to steal operating system credentials as they are transmitted.:TECHNIQUE:An adversary gains access to a system/files and exfiltrates password hashes.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt authentication] Try each operating system credential against various systems, applications, and services within the domain until the target grants access.:TECHNIQUE:Manually or automatically enter each credential through the target's interface.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the network::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into other systems on the network. The adversary can also pose as a legitimate user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within system files or application configuration.::","::The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication.::The system/application does not have a sound password policy that is being enforced.::The system/application does not implement an effective password throttling mechanism.::The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.::","::SKILL:Once an adversary obtains a known credential, leveraging it is trivial.:LEVEL:Low::","::A list of known credentials for the targeted domain.::A custom script that leverages a credential list to launch an attack.::","::Authentication attempts use credentials that have been used previously by the account in question.::Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.::Data is being transferred and/or removed from systems/applications within the network.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.::","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the network.::Create a strong password policy and ensure that your system enforces this policy.::Ensure users are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse local administrator account credentials across systems.::Deny remote use of local admin credentials to log into domain systems.::Do not allow accounts to be a local administrator on more than one system.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Monitor system and domain logs for abnormal credential access.::","::Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credentials from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]::Mimikatz, a post-exploitation Windows credential harvester, can be used to gather and exploit Windows credentials. This malware has been used in several known cyberattacks, such as the Petya Ransomeware attacks. [REF-576]::","::522::307::308::309::262::263::654::","","",
654,"Credential Prompt Impersonation",Detailed,Stable,"An adversary, through a previously installed malicious application, impersonates a credential prompt in an attempt to steal a user's credentials.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:504::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing their credentials.:TECHNIQUE:Determine what tasks prompt a user for their credentials.::STEP:2:PHASE:Exploit:DESCRIPTION:[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials.:TECHNIQUE:Prompt a user for their credentials, while making the user believe the credential request is legitimate.::","::The adversary must already have access to the target system via some means.::A legitimate task must exist that an adversary can impersonate to glean credentials.::","::SKILL:Once an adversary has gained access to the target system, impersonating a credential prompt is not difficult.:LEVEL:Low::","::Malware or some other means to initially comprise the target system.::Additional malware to impersonate a legitimate credential prompt.::","::Credential prompts that appear illegitimate or unexpected.::","::SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::","::The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.::","::An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.::An adversary randomly prompts a user to enter their system credentials, tricking the user into believing that a background process requires the credentials to function. The adversary can then use these gleaned credentials to execute additional attacks or obtain data.::","::1021::","TAXONOMY NAME:ATTACK:ENTRY ID:1056:ENTRY NAME:Input Capture::::TAXONOMY NAME:ATTACK:ENTRY ID:1548.004:ENTRY NAME:Abuse Elevation Control Mechanism: Elevated Execution with Prompt::","",
655,"Avoid Security Tool Identification by Adding Data",Detailed,Draft,"An adversary adds data to a file to increase the file size beyond what security tools are capable of handling in an attempt to mask their actions. In addition to this, adding data to a file also changes the file's hash, frustrating security tools that look for known bad files by their hash.","",High,High,"::NATURE:ChildOf:CAPEC ID:572::","","","","","","::SCOPE:Accountability:TECHNICAL IMPACT:Hide Activities:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","","::Adding data to change the checksum of a file and can be used to avoid hash-based denylists and static anti-virus signatures.::","","TAXONOMY NAME:ATTACK:ENTRY ID:1027.001:ENTRY NAME:Obfuscated Files or Information:Binary padding::","",
656,"Voice Phishing",Detailed,Stable,"An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a cold call or by the victim if calling an illegitimate telephone number.","::TERM:Vishing:DESCRIPTION:::TERM:VoIP Phishing:DESCRIPTION:::",High,High,"::NATURE:ChildOf:CAPEC ID:98::","::STEP:1:PHASE:Explore:DESCRIPTION:[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate organization more convincingly. The adversary can use homograph or similar attacks to convince users that they are using the legitimate website. If the adversary leverages cold-calling for this attack, this step is skipped.:TECHNIQUE:Optionally obtain a domain name that visually looks similar to the legitimate organization's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L):TECHNIQUE:Optionally obtain a legitimate SSL certificate for the new domain name.::STEP:2:PHASE:Explore:DESCRIPTION:[Explore legitimate website and create duplicate] An adversary optionally creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the organization's website that they are trying to impersonate. That website will contain a telephone number for the victim to call to assist them with their issue and initiate the attack. If the adversary leverages cold-calling for this attack, this step is skipped.:TECHNIQUE:Use spidering software to get copy of web pages on legitimate site.:TECHNIQUE:Manually save copies of required web pages from legitimate site.:TECHNIQUE:Create new web pages that have the legitimate site's look and feel, but contain completely new content.::STEP:3:PHASE:Exploit:DESCRIPTION:[Convince user to provide sensitive information to the adversary.] An adversary cold calls the victim or receives a call from the victim via the malicious site and provides a call-to-action, in order to persuade the user into providing sensitive details to the adversary (e.g. login credentials, bank account information, etc.). The key is to get the victim to believe that the individual they are talking to is from a legitimate entity with which the victim does business and that the call is occurring for legitimate reasons. A call-to-action will usually need to sound legitimate and urgent enough to prompt action from the user.:TECHNIQUE:Call the user a from a spoofed legitimate-looking telephone number.::STEP:4:PHASE:Exploit:DESCRIPTION:[Use stolen information] Once the adversary obtains the sensitive information, this information can be leveraged to log into the victim's bank account and transfer money to an account of their choice, or to make fraudulent purchases with stolen credit card information.:TECHNIQUE:Login to the legitimate site using another the victim's supplied credentials::","::An adversary needs phone numbers to initiate contact with the victim, in addition to a legitimate-looking telephone number to call the victim from.::An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their hooks to many potential victims.::An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.::If passively conducting this attack via a spoofed website, replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.::","::SKILL:Basic knowledge about websites: obtaining them, designing and implementing them, etc.:LEVEL:Medium::","::Legitimate-looking telephone number(s) to initiate calls with victims::","::You receive a call from an entity that you are not even a customer of prompting you to log into your account.::You receive any call that requests you provide sensitive information.::You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.::","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem.::","::The target receives an email or text message stating that their Apple ID has been disabled due to suspicious activity and that the included link includes instructions on how to unlock their Apple account. The link in the text message looks legitimate and once the link is clicked, the user is redirected to a legitimate-looking webpage that prompts the user to call a specified number to initiate the unlock process. The target initiates the phone call and provides their credentials or other sensitive information to the individual they assume works for Apple. Now that the adversary possess this data, it can be used to log into the account to obtain other sensitive data, such as Apple Pay information.::An adversary calls the target and claims to work for their bank. The adversary informs the target that their bank account has been frozen, due to potential fraudulent spending, and requires authentication in order to re-enable the account. The target, believing the caller is a legitimate bank employee, provides their bank account login credentials to confirm they are the authorized owner of the account. The adversary then confirms this authentication and claims that the account has been unlocked. Once the adversary has obtained these credentials, money can be transferred from the victim's account to an account controlled by the adversary.::","","","",
657,"Malicious Automated Software Update via Spoofing",Detailed,Draft,"An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.","",High,High,"::NATURE:ChildOf:CAPEC ID:186::","","","","","","::SCOPE:Access Control:SCOPE:Availability:SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands::","","::An example of the spoofing strategy would be the eTrust Antivirus Webscan Automated Update Remote Code Execution vulnerability (CVE-2006-3976) and (CVE-2006-3977) whereby an ActiveX control could be remotely manipulated by an attacker controlled web page to download and execute the attackers' code without integrity checking.::","::494::","TAXONOMY NAME:ATTACK:ENTRY ID:1072:ENTRY NAME:Software Deployment Tools::","",
66,"SQL Injection",Standard,Draft,"This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.","",High,High,"::NATURE:ChildOf:CAPEC ID:248::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey application] The attacker first takes an inventory of the functionality exposed by the application.:TECHNIQUE:Spider web sites for all available links:TECHNIQUE:Sniff network communications with application using a utility such as WireShark.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to SQL injection, attempt to inject characters that have special meaning in SQL (such as a single quote character, a double quote character, two hyphens, a parenthesis, etc.). The goal is to create a SQL query with an invalid syntax.:TECHNIQUE:Use web browser to inject input through text fields or through HTTP GET parameters.:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.:TECHNIQUE:Use network-level packet injection tools such as netcat to inject input:TECHNIQUE:Use modified client (modified by reverse engineering) to inject input.::STEP:3:PHASE:Experiment:DESCRIPTION:[Experiment with SQL Injection vulnerabilities] After determining that a given input is vulnerable to SQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, or to modify or delete information in the database.:TECHNIQUE:Use public resources such as SQL Injection Cheat Sheet at http://ferruh.mavituna.com/makale/sql-injection-cheatsheet/, and try different approaches for adding logic to SQL queries.:TECHNIQUE:Add logic to query, and use detailed error messages from the server to debug the query. For example, if adding a single quote to a query causes an error message, try : ' OR 1=1; --, or something else that would syntactically complete a hypothesized query. Iteratively refine the query.:TECHNIQUE:Use Blind SQL Injection techniques to extract information about the database schema.:TECHNIQUE:If a denial of service attack is the goal, try stacking queries. This does not work on all platforms (most notably, it does not work on Oracle or MySQL). Examples of inputs to try include: '; DROP TABLE SYSOBJECTS; -- and '); DROP TABLE SYSOBJECTS; --. These particular queries will likely not work because the SYSOBJECTS table is generally protected.::STEP:4:PHASE:Exploit:DESCRIPTION:[Exploit SQL Injection vulnerability] After refining and adding various logic to SQL queries, craft and execute the underlying SQL query that will be used to attack the target system. The goal is to reveal, modify, and/or delete database data, using the knowledge obtained in the previous step. This could entail crafting and executing multiple SQL queries if a denial of service attack is the intent.:TECHNIQUE:Craft and Execute underlying SQL query::","::SQL queries used by the application to store, retrieve or modify data.::User-controllable input that is not properly validated by the application as part of SQL queries.::","::SKILL:It is fairly simple for someone with basic SQL knowledge to perform SQL injection, in general. In certain instances, however, specific knowledge of the database employed may be required.:LEVEL:Low::","::None: No specialized resources are required to execute this type of attack.::","::Too many false or invalid queries to the database, especially those caused by malformed input.::","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.::Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::","::With PHP-Nuke versions 7.9 and earlier, an attacker can successfully access and modify data, including sensitive contents such as usernames and password hashes, and compromise the application through SQL Injection. The protection mechanism against SQL Injection employs a denylist approach to input validation. However, because of an improper denylist, it is possible to inject content such as foo'/**/UNION or foo UNION/**/ to bypass validation and glean sensitive information from the database. See also: CVE-2006-5525::","::89::1286::","TAXONOMY NAME:WASC:ENTRY ID:19:ENTRY NAME:SQL Injection::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:SQL Injection::","",
660,"Root/Jailbreak Detection Evasion via Hooking",Detailed,Stable,"An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to hook code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.","",Medium,Very High,"::NATURE:ChildOf:CAPEC ID:251::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify application with attack potential] The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).:TECHNIQUE:Search application stores for mobile applications worth exploiting::STEP:2:PHASE:Experiment:DESCRIPTION:[Develop code to be hooked into chosen target application] The adversary develops code or leverages existing code that will be hooked into the target application in order to evade Root/Jailbreak detection methods.:TECHNIQUE:Develop code or leverage existing code to bypass Root/Jailbreak detection methods.:TECHNIQUE:Test the code to see if it works.:TECHNIQUE:Iteratively develop the code until Root/Jailbreak detection methods are evaded.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute code hooking to evade Root/Jailbreak detection methods] Once hooking code has been developed or obtained, execute the code against the target application to evade Root/Jailbreak detection methods.:TECHNIQUE:Hook code into the target application.::","::The targeted application must be non-restricted to allow code hooking.::","::SKILL:Knowledge about Root/Jailbreak detection and evasion techniques.:LEVEL:High::SKILL:Knowledge about code hooking.:LEVEL:Medium::","::The adversary must have a Rooted/Jailbroken mobile device.::The adversary needs to have enough access to the target application to control the included code or file.::","","::SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through Root/Jailbreak Detection Evasion via Hooking, the adversary compromises the integrity of the application.::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:NOTE:An adversary may leverage Root/Jailbreak Detection Evasion via Hooking in order to obtain sensitive information.::","::Ensure mobile applications are signed appropriately to avoid code inclusion via hooking.::Inspect the application's memory for suspicious artifacts, such as shared objects/JARs or dylibs, after other Root/Jailbreak detection methods.::Inspect the application's stack trace for suspicious method calls.::Allow legitimate native methods, and check for non-allowed native methods during Root/Jailbreak detection methods.::For iOS applications, ensure application methods do not originate from outside of Apple's SDK.::","::An adversary targets a non-restricted iOS banking application in an attempt to compromise sensitive user data. The adversary creates Objective-C runtime code that always returns false when checking for the existence of the Cydia application. The malicious code is then dynamically loaded into the application via the DYLD_INSERT_LIBRARIES environment variable. When the banking applications checks for Cydia, the hooked code returns false, so the application assumes the device is stock (i.e. not Jailbroken) and allows it to access the application. However, the adversary has just evaded Jailbreak detection and is now able to glean user credentials and/or transaction details.::An adversary targets a mobile voting application on an Android device with the goal of committing voter fraud. Leveraging the Xposed framework, the adversary is able to create and hook Java code into the application that bypasses Root detection methods. When the voting application attempts to detect a Rooted device by checking for commonly known installed packages associated with Rooting, the hooked code removes the suspicious packages before returning to the application. As a result, the application believes the device is stock (i.e. not Rooted) when in actuality this is not the case. Having evading Root detection, the adversary is now able to cast votes for the candidate of their choosing as a variety of different users.::","::829::","TAXONOMY NAME:ATTACK:ENTRY ID:1055:ENTRY NAME:Process Injection::","",
661,"Root/Jailbreak Detection Evasion via Debugging",Detailed,Stable,"An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.","",Medium,Very High,"::NATURE:ChildOf:CAPEC ID:121::NATURE:CanPrecede:CAPEC ID:68::NATURE:CanPrecede:CAPEC ID:660::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify application with attack potential] The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).:TECHNIQUE:Search application stores for mobile applications worth exploiting::STEP:2:PHASE:Experiment:DESCRIPTION:[Debug the target application] The adversary inserts the debugger into the program entry point of the mobile application, after the application's signature has been identified, to dump its memory contents.:TECHNIQUE:Insert the debugger at the mobile application's program entry point, after the application's signature has been identified.:TECHNIQUE:Dump the memory region containing the now decrypted code from the address space of the binary.::STEP:3:PHASE:Experiment:DESCRIPTION:[Remove application signature verification methods] Remove signature verification methods from the decrypted code and resign the application with a self-signed certificate.::STEP:4:PHASE:Exploit:DESCRIPTION:[Execute the application and evade Root/Jailbreak detection methods] The application executes with the self-signed certificate, while believing it contains a trusted certificate. This now allows the adversary to evade Root/Jailbreak detection via code hooking or other methods.:TECHNIQUE:Optional: Hook code into the target application.::","::A debugger must be able to be inserted into the targeted application.::","::SKILL:Knowledge about Root/Jailbreak detection and evasion techniques.:LEVEL:High::SKILL:Knowledge about runtime debugging.:LEVEL:Medium::","::The adversary must have a Rooted/Jailbroken mobile device with debugging capabilities.::","","::SCOPE:Integrity:SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Through Root/Jailbreak Detection Evasion via Debugging, the adversary compromises the integrity of the application.::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Access Control:TECHNICAL IMPACT:Read Data:NOTE:An adversary may leverage Root/Jailbreak Detection Evasion via Debugging in order to obtain sensitive information.::","::Instantiate checks within the application code that ensures debuggers are not attached.::","::An adversary targets an iOS banking application in an attempt to compromise sensitive user data. The adversary launches the application with the iOS debugger and sets a breakpoint at the program entry point, after the application's signature has been verified. Next, the adversary dumps the memory region that contains the decrypted code from the address space of the binary. The 'Restrict' flag is then stripped from the application and the adversary resigns the application with a self-signed certificate. The application is now executed without the 'Restrict' flag, while trusting the self-signed certificate to be legitimate. However, the adversary is now able to evaded Jailbreak detection via code hooking or other methods and can glean user credentials and/or transaction details.::","::489::","","",
662,"Adversary in the Browser (AiTB)",Standard,Stable,"An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints.","::TERM:Man in the Browser:DESCRIPTION:::TERM:Boy in the Browser:DESCRIPTION:::TERM:Man in the Mobile:DESCRIPTION:::",High,Very High,"::NATURE:ChildOf:CAPEC ID:94::","::STEP:1:PHASE:Experiment:DESCRIPTION:The adversary tricks the victim into installing the Trojan Horse malware onto their system.:TECHNIQUE:Conduct phishing attacks, drive-by malware installations, or masquerade malicious browser extensions as being legitimate.::STEP:2:PHASE:Experiment:DESCRIPTION:The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.::STEP:3:PHASE:Exploit:DESCRIPTION:The adversary observes, filters, or alters passed data of their choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.::","::The adversary must install or convince a user to install a Trojan.::There are two components communicating with each other.::An attacker is able to identify the nature and mechanism of communication between the two target components.::Strong mutual authentication is not used between the two target components yielding opportunity for adversarial interposition.::For browser pivoting, the SeDebugPrivilege and a high-integrity process must both exist to execute this attack.::","::SKILL:Tricking the victim into installing the Trojan is often the most difficult aspect of this attack. Afterwards, the remainder of this attack is fairly trivial.:LEVEL:Medium::","","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Ensure software and applications are only downloaded from legitimate and reputable sources, in addition to conducting integrity checks on the downloaded component.::Leverage anti-malware tools, which can detect Trojan Horse malware.::Use strong, out-of-band mutual authentication to always fully authenticate both ends of any communications channel.::Limit user permissions to prevent browser pivoting.::Ensure browser sessions are regularly terminated and when their effective lifetime ends.::","::An adversary conducts a phishing attack and tricks a victim into installing a malicious browser plugin. The adversary then positions themself between the victim and their banking institution. The victim begins by initiating a funds transfer from their personal savings to their personal checking account. Using injected JavaScript, the adversary captures this request and modifies it to transfer an increased amount of funds to an account that they controls, before sending it to the bank. The bank processes the transfer and sends the confirmation notice back to the victim, which is instead intercepted by the adversary. The adversary modifies the confirmation to reflect the original transaction details and sends this modified message back to the victim. Upon receiving the confirmation, the victim assumes the transfer was successful and is unaware that their money has just been transferred to the adversary.::In 2020, the Agent Tesla malware was leveraged to conduct AiTB attacks against organizations within the gas, oil, and other energy sectors. The malware was delivered via a spearphishing campaign and has the capability to form-grab, keylog, copy clipboard data, extract credentials, and capture screenshots. [REF-630]::Boy in the browser attacks are a subset of AiTB attacks. Similar to AiTB attacks, the adversary must first trick the victim into installing a Trojan, either via social engineering or drive-by-download attacks. The malware then modifies the victim's hosts file in order to reroute web traffic from an intended website to an adversary-controlled website that mimics the legitimate website. The adversary is now able to observe, intercept, and/or modify all traffic, as in a traditional Adversary in the Middle attack (CAPEC-94). BiTB attacks are low-cost, easy to execute, and more difficult to detect since the malware often removes itself once the attack has concluded. [REF-631]::Man in the Mobile attacks are a subset of AiTB attacks that target mobile device users. Like AiTB attacks, an adversary convinces a victim to install a Trojan mobile application on their mobile device, often under the guise of security. Once the victim has installed the application, the adversary can capture all SMS traffic to bypass SMS-based out-of-band authentication systems. [REF-632]::","::300::494::","TAXONOMY NAME:ATTACK:ENTRY ID:1185:ENTRY NAME:Man in the Browser::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Man-in-the-browser attack::","",
663,"Exploitation of Transient Instruction Execution",Standard,Stable,"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.","",Low,Very High,"::NATURE:ChildOf:CAPEC ID:74::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:141::NATURE:PeerOf:CAPEC ID:212::NATURE:PeerOf:CAPEC ID:124::NATURE:PeerOf:CAPEC ID:180::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey target application and relevant OS shared code libraries] Adversary identifies vulnerable transient instruction sets and the code/function calls to trigger them as well as instruction sets or code fragments (gadgets) to perform attack.:TECHNIQUE:Utilize Disassembler and Debugger tools to examine and trace instruction set execution of source code and shared code libraries on a system.::STEP:2:PHASE:Explore:DESCRIPTION:[Explore cache and identify impacts] Utilize tools to understand the impact of transient instruction execution upon address spaces and CPU operations.:TECHNIQUE:Run OS or application specific tools that examine the contents of cache.::STEP:1:PHASE:Experiment:DESCRIPTION:[Cause conditions for identified transient instruction set execution] Adversary ensures that specific code/instructions of the target process are executed by CPU, so desired transient instructions are executed.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause specific secret data to be cached from restricted address space] Executed instruction sets (gadgets) in target address space, initially executed via adversary-chosen transient instructions sets, establish covert channel and transfer secret data across this channel to cache.:TECHNIQUE:Prediction-based - adversary trains CPU to incorrectly predict/speculate conditions for instruction execution to be true, hence executing adversary-chosen transient instructions. These prediction-based methods include: Pattern History Table (PHT)/Input Validation Bypass, Branch Target Buffer (BTB)/Branch Target Injection, Return Stack Buffer (RSB)/Return Address Injection, and Store To Load (STL)/Speculative Store Bypass.:TECHNIQUE:Exception/Fault-based - adversary has CPU execute transient instructions that raise an exception allowing inaccessible memory space to be accessed via out-of-order execution. These exception/fault-based methods include: Supervisor-only Bypass, Virtual Translation Bypass, System Register Bypass, FPU Register Bypass, Read-only Bypass, Protection Key Bypass, and Bounds Check Bypass.::STEP:1:PHASE:Exploit:DESCRIPTION:[Perform covert channel attack to obtain/access secret data] Adversary process code removes instructions/data from shared cache set, waits for target process to reinsert them back into cache, to identify location of secret data via a timing method. Adversary continuously repeat this process to identify and access entirety of targeted secret data.:TECHNIQUE:Flush+Reload - adversary frequently flushes targeted memory cache line using a dedicated machine flush instruction, and uses another process to measure time taken for CPU to load victim secret data.:TECHNIQUE:Evict+Time - adversary causes victim to load target set into cache and measures time for victim process to load this data, setting a baseline. Adversary evicts a specified cache line and causes victim process to execute again, and measures any change in execution time, to determine if cache line was accessed.:TECHNIQUE:Prime+Probe - adversary primes cache by filling cache line(s) or set(s) with data, after some time victim process evicts this adversary data to replace it with secret data. The adversary then probes/accesses all the previously accessed cache lines detecting cache misses, which determine that their attacker data has been evicted and replaced with secret data from victim process.::","::The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU.::","::SKILL:Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations.:LEVEL:High::SKILL:Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage.:LEVEL:High::","::C2C mechanism or direct access to victim system, capable of dropping malicious program and collecting covert channel attack data.::Malicious program capable of triggering execution of transient instructions or vulnerable instruction sequences of victim program and performing a covert channel attack to gather data from victim process memory space. Ultimately, the speed with which an attacker discovers a secret is directly proportional to the computational resources of the victim machine.::","::File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution::","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::","::Implementation: DAWG (Dynamically Allocated Way Guard) - processor cache properly divided between different programs/processes that don't share resources::Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables::Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution::Configuration: Disable SharedArrayBuffer for Web Browsers::Configuration: Disable Copy-on-Write between Cloud VMs::Configuration: Privilege Checks on Cache Flush Instructions::Implementation: Non-inclusive Cache Memories to prevent Flush+Reload Attacks::","::A web browser with user-privileges executes JavaScript code imbedded within a malicious website. The system does not disable shared buffers for the web browser and there is no restriction or check upon user-process execution of flush or evict instructions. The Javascript code executes vulnerable transient instructions upon system to cause microarchitectural changes that establish covert channel and transfer sensitive/secret data into shared cache from address space of either kernel, web browser or another executing process on the system.::","::1037::1303::1264::","","",
664,"Server Side Request Forgery",Standard,Stable,"An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the serverâ€™s internal network, or to external third parties. If successful, the adversaryâ€™s request will be made with the serverâ€™s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the serverâ€™s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.","",High,High,"::NATURE:ChildOf:CAPEC ID:115::","::STEP:1:PHASE:Explore:DESCRIPTION:[Find target application] Find target web application that accepts a user input and retrieves data from the server::STEP:2:PHASE:Experiment:DESCRIPTION:[Examine existing application requests] Examine HTTP/GET requests to view the URL query format. Adversaries test to see if this type of attack is possible through weaknesses in an application's protection to Server Side Request Forgery:TECHNIQUE:Attempt manipulating the URL to retrieve an error response/code from the server to determine if URL/request validation is done.:TECHNIQUE:Use a list of XSS probe strings to specify as parameters to known URLs. If possible, use probe strings with unique identifiers.:TECHNIQUE:Create a GET request with a common server file path such as /etc/passwd as a parameter and examine output.::STEP:3:PHASE:Exploit:DESCRIPTION:[Malicious request] Adversary crafts a malicious URL request that assumes the privilege level of the server to query internal or external network services and sends the request to the application::","::Server must be running a web application that processes HTTP requests.::","::SKILL:The adversary will have to detect the vulnerability through an intermediary service or specify maliciously crafted URLs and analyze the server response.:LEVEL:Medium::SKILL:The adversary will be required to access internal resources, extract information, or leverage the services running on the server to perform unauthorized actions such as traversing the local network or routing a reflected TCP DDoS through them.:LEVEL:High::","::[None] No specialized resources are required to execute this type of attack.::","","::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption::","::Handling incoming requests securely is the first line of action to mitigate this vulnerability. This can be done through URL validation.::Further down the process flow, examining the response and verifying that it is as expected before sending would be another way to secure the server.::Allowlist the DNS name or IP address of every service the web application is required to access is another effective security measure. This ensures the server cannot make external requests to arbitrary services.::Requiring authentication for local services adds another layer of security between the adversary and internal services running on the server. By enforcing local authentication, an adversary will not gain access to all internal services only with access to the server.::Enforce the usage of relevant URL schemas. By limiting requests be made only through HTTP or HTTPS, for example, attacks made through insecure schemas such as file://, ftp://, etc. can be prevented.::","::An e-commerce website allows a customer to filter results by specific categories. When the customer selects the category of choice, the web shop queries a back-end service to retrieve the requested products. The request may look something like: POST /product/category HTTP/1.0 Content-Type: application/x-www-form-urlencoded Content-Length: 200 vulnerableService=http://vulnerableshop.net:8080/product/category/check%3FcategoryName%3DsomeCategory A malicious user can modify the request URL to look like this instead: POST /product/category HTTP/1.0 Content-Type: application/x-www-form-urlencoded Content-Length: 200 vulnerableService=http://localhost/server-status or vulnerableService = file:///etc/passwd or vulnerableService=dict://localhost:12345/info If the exploit is successful, the server may return the data requested by the adversary root:!:0:0::/:/usr/bin/ksh daemon:!:1:1::/etc: bin:!:2:2::/bin: sys:!:3:3::/usr/sys: adm:!:4:4::/var/adm: uucp:!:5:5::/usr/lib/uucp: guest:!:100:100::/home/guest: nobody:!:4294967294:4294967294::/: lpd:!:9:4294967294::/: lp:*:11:11::/var/spool/lp:/bin/false invscout:*:200:1::/var/adm/invscout:/usr/bin/ksh nuucp:*:6:5:uucp login user:/var/spool/uucppublic:/usr/sbin/uucp/uucico paul:!:201:1::/home/paul:/usr/bin/ksh jdoe:*:202:1:My name:/home/myname:/usr/bin/ksh::The CallStranger attack is an observed example of SSRF. It specifically targets the UPnP (Universal Plug and Play) protocol used by various network devices and gaming consoles. To execute the attack, an adversary performs a scan of the LAN to discover UPnP enabled devices, and subsequently a list of UPnP services they use. Once the UPnP service endpoints are listed, a vulnerability in the UPnP protocol is used to send these endpoints as encrypted to a verification server via the UPnP Callback method. Because the encryption is done on the client side, the server returns an encrypted list of services which is decrypted on the client side. The adversary then has a list of services running the vulnerable UPnP protocol, which the adversary can leverage to make spoofed requests. [REF-646]::","::918::20::","","",
665,"Exploitation of Thunderbolt Protection Flaws",Detailed,Stable,"An adversary leverages a firmware weakness within the Thunderbolt protocol, on a computing device to manipulate Thunderbolt controller firmware in order to exploit vulnerabilities in the implementation of authorization and verification schemes within Thunderbolt protection mechanisms. Upon gaining physical access to a target device, the adversary conducts high-level firmware manipulation of the victim Thunderbolt controller SPI (Serial Peripheral Interface) flash, through the use of a SPI Programing device and an external Thunderbolt device, typically as the target device is booting up. If successful, this allows the adversary to modify memory, subvert authentication mechanisms, spoof identities and content, and extract data and memory from the target device. Currently 7 major vulnerabilities exist within Thunderbolt protocol with 9 attack vectors as noted in the Execution Flow.","",Low,Very High,"::NATURE:ChildOf:CAPEC ID:276::NATURE:CanFollow:CAPEC ID:390::NATURE:PeerOf:CAPEC ID:458::NATURE:PeerOf:CAPEC ID:148::NATURE:PeerOf:CAPEC ID:151::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey physical victim environment and potential Thunderbolt system targets] The adversary monitors the target's physical environment to identify systems with Thunderbolt interfaces, identify potential weaknesses in physical security in addition to periods of nonattendance by the victim over their Thunderbolt interface equipped devices, and when the devices are in locked or sleep state.::STEP:2:PHASE:Explore:DESCRIPTION:[Evaluate the target system and its Thunderbolt interface] The adversary determines the device's operating system, Thunderbolt interface version, and any implemented Thunderbolt protections to plan the attack.::STEP:1:PHASE:Experiment:DESCRIPTION:[Obtain and/or clone firmware image] The adversary physically manipulates Thunderbolt enabled devices to acquire the firmware image from the target and/or adversary Thunderbolt host controller's SPI (Serial Peripheral Interface) flash.:TECHNIQUE:Disassemble victim and/or adversary device enclosure with basic tools to gain access to Thunderbolt controller SPI flash by connecting adversary SPI programmer.:TECHNIQUE:Adversary connects SPI programmer to adversary-controlled Thunderbolt enabled device to obtain/clone victim thunderbolt controller firmware image through tools/scripts.:TECHNIQUE:Clone firmware image with SPI programmer and tools/scripts on adversary-controlled device.::STEP:2:PHASE:Experiment:DESCRIPTION:[Parse and locate relevant firmware data structures and information based upon Thunderbolt controller model, firmware version, and other information] The acquired victim and/or adversary firmware image is parsed for specific data and other relevant identifiers required for exploitation, based upon the victim device information and firmware version.:TECHNIQUE:Utilize pre-crafted tools/scripts to parse and locate desired firmware data and modify it.:TECHNIQUE:Locate DROM (Device Read Only Memory) data structure section and calculate/determine appropriate offset to replicate victim device UUID.:TECHNIQUE:Locate ACL (Access Control List) data structure and calculate/determine appropriate offsets to identify victim device UUID.:TECHNIQUE:Locate data structure containing challenge-response key information between appropriate offsets.::STEP:3:PHASE:Experiment:DESCRIPTION:[Disable Thunderbolt security and prevent future Thunderbolt security modifications (if necessary)] The adversary overrides the target device's Thunderbolt Security Level to None (SL0) and/or enables block protections upon the SPI flash to prevent the ability for the victim to perform and/or recognize future Thunderbolt security modifications as well as update the Thunderbolt firmware.:TECHNIQUE:The adversary-controlled Thunderbolt device, connected to SPI programmer and victim device via Thunderbolt ports, is utilized to execute commands within tools/scripts to disable SPI flash protections, modify Thunderbolt Security Level, and enable malicious SPI flash protections.::STEP:4:PHASE:Experiment:DESCRIPTION:[Modify/replace victim Thunderbolt firmware image] The modified victim and/or adversary thunderbolt firmware image is written to attacker SPI flash.::STEP:1:PHASE:Exploit:DESCRIPTION:[Connect adversary-controlled thunderbolt enabled device to victim device and verify successful execution of malicious actions] The adversary needs to determine if their exploitation of selected vulnerabilities had the intended effects upon victim device.:TECHNIQUE:Observe victim device identify adversary device as the victim device and enables PCIe tunneling.:TECHNIQUE:Resume victim device from sleep, connect adversary-controlled device and observe security is disabled and Thunderbolt connectivity is restored with PCIe tunneling being enabled.:TECHNIQUE:Observe that in UEFI or Thunderbolt Management Tool/UI that the Security Level does not match adversary modified Security Level of None (SL0):TECHNIQUE:Observe after installation of Firmware update that within Thunderbolt Management UI the NVM version is unchanged/same prior to the prompt of successful Firmware update/installation.::STEP:2:PHASE:Exploit:DESCRIPTION:[Exfiltration of desired data from victim device to adversary device] Utilize PCIe tunneling to transfer desired data and information from victim device across Thunderbolt connection.::","::The adversary needs at least a few minutes of physical access to a system with an open Thunderbolt port, version 3 or lower, and an external thunderbolt device controlled by the adversary with maliciously crafted software and firmware, via an SPI Programming device, to exploit weaknesses in security protections.::","::SKILL:Detailed knowledge on various system motherboards, PCI Express Domain, SPI, and Thunderbolt Protocol in order to interface with internal system components via external devices.:LEVEL:High::SKILL:Detailed knowledge on OS/Kernel memory address space, Direct Memory Access (DMA) mapping, Input-Output Memory Management Units (IOMMUs), and vendor memory protections for data leakage.:LEVEL:High::SKILL:Detailed knowledge on scripting and SPI programming in order to configure and modify Thunderbolt controller firmware and software configurations.:LEVEL:High::","::SPI Programming device capable of modifying/configuring or replacing the firmware of Thunderbolt device stored on SPI Flash of target Thunderbolt controller, as well as modification/spoofing of adversary-controlled Thunderbolt controller.::Precrafted scripts/tools capable of implementing the modification and replacement of Thunderbolt Firmware.::Thunderbolt-enabled computing device capable of interfacing with target Thunderbolt device and extracting/dumping data and memory contents of target device.::","::Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.::","::SCOPE:Access Control:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::","::Implementation: Kernel Direct Memory Access Protection::Configuration: Enable UEFI option USB Passthrough mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface::Configuration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface::Configuration: Enable UEFI option Mixed USB/DisplayPort mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface with support for DP mode::Configuration: Set Security Level to SL3 for Thunderbolt 2 system port::Configuration: Disable PCIe tunneling to set Security Level to SL3::Configuration: Disable Boot Camp upon MacOS systems::","::An adversary steals a password protected laptop that contains a Thunderbolt 3 enabled port, from a work environment. The adversary uses a screw driver to remove the back panel of the laptop and connects a SPI Programming device to the Thunderbolt Host Controller SPI Flash of the stolen victim device to interface with it on the adversary's own Thunderbolt enabled device via Thunderbolt cables. The SPI Programming device is utilized to execute scripts/tools from the adversary's own system to copy, parse, and modify the victim's Thunderbolt firmware stored on SPI Flash. The device UUID value is obtained, by computing the appropriate offset based upon Thunderbolt firmware version and the OS of victim device, from the DROM section of victim Thunderbolt host controller firmware image. The firmware image is written to adversary Thunderbolt host controller SPI flash to clone and spoof victim device identity. The adversary reboots the victim device, with the victim device identifying the Thunderbolt connection of the adversary's Thunderbolt device as itself and enables PCIe tunneling. The adversary finally transfers the hard drive and memory contents of victim device across Thunderbolt connection.::","::345::353::288::1188::862::","TAXONOMY NAME:ATTACK:ENTRY ID:1211:ENTRY NAME:Exploitation for Defensive Evasion::::TAXONOMY NAME:ATTACK:ENTRY ID:1542.002:ENTRY NAME:Pre-OS Boot: Component Firmware::::TAXONOMY NAME:ATTACK:ENTRY ID:1556:ENTRY NAME:Modify Authentication Process::","",
666,"BlueSmacking",Standard,Draft,"An adversary uses Bluetooth flooding to transfer large packets to Bluetooth enabled devices over the L2CAP protocol with the goal of creating a DoS. This attack must be carried out within close proximity to a Bluetooth enabled device.","",Medium,Medium,"::NATURE:ChildOf:CAPEC ID:125::","::STEP:1:PHASE:Explore:DESCRIPTION:[Scan for Bluetooth Enabled Devices] Using BlueZ along with an antenna, an adversary searches for devices with Bluetooth on.:TECHNIQUE:Note the MAC address of the device you want to attack.::STEP:2:PHASE:Experiment:DESCRIPTION:[Change L2CAP Packet Length] The adversary must change the L2CAP packet length to create packets that will overwhelm a Bluetooth enabled device.:TECHNIQUE:An adversary downloads and installs BlueZ, the standard Bluetooth utility package for Linux.::STEP:3:PHASE:Exploit:DESCRIPTION:[Flood] An adversary sends the packets to the target device, and floods it until performance is degraded.::","::The system/application has Bluetooth enabled.::","::SKILL:An adversary only needs a Linux machine along with a Bluetooth adapter, which is extremely common.:LEVEL:Low::","","::Performance is degraded or halted by incoming L2CAP packets.::","::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption::","::Disable Bluetooth when not being used.::When using Bluetooth, set it to hidden or non-discoverable mode.::","","::404::","TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service: Direct Network Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1499.001:ENTRY NAME:Endpoint Denial of Service: OS Exhaustion Flood::","",
667,"Bluetooth Impersonation AttackS (BIAS)",Detailed,Draft,"An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the targetâ€™s capabilities.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:616::","::STEP:1:PHASE:Explore:DESCRIPTION:[Find disguise and target] The adversary starts the Bluetooth service on the attacking device and searches for nearby listening devices.:TECHNIQUE:Knowledge of a trusted MAC address.:TECHNIQUE:Scanning for devices other than the target that may be trusted.::STEP:2:PHASE:Experiment:DESCRIPTION:[Disguise] Using the MAC address of the device the adversary wants to impersonate, they may use a tool such as spooftooth or macchanger to spoof their Bluetooth address and attempt to authenticate with the target.::STEP:3:PHASE:Exploit:DESCRIPTION:[Use device capabilities to accomplish goal] Finally, if authenticated successfully the adversary can perform tasks/information gathering dependent on the target's capabilities and connections.::","::Knowledge of a target device's list of trusted connections.::","::SKILL:Adversaries must be capable of using command line Linux tools.:LEVEL:Low::SKILL:Adversaries must be in close proximity to Bluetooth devices.:LEVEL:Low::","","","::SCOPE:Integrity:NOTE:An adversary will be impersonating another Bluetooth device, and may gain access to information pertaining to that user along with the ability to manipulate other information.::SCOPE:Confidentiality:NOTE:An adversary will have unauthorized access to information.::","::Disable Bluetooth in public places.::Verify incoming Bluetooth connections; do not automatically trust.::Change default PIN passwords and always use one when connecting.::","","::290::","","",
668,"Key Negotiation of Bluetooth Attack (KNOB)",Standard,Draft,"An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.","",Low,High,"::NATURE:ChildOf:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:148::","::STEP:1:PHASE:Explore:DESCRIPTION:[Discovery] Using an established Person in the Middle setup, search for Bluetooth devices beginning the authentication process.:TECHNIQUE:Use packet capture tools.::STEP:2:PHASE:Experiment:DESCRIPTION:[Change the entropy bits] Upon recieving the initial key negotiation packet from the master, the adversary modifies the entropy bits requested to 1 to allow for easy decryption before it is forwarded.::STEP:3:PHASE:Exploit:DESCRIPTION:[Capture and decrypt data] Once the entropy of encryption is known, the adversary can capture data and then decrypt on their device.::","::Person in the Middle network setup.::","::SKILL:Ability to modify packets.:LEVEL:Medium::","::Bluetooth adapter, packet capturing capabilities.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.::","::Given users Alice, Bob and Charlie (Charlie being the attacker), Alice and Bob begin to agree on an encryption key when connecting. While Alice sends a message to Bob that an encryption key with 16 bytes of entropy should be used, Charlie changes this to 1 and forwards the request to Bob and continues forwarding these packets until authentication is successful.::","::425::285::693::","TAXONOMY NAME:ATTACK:ENTRY ID:1565.002:ENTRY NAME:Data Manipulation: Transmitted Data Manipulation::","",
669,"Alteration of a Software Update",Standard,Draft,"An adversary with access to an organizationâ€™s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the softwareâ€™s normal functionality.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:673::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify software with frequent updates] The adversary must first identify a target software that has updates at least with some frequency, enough that there is am update infrastructure.::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain access to udpate infrastructure] The adversary must then gain access to the organization's software update infrastructure. This can either be done by gaining remote access from outside the organization, or by having a malicious actor inside the organization gain access. It is often easier if someone within the organization gains access.::STEP:3:PHASE:Exploit:DESCRIPTION:[Alter the software update] Through access to the software update infrastructure, an adversary will alter the software update by injecting malware into the content of an outgoing update.::","::An adversary would need to have penetrated an organizationâ€™s software update infrastructure including gaining access to components supporting the configuration management of software versions and updates related to the software maintenance of customer systems.::","::SKILL:Skills required include the ability to infiltrate the organizationâ€™s software update infrastructure either from the Internet or from within the organization, including subcontractors, and be able to change software being delivered to customer/user systems in an undetected manner.:LEVEL:High::","","","::SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.::Require elevated privileges for distribution of software and software updates.::","::A subcontractor to a software developer injects maliciously altered software updates into an automated update process that distributes to government and commercial customers software containing a hidden backdoor.::","","TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::","",
67,"String Format Overflow in syslog()",Detailed,Draft,"This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:135::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. In this attack, adversaries look for applications that use syslog() incorrectly.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.:TECHNIQUE:Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.:TECHNIQUE:The formatting characters %s and %d are useful for observing memory and trying to print memory addresses. If an adversary has access to the log being written to they can observer this output and use it to help craft their attack.:TECHNIQUE:The formatting character %n is useful for adding extra data onto the buffer.::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary supplies the program with the crafted format string injection, causing a buffer.::","::The Syslog function is used without specifying a format string argument, allowing user input to be placed direct into the function call as a format string.::","","","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog(): syslog(LOG_ERR, %s, cmdBuf); The following code shows a vulnerable usage of Syslog(): syslog(LOG_ERR, cmdBuf); // the buffer cmdBuff is taking user supplied data.::","::Format string vulnerability in TraceEvent function for ntop before 2.1 allows remote adversaries to execute arbitrary code by causing format strings to be injected into calls to the syslog function, via (1) an HTTP GET request, (2) a user name in HTTP authentication, or (3) a password in HTTP authentication. See also: CVE-2002-0412::","::120::134::74::20::680::697::","TAXONOMY NAME:WASC:ENTRY ID:06:ENTRY NAME:Format String::","",
670,"Software Development Tools Maliciously Altered",Detailed,Draft,"An adversary with the ability to alter tools used in a development environment causes software to be developed with maliciously modified tools. Such tools include requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools. The adversary then carries out malicious acts once the software is deployed including malware infection of other systems to support further compromises.","",Low,High,"::NATURE:ChildOf:CAPEC ID:444::NATURE:CanPrecede:CAPEC ID:669::","","::An adversary would need to have access to a targeted developerâ€™s development environment and in particular to tools used to design, create, test and manage software, where the adversary could ensure malicious code is included in software packages built through alteration or substitution of tools in the environment used in the development of software.::","::SKILL:Ability to leverage common delivery mechanisms (e.g., email attachments, removable media) to infiltrate a development environment to gain access to software development tools for the purpose of malware insertion into an existing tool or replacement of an existing tool with a maliciously altered copy.:LEVEL:High::","","","::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Read Data::","::Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.::Avoid giving elevated privileges to developers.::","::An adversary with access to software build tools inside an Integrated Development Environment IDE alters a script used for downloading dependencies from a dependent code repository where the script has been changed to include malicious code implanted in the repository by the adversary.::","","TAXONOMY NAME:ATTACK:ENTRY ID:1127:ENTRY NAME:Trusted Developer Utilities Proxy Execution::::TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise: Compromise Software Dependencies and Development Tools::","",
671,"Requirements for ASIC Functionality Maliciously Altered",Detailed,Draft,"An adversary with access to functional requirements for an application specific integrated circuit (ASIC), a chip designed/customized for a singular particular use, maliciously alters requirements derived from originating capability needs. In the chip manufacturing process, requirements drive the chip design which, when the chip is fully manufactured, could result in an ASIC which may not meet the userâ€™s needs, contain malicious functionality, or exhibit other anomalous behaviors thereby affecting the intended use of the ASIC.","",Low,High,"::NATURE:ChildOf:CAPEC ID:447::","","::An adversary would need to have access to a foundryâ€™s or chip makerâ€™s requirements management system that stores customer requirements for ASICs, requirements upon which the design of the ASIC is based.::","::SKILL:An adversary would need experience in designing chips based on functional requirements in order to manipulate requirements in such a way that deviations would not be detected in subsequent stages of ASIC manufacture and where intended malicious functionality would be available to the adversary once integrated into a system and fielded.:LEVEL:High::","","","::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic::","::Utilize DMEAâ€™s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for hardware requirements and design.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::","::An adversary with access to ASIC functionality requirements for various customers, targets a particular customerâ€™s ordered lot of ASICs by altering its functional requirements such that the ASIC design will result in a manufactured chip that does not meet the customerâ€™s capability needs.::","","TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::","",
672,"Malicious Code Implanted During Chip Programming",Detailed,Draft,"During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chipâ€™s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.","",Low,High,"::NATURE:ChildOf:CAPEC ID:444::","","::An adversary would need to have access to a foundryâ€™s or chip makerâ€™s development/production environment where programs for specific chips are developed, managed and uploaded into targeted chips prior to distribution or sale.::","::SKILL:An adversary needs to be skilled in microprogramming, manipulation of configuration management systems, and in the operation of tools used for the uploading of programs into chips during manufacture. Uploading can be for individual chips or performed on a large scale basis.:LEVEL:Medium::","","","::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic::","::Utilize DMEAâ€™s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::","::Following a chipâ€™s production process steps of test and verification and validation of chip circuitry, an adversary involved in the generation of microcode defining the chipâ€™s function(s) inserts a malicious instruction that will become part of the chipâ€™s program. When integrated into a system, the chip will produce an effect intended by the adversary.::","","TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::","",
673,"Developer Signing Maliciously Altered Software",Detailed,Draft,"Software produced by a reputable developer is clandestinely infected with malicious code and then digitally signed by the unsuspecting developer, where the software has been altered via a compromised software development or build process prior to being signed. The receiver or user of the software has no reason to believe that it is anything but legitimate and proceeds to deploy it to organizational systems. This attack differs from CAPEC-206, since the developer is inadvertently signing malicious code they believe to be legitimate and which they are unware of any malicious modifications.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:444::","","::An adversary would need to have access to a targeted developerâ€™s software development environment, including to their software build processes, where the adversary could ensure code maliciously tainted prior to a build process is included in software packages built.::","::SKILL:The adversary must have the skills to infiltrate a developerâ€™s software development/build environment and to implant malicious code in developmental software code, a build server, or a software repository containing dependency code, which would be referenced to be included during the software build process.:LEVEL:High::","","","::SCOPE:Integrity:SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Modify Data::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Execute Unauthorized Commands::","::Have a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools.::Employ intrusion detection and malware detection capabilities on IDE systems where feasible.::","::An adversary who has infiltrated an organizationâ€™s build environment maliciously alters code intended to be included in a productâ€™s software build via software dependency inclusion, part of the software build process. When the software product has been built, the developer electronically signs the finished product using their signing key. The recipient of the software product, an end user/customer, believes the software to reflect the developerâ€™s intent with respect to functionality unaware of the adversaryâ€™s malicious intent harbored within.::","","TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise: Compromise Software Supply Chain::","",
674,"Design for FPGA Maliciously Altered",Detailed,Stable,"An adversary alters the functionality of a field-programmable gate array (FPGA) by causing an FPGA configuration memory chip reload in order to introduce a malicious function that could result in the FPGA performing or enabling malicious functions on a host system. Prior to the memory chip reload, the adversary alters the program for the FPGA by adding a function to impact system operation.","",Low,High,"::NATURE:ChildOf:CAPEC ID:447::","","::An adversary would need to have access to FPGA programming/configuration-related systems in a chip makerâ€™s development environment where FPGAs can be initially configured prior to delivery to a customer or have access to such systems in a customer facility where end-user FPGA configuration/reconfiguration can be performed.::","::SKILL:An adversary would need to be skilled in FPGA programming in order to create/manipulate configurations in such a way that when loaded into an FPGA, the end user would be able to observe through testing all user-defined required functions but would be unaware of any additional functions the adversary may have introduced.:LEVEL:High::","","","::SCOPE:Integrity:TECHNICAL IMPACT:Alter Execution Logic::","::Utilize DMEAâ€™s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.::Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips.::Require that provenance of COTS microelectronic components be known whenever procured.::Conduct detailed vendor assessment before acquiring COTS hardware.::","::An adversary with access and the ability to alter the configuration/programming of FPGAs in organizational systems, introduces a trojan backdoor that can be used to alter the behavior of the original system resulting in, for example, compromise of confidentiality of data being processed.::","","TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise: Compromise Hardware Supply Chain::","",
675,"Retrieve Data from Decommissioned Devices",Standard,Stable,"An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organizationâ€™s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.","",Medium,Medium,"::NATURE:ChildOf:CAPEC ID:116::NATURE:CanPrecede:CAPEC ID:37::","","::An adversary needs to have access to electronic data processing equipment being recycled or disposed of (e.g., laptops, servers) at a collection location and the ability to take control of it for the purpose of exploiting its content.::","::SKILL:An adversary may need the ability to mount printed circuit boards and target individual chips for exploitation.:LEVEL:High::SKILL:An adversary needs the technical skills required to extract solid state drives, hard disk drives, and other storage media to host on a compatible system or harness to gain access to digital content.:LEVEL:Medium::","","","::SCOPE:Accountability:TECHNICAL IMPACT:Bypass Protection Mechanism::","::Backup device data before erasure to retain intellectual property and inside knowledge.::Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.::Use a secure erase software.::Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.::Physically destroy memory and SIM cards for mobile devices not intended to be reused.::Ensure that the user account has been terminated or switched to a new device before destroying.::","::A company is contracted by an organization to provide data destruction services for solid state and hard disk drives being discarded. Prior to destruction, an adversary within the contracted company copies data from select devices, violating the data confidentiality requirements of the submitting organization.::","::1266::","TAXONOMY NAME:ATTACK:ENTRY ID:1052:ENTRY NAME:Exfiltration Over Physical Medium::","",
676,"NoSQL Injection",Standard,Stable,"An adversary targets software that constructs NoSQL statements based on user input or with parameters vulnerable to operator replacement in order to achieve a variety of technical impacts such as escalating privileges, bypassing authentication, and/or executing code.","",High,High,"::NATURE:ChildOf:CAPEC ID:248::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey target application] Due to the number of NoSQL databases available and the numerous language/API combinations of each, the adversary must first survey the target application to learn what technologies are being leveraged and how they interact with user-driven data.:TECHNIQUE:Determine the technology stack leveraged by the target application, such as the application server, drivers, frameworks, APIs, and databases being utilized.:TECHNIQUE:Identify areas of the application that interact with user input and may be involved with NoSQL queries.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify user-controllable input susceptible to injection] After identifying the technology stack being used and where user-driven input is leveraged, determine the user-controllable input susceptible to injection such as authentication or search forms. For each user-controllable input that the adversary suspects is vulnerable to NoSQL injection, attempt to inject characters or keywords that have special meaning in the given NoSQL database or language (e.g., $ne for MongoDB or $exists for PHP/MongoDB), or JavaScript that can be executed within the application. The goal is to create a NoSQL query with an invalid syntax.:TECHNIQUE:Use web browser to inject input through text fields or through HTTP GET parameters.:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.:TECHNIQUE:Use network-level packet injection tools such as netcat to inject input:TECHNIQUE:Use modified client (modified by reverse engineering) to inject input.::STEP:3:PHASE:Experiment:DESCRIPTION:[Experiment with NoSQL Injection vulnerabilities] After determining that a given input is vulnerable to NoSQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, modify/delete information in the database, or execute commands on the server.:TECHNIQUE:Use public resources such as OWASP's Testing for NoSQL Injection [REF-668] or Null Sweep's NoSQL Injection Cheatsheet [REF-669] and try different approaches for adding logic to NoSQL queries.:TECHNIQUE:Iteratively add logic to the NoSQL query and use detailed error messages from the server to debug the query.:TECHNIQUE:Attempt an HTTP Parameter Pollution attack to replace language-specific keywords, such as where within PHP [CAPEC-460].::STEP:4:PHASE:Exploit:DESCRIPTION:[Exploit NoSQL Injection vulnerability] After refining and adding various logic to NoSQL queries, craft and execute the underlying NoSQL query that will be used to attack the target system.:TECHNIQUE:Craft and Execute underlying NoSQL query::","::Awareness of the technology stack being leveraged by the target application.::NoSQL queries used by the application to store, retrieve, or modify data.::User-controllable input that is not properly validated by the application as part of NoSQL queries.::Target potentially susceptible to operator replacement attacks.::","::SKILL:For keyword and JavaScript injection attacks, it is fairly simple for someone with basic NoSQL knowledge to perform NoSQL injection, once the target's technology stack has been determined.:LEVEL:Low::SKILL:For operator replacement attacks, the adversary must also have knowledge of HTTP Parameter Pollution attacks and how to conduct them.:LEVEL:Medium::","::None: No specialized resources are required to execute this type of attack.::","::Too many false or invalid queries to the database, especially those caused by malformed input.::Executed queries or commands that appear to malicious in nature or originating from an untrustworthy source.::","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as relevant NoSQL and JavaScript content. NoSQL-specific keywords, such as $ne, $eq or $gt for MongoDB, must be filtered in addition to characters such as a single-quote(') or semicolons (;) based on the context in which they appear. Validation should also extend to expected types.::If possible, leverage safe APIs (e.g., PyMongo and Flask-PyMongo for Python and MongoDB) for queries as opposed to building queries from strings.::Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.::Use of custom error pages - Adversaries can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::Exercise the principle of Least Privilege with regards to application accounts to minimize damage if a NoSQL injection attack is successful.::If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as mongo-sanitize.::If using PHP with MongoDB, ensure all special query operators (starting with $) use single quotes to prevent operator replacement attacks.::Additional mitigations will depend on the NoSQL database, API, and programming language leveraged by the application.::","::The following examples primarily cite MongoDB, PHP, and NodeJS attacks due to their prominence and popularity. However, please note that these attacks are not exclusive to this NoSQL instance, programming language, or runtime framework. Within NodeJS, Login Bypass attacks are possible via MongoDB if user-input is not properly validated and sanitized [REF-670]. //NodeJS with Express.jsdb.collection('users').find({user: req.query.user,password: req.query.password}); The above code works fine if the user were to submit a query like the following: https://example.org/login?user=patrick&password=1234 But an adversary could submit a malicious query such as the below, which would be interpreted by the code as follows: https://example.org/login?user=patrick&password[$ne]= //NodeJS with Express.jsdb.collection('users').find({user: bob,password: {&ne: }}); This will result in a Login Bypass attack, as the query will succeed for all values where Bob's password is not an empty string.::MongoDB instances are also vulnerable to JavaScript Injection Attacks when user input is not properly validated and sanitized. //PHP with MongoDBdb.collection.find({$where: function() {return (this.username == $username) } } ); If the user properly specifies a username, then this code will execute as intended. However, an adversary can inject JavaScript into the $username variable to achieve a NoSQL Injection attack as follows: //PHP with MongoDBdb.collection.find({$where: function() {return (this.username == 'foo'; sleep(5000) ) } } ); This will result in the server sleeping for 5 seconds if the attack was successful. An adversary could supply a larger value to deny service to the application.::If leveraging PHP with MongoDB, operator replacement attacks are possible if special query operators are not properly addressed. The below example from OWASP's Test for NoSQL Injection displays a simple case of how this could occur.[REF-668] db.myCollection.find({$where: function() {return obj.credits - obj.debits < 0; } } ); Even though the above query does not depend on any user input, it is vulnerable to a NoSQL injection attack via operator replacement on the $where keyword. In this case, the adversary could exploit MongoDB in the following manner: $where: function() { //arbitrary JavaScript here }::","::943::1286::","","",