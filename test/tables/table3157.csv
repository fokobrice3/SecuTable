'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
579,"Replace Winlogon Helper DLL",Detailed,Draft,"Winlogon is a part of Windows that performs logon actions. In Windows systems prior to Windows Vista, a registry key can be modified that causes Winlogon to load a DLL on startup. Adversaries may take advantage of this feature to load adversarial code at startup.","",,,"::NATURE:ChildOf:CAPEC ID:542::","","","","","","","::Changes to registry entries in HKLMSoftwareMicrosoftWindows NTWinlogonNotify that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.::","","::15::","TAXONOMY NAME:ATTACK:ENTRY ID:1547.004:ENTRY NAME:Boot or Logon Autostart Execution: Winlogon helper DLL::","",
58,"Restful Privilege Elevation",Detailed,Draft,"An adversary identifies a Rest HTTP (Get, Put, Delete) style permission method allowing them to perform various malicious actions upon server data due to lack of access control mechanisms implemented within the application service accepting HTTP messages.","",High,High,"::NATURE:ChildOf:CAPEC ID:1::NATURE:ChildOf:CAPEC ID:180::","","::The attacker needs to be able to identify HTTP Get URLs. The Get methods must be set to call applications that perform operations other than get such as update and delete.::","::SKILL:It is relatively straightforward to identify an HTTP Get method that changes state on the server side and executes against an over-privileged system interface:LEVEL:Low::","","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Design: Enforce principle of least privilege::Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side::Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose::","::The HTTP Get method is designed to retrieve resources and not to alter the state of the application or resources on the server side. However, developers can easily code programs that accept a HTTP Get request that do in fact create, update or delete data on the server. Both Flickr (http://www.flickr.com/services/api/flickr.photosets.delete.html) and del.icio.us (http://del.icio.us/api/posts/delete) have implemented delete operations using standard HTTP Get requests. These HTTP Get methods do delete data on the server side, despite being called from Get which is not supposed to alter state.::","::267::269::","","",
580,"System Footprinting",Standard,Stable,"An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.","",Low,Low,"::NATURE:ChildOf:CAPEC ID:169::","","::The adversary must have logical access to the target network and system.::","::SKILL:The adversary needs to know basic linux commands.:LEVEL:Low::","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::","","::204::205::208::","TAXONOMY NAME:ATTACK:ENTRY ID:1082:ENTRY NAME:System Information Discovery::","",
581,"Security Software Footprinting",Detailed,Draft,"Adversaries may attempt to get a listing of security tools that are installed on the system and their configurations. This may include security related system features (such as a built-in firewall or anti-spyware) as well as third-party security software.","",,,"::NATURE:ChildOf:CAPEC ID:580::","","","","","","","::Identify programs that may be used to acquire security tool information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::","","","TAXONOMY NAME:ATTACK:ENTRY ID:1518.001:ENTRY NAME:Software Discovery:Security Software Discovery::","",
582,"Route Disabling",Standard,Draft,"An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an Internet kill switch by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.","",Low,High,"::NATURE:ChildOf:CAPEC ID:607::","","::The adversary requires knowledge of and access to network route.::","","","","::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Disabling a network route denies the availability of a service.::","","","","","",
583,"Disabling Network Hardware",Detailed,Draft,"In this attack pattern, an adversary physically disables networking hardware by powering it down or disconnecting critical equipment. Disabling or shutting off critical system resources prevents them from performing their service as intended, which can have direct and indirect consequences on other systems. This attack pattern is considerably less technical than the selective blocking used in most obstruction attacks.","",,,"::NATURE:ChildOf:CAPEC ID:582::","","::The adversary requires physical access to the targeted communications equipment (networking devices, cables, etc.), which may be spread over a wide area.::","","","","::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Denial of Service::","::Ensure rigorous physical defensive measures to keep the adversary from accessing critical systems..::","","","","",
584,"BGP Route Disabling",Detailed,Draft,"An adversary suppresses the Border Gateway Protocol (BGP) advertisement for a route so as to render the underlying network inaccessible. The BGP protocol helps traffic move throughout the Internet by selecting the most efficient route between Autonomous Systems (AS), or routing domains. BGP is the basis for interdomain routing infrastructure, providing connections between these ASs. By suppressing the intended AS routing advertisements and/or forcing less effective routes for traffic to ASs, the adversary can deny availability for the target network.","",,,"::NATURE:ChildOf:CAPEC ID:582::","","::The adversary must have control of a router that can modify, drop, or introduce spoofed BGP updates.The adversary can convince::","","::BGP Router::","","::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Disabling a network route at the routing infrastructure level denies availability of that route.::","::Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.::Implement Secure BGP (S-BGP protocol), which improves authorization and authentication capabilities based on public-key cryptography.::","::Blackholing: The adversary intentionally references false routing advertisements in order to attract traffic to a particular router so it can be dropped.::","","","",
585,"DNS Domain Seizure",Detailed,Draft,"In this attack pattern, an adversary influences a target's web-hosting company to disable a target domain. The goal is to prevent access to the targeted service provided by that domain. It usually occurs as the result of civil or criminal legal interventions.","",,,"::NATURE:ChildOf:CAPEC ID:582::","","::This attack pattern requires that the adversary has cooperation from the registrar of the target domain.::","","","","::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Disabling a target domain at the infrastructure level denies the availability of its service to the user.::","","::The FBI's seizure of gambling websites, the US DOJ's seizure of child pornography websites, and Microsoft's seizure of all domains owned by the company No-IP in order to disrupt a cyberattack originating from a subset of those domains.::","","","",
586,"Object Injection",Meta,Draft,"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.","",Medium,High,"","","::The target application must unserialize data before validation.::","","","","::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate and exhaust available resources.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:Attackers can modify objects or data that was assumed to be safe from modification.::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Functions that assume information in the deserialized object is valid could be exploited.::","::Implementation: Validate object before deserialization process::Design: Limit which types can be deserialized.::Implementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Use an allowlist of acceptable classes.::Implementation: Keep session state on the server, when possible.::","","::502::","","",
587,"Cross Frame Scripting (XFS)",Detailed,Draft,"This attack pattern combines malicious Javascript and a legitimate webpage loaded into a concealed iframe. The malicious Javascript is then able to interact with a legitimate webpage in a manner that is unknown to the user. This attack usually leverages some element of social engineering in that an attacker must convinces a user to visit a web page that the attacker controls.","",,High,"::NATURE:ChildOf:CAPEC ID:103::","","::The user's browser must have vulnerabilities in its implementation of the same-origin policy. It allows certain data in a loaded page to originate from different servers/domains.::","","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Cross Frame Scripting allows an adversary to steal sensitive data from a legitimate site.::","::Avoid clicking on untrusted links.::Employ techniques such as frame busting, which is a method by which developers aim to prevent their site being loaded within a frame.::","::An adversary-controlled webpage contains malicious Javascript and a concealed iframe containing a legitimate website login (i.e., the concealed iframe would make it appear as though the actual legitimate website was loaded). When the user interacts with the legitimate website in the iframe, the malicious Javascript collects that sensitive information.::","::1021::","TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cross Frame Scripting::","",
588,"DOM-Based XSS",Detailed,Stable,"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:63::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for DOM-based XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. Specific to DOM-based XSS, the adversary is looking for areas where input is being used to directly change the DOM.:TECHNIQUE:Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.:TECHNIQUE:Use a list of HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim. In DOM-based XSS, the malicious script might not even be sent to the server, since the victim's browser will manipulate the DOM itself. This can help avoid serve-side detection mechanisms.:TECHNIQUE:Change a URL parameter to include a malicious script tag.:TECHNIQUE:Add a URL fragment to alter the value of the expected Document object URL.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::","::An application that leverages a client-side web browser with scripting enabled.::An application that manipulates the DOM via client-side scripting.::An application that failS to adequately sanitize or encode untrusted input.::","::SKILL:Requires the ability to write scripts of some complexity and to inject it through user controlled fields in the system.:LEVEL:Medium::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful DOM-based XSS attack can enable an adversary to exfiltrate sensitive information from the application.::SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful DOM-based XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful DOM-based XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful DOM-based XSS attack can allow an adversary to tamper with application data.::","::Use browser technologies that do not allow client-side scripting.::Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.::Ensure that all user-supplied input is validated before use.::","::Consider a web application that enables or disables some of the fields of a form on the page via the use of a mode parameter provided on the query string. http://my.site.com/aform.html?mode=full The application’s client-side code may want to print this mode value to the screen to give the users an understanding of what mode they are in. In this example, JavaScript is used to pull the value from the URL and update the HTML by dynamically manipulating the DOM via a document.write() call. <script>document.write(<p>Mode is: + document.location.href.substring(document.location.href.indexOf('mode=') + 5) + </p>);</script> Notice how the value provided on the URL is used directly with no input validation performed and no output encoding in place. A maliciously crafted URL can thus be formed such that if a victim clicked on the URL, a malicious script would then be executed by the victim’s browser: http://my.site.com/aform.html?mode=<script>alert('hi');</script>::In some DOM-based attacks, the malicious script never gets sent to the web server at all, thus bypassing any server-side protections that might be in place. Consider the previously used web application that displays the mode value. Since the HTML is being generated dynamically through DOM manipulations, a URL fragment (i.e., the part of a URL after the '#' character) can be used. http://my.site.com/aform.html#mode=<script>alert('hi')</script> In this variation of a DOM-based XSS attack, the malicious script will not be sent to the web server, but will instead be managed by the victim's browser and is still available to the client-side script code.::","::79::20::83::","TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Reflected DOM Injection::","",
589,"DNS Blocking",Detailed,Draft,"An adversary intercepts traffic and intentionally drops DNS requests based on content in the request. In this way, the adversary can deny the availability of specific services or content to the user even if the IP address is changed.","",,,"::NATURE:ChildOf:CAPEC ID:603::","","::This attack requires the ability to conduct deep packet inspection with an In-Path device that can drop the targeted traffic and/or connection.::","","","","::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Preventing DNS from resolving a request denies the availability of a target site or service for the user.::","::Hard Coded Alternate DNS server in applications::Avoid dependence on DNS::Include hosts file/IP address in the application.::Ensure best practices with respect to communications channel protections.::Use a .onion domain with Tor support::","::Full URL Based Filtering: Filtering based upon the requested URL. URL String-based Filtering: Filtering based upon the use of particular strings included in the requested URL.::","::300::","","",
59,"Session Credential Falsification through Prediction",Detailed,Draft,"This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.","",High,High,"::NATURE:ChildOf:CAPEC ID:196::","::STEP:1:PHASE:Explore:DESCRIPTION:[Find Session IDs] The attacker interacts with the target host and finds that session IDs are used to authenticate users.:TECHNIQUE:An attacker makes many anonymous connections and records the session IDs assigned.:TECHNIQUE:An attacker makes authorized connections and records the session tokens or credentials issued.::STEP:2:PHASE:Explore:DESCRIPTION:[Characterize IDs] The attacker studies the characteristics of the session ID (size, format, etc.). As a results the attacker finds that legitimate session IDs are predictable.:TECHNIQUE:Cryptanalysis. The attacker uses cryptanalysis to determine if the session IDs contain any cryptographic protections.:TECHNIQUE:Pattern tests. The attacker looks for patterns (odd/even, repetition, multiples, or other arithmetic relationships) between IDs:TECHNIQUE:Comparison against time. The attacker plots or compares the issued IDs to the time they were issued to check for correlation.::STEP:3:PHASE:Experiment:DESCRIPTION:[Match issued IDs] The attacker brute forces different values of session ID and manages to predict a valid session ID.:TECHNIQUE:The attacker models the session ID algorithm enough to produce a compatible session IDs, or just one match.::STEP:4:PHASE:Exploit:DESCRIPTION:[Use matched Session ID] The attacker uses the falsified session ID to access the target system.:TECHNIQUE:The attacker loads the session ID into their web browser and browses to restricted data or functionality.:TECHNIQUE:The attacker loads the session ID into their network communications and impersonates a legitimate user to gain access to data or functionality.::","::The target host uses session IDs to keep track of the users.::Session IDs are used to control access to resources.::The session IDs used by the target host are predictable. For example, the session IDs are generated using predictable information (e.g., time).::","::SKILL:There are tools to brute force session ID. Those tools require a low level of knowledge.:LEVEL:Low::SKILL:Predicting Session ID may require more computation work which uses advanced analysis such as statistical analysis.:LEVEL:Medium::","","","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Use a strong source of randomness to generate a session ID.::Use adequate length session IDs::Do not use information available to the user in order to generate session ID (e.g., time).::Ideas for creating random numbers are offered by Eastlake [RFC1750]::Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.::","::Jetty before 4.2.27, 5.1 before 5.1.12, 6.0 before 6.0.2, and 6.1 before 6.1.0pre3 generates predictable session identifiers using java.util.random, which makes it easier for remote attackers to guess a session identifier through brute force attacks, bypass authentication requirements, and possibly conduct cross-site request forgery attacks. See also: CVE-2006-6969::mod_usertrack in Apache 1.3.11 through 1.3.20 generates session ID's using predictable information including host IP address, system time and server process ID, which allows local users to obtain session ID's and bypass authentication when these session ID's are used for authentication. See also: CVE-2001-1534::","::290::330::331::346::488::539::200::6::285::384::693::","TAXONOMY NAME:WASC:ENTRY ID:18:ENTRY NAME:Credential/Session Prediction::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Session Prediction::","",
590,"IP Address Blocking",Detailed,Draft,"An adversary performing this type of attack drops packets destined for a target IP address. The aim is to prevent access to the service hosted at the target IP address.","",Low,High,"::NATURE:ChildOf:CAPEC ID:603::","","::This attack requires the ability to conduct deep packet inspection with an In-Path device that can drop the targeted traffic and/or connection.::","","","","::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Blocking packets intended for a target IP address denies its availability to the user.::","::Have a large pool of backup IPs built into the application and support proxy capability in the application.::","::Consider situations of information censorship for political purposes, where regimes that prevent access to specific web services.::","::300::","","",
591,"Reflected XSS",Detailed,Stable,"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is reflected off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:63::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for reflected XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.:TECHNIQUE:Use a list of HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Change a URL parameter to include a malicious script tag.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::","::An application that leverages a client-side web browser with scripting enabled.::An application that fail to adequately sanitize or encode untrusted input.::","::SKILL:Requires the ability to write malicious scripts and embed them into HTTP requests.:LEVEL:Medium::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful Reflected XSS attack can enable an adversary to exfiltrate sensitive information from the application.::SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful Reflected XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful Reflected attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful Reflected attack can allow an adversary to tamper with application data.::","::Use browser technologies that do not allow client-side scripting.::Utilize strict type, character, and encoding enforcement.::Ensure that all user-supplied input is validated before use.::","::Consider a web application that enables or disables some of the fields of a form on the page via the use of a mode parameter provided on the query string. http://my.site.com/aform.html?mode=full The application’s server-side code may want to display this mode value in the HTML page being created to give the users an understanding of what mode they are in. In this example, PHP is used to pull the value from the URL and generate the desired HTML. <?phpecho 'Mode is: ' . $_GET[mode];?> Notice how the value provided on the URL is used directly with no input validation performed and no output encoding in place. A maliciously crafted URL can thus be formed such that if a victim clicked on the URL, a malicious script would then be executed by the victim’s browser: http://my.site.com/aform.html?mode=<script>alert('hi');</script>::Reflected XSS attacks can take advantage of HTTP headers to compromise a victim. For example, assume a vulnerable web application called ‘mysite’ dynamically generates a link using an HTTP header such as HTTP_REFERER. Code somewhere in the application could look like: <?phpecho <a href=$_SERVER['HTTP_REFERER']>Test URL</a>?> The HTTP_REFERER header is populated with the URI that linked to the currently executing page. A web site can be created and hosted by an adversary that takes advantage of this by adding a reference to the vulnerable web application. By tricking a victim into clicking a link that executes the attacker’s web page, such as: http://attackerswebsite.com?<script>malicious content</script> The vulnerable web application ('mysite') is now called via the attacker's web site, initiated by the victim's web browser. The HTTP_REFERER header will contain a malicious script, which is embedded into the page by the vulnerable application and served to the victim. The victim’s web browser then executes the injected script, thus compromising the victim’s machine.::","::79::","","",
592,"Stored XSS",Detailed,Stable,"An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently stored within the data storage of a vulnerable web application as valid input.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:63::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for stored user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application. The adversary is looking for areas where user input is stored, such as user profiles, shopping carts, file managers, forums, blogs, and logs.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for stored XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.:TECHNIQUE:Use a list of XSS probe strings to submit script in input fields that could be stored by the web application. If possible, the probe strings contain a unique identifier so they can be queried for after submitting to see if they are stored.:TECHNIQUE:Use a list of HTML special characters to submit in input fields that could be stored by the web application and check if they were properly encoded, replaced, or filtered out.::STEP:3:PHASE:Experiment:DESCRIPTION:[Store malicious XSS content] Once the adversary has determined which stored locations are vulnerable to XSS, they will interact with the web application to store the malicious content. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.:TECHNIQUE:Store a malicious script on a page that will execute when viewed by the victim.:TECHNIQUE:Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.:TECHNIQUE:Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.:TECHNIQUE:Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.::","::An application that leverages a client-side web browser with scripting enabled.::An application that fails to adequately sanitize or encode untrusted input.::An application that stores information provided by the user in data storage of some kind.::","::SKILL:Requires the ability to write scripts of varying complexity and to inject them through user controlled fields within the application.:LEVEL:Medium::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:A successful Stored XSS attack can enable an adversary to exfiltrate sensitive information from the application.::SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access Control:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful Stored XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:A successful Stored XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:A successful Stored XSS attack can allow an adversary to tamper with application data.::","::Use browser technologies that do not allow client-side scripting.::Utilize strict type, character, and encoding enforcement.::Ensure that all user-supplied input is validated before being stored.::","::An adversary determines that a system uses a web based interface for administration. The adversary creates a new user record and supplies a malicious script in the user name field. The user name field is not validated by the system and a new log entry is created detailing the creation of the new user. Later, an administrator reviews the log in the administrative console. When the administrator comes across the new user entry, the browser sees a script and executes it, stealing the administrator's authentication cookie and forwarding it to the adversary. An adversary then uses the received authentication cookie to log in to the system as an administrator, provided that the administrator console can be accessed remotely.::An online discussion forum allows its members to post HTML-enabled messages, which can also include image tags. An adversary embeds JavaScript in the image tags of their message. The adversary then sends the victim an email advertising free goods and provides a link to the form for how to collect. When the victim visits the forum and reads the message, the malicious script is executed within the victim's browser.::","::79::","","",
593,"Session Hijacking",Standard,Stable,"This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:21::","::STEP:1:PHASE:Explore:DESCRIPTION:[Discover Existing Session Token] Through varrying means, an adversary will discover and store an existing session token for some other authenticated user session.::STEP:2:PHASE:Experiment:DESCRIPTION:[Insert Found Session Token] The attacker attempts to insert a found session token into communication with the targeted application to confirm viability for exploitation.::STEP:3:PHASE:Exploit:DESCRIPTION:[Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.::","::An application that leverages sessions to perform authentication.::","::SKILL:Exploiting a poorly protected identity token is a well understood attack with many helpful resources available.:LEVEL:Low::","::The adversary must have the ability to communicate with the application over the network.::","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Gain Privileges:NOTE:A successful attack can enable an adversary to gain unauthorized access to an application.::","::Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.::","","::287::","TAXONOMY NAME:ATTACK:ENTRY ID:1185:ENTRY NAME:Browser Session Hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1550.001:ENTRY NAME:Use Alternate Authentication Material:Application Access Token::::TAXONOMY NAME:ATTACK:ENTRY ID:1563:ENTRY NAME:Remote Service Session Hijacking::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Session hijacking attack::","",
594,"Traffic Injection",Meta,Stable,"An adversary injects traffic into the target's network connection. The adversary is therefore able to degrade or disrupt the connection, and potentially modify the content. This is not a flooding attack, as the adversary is not focusing on exhausting resources. Instead, the adversary is crafting a specific input to affect the system in a particular way.","",,,"","","::The target application must leverage an open communications channel.::The channel on which the target communicates must be vulnerable to interception (e.g., adversary in the middle attack - CAPEC-94).::","","::A tool, such as a MITM Proxy, that is capable of generating and injecting custom inputs to be used in the attack.::","","::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:The injection of specific content into a connection can trigger a disruption in that communications channel, thereby denying availability of the service.::SCOPE:Integrity:TECHNICAL IMPACT:Other:NOTE:An adversary's injection of additional content into a communication channel negatively impacts the integrity of that channel.::","","","::940::","","",
595,"Connection Reset",Standard,Draft,"In this attack pattern, an adversary injects a connection reset packet to one or both ends of a target's connection. The attacker is therefore able to have the target and/or the destination server sever the connection without having to directly filter the traffic between them.","",,,"::NATURE:ChildOf:CAPEC ID:594::","","::This attack requires the ability to monitor the target's network connection.::","","","","","","","::940::","","",
596,"TCP RST Injection",Detailed,Draft,"An adversary injects one or more TCP RST packets to a target after the target has made a HTTP GET request. The goal of this attack is to have the target and/or destination web server terminate the TCP connection.","",,,"::NATURE:ChildOf:CAPEC ID:595::","","::An On/In Path Device::","","","","","","","::940::","","",
597,"Absolute Path Traversal",Detailed,Draft,"An adversary with access to file system resources, either directly or via application logic, will use various file absolute paths and navigation mechanisms such as .. to extend their range of access to inappropriate areas of the file system. The goal of the adversary is to access directories and files that are intended to be restricted from their access.","",,,"::NATURE:ChildOf:CAPEC ID:126::","::STEP:1:PHASE:Explore:DESCRIPTION:[Fingerprinting of the operating system] In order to perform a valid path traversal, the adversary needs to know what the underlying OS is so that the proper file seperator is used.:TECHNIQUE:Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.:TECHNIQUE:TCP/IP Fingerprinting. The adversary uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.:TECHNIQUE:Induce errors to find informative error messages::STEP:2:PHASE:Explore:DESCRIPTION:[Survey application] Using manual or automated means, an adversary will survey the target application looking for all areas where user input is taken to specify a file name or path.:TECHNIQUE:Use a spidering tool to follow and record all links on a web page. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of a web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.:TECHNIQUE:Use a browser to manually explore a website and analyze how it is constructed. Many browser's plug-in are available to facilitate the analysis or automate the URL discovery.::STEP:3:PHASE:Experiment:DESCRIPTION:[Attempt variations on input parameters] Using manual or automated means, an adversary attempts varying absolute file paths on all found user input locations and observes the responses.:TECHNIQUE:Access common files in root directories such as /bin, /boot, /lib, or /home:TECHNIQUE:Access a specific drive letter or windows volume letter by specifying C:dirname for example:TECHNIQUE:Access a known Windows UNC share by specifying UNCsharename for example::STEP:4:PHASE:Exploit:DESCRIPTION:[Access, modify, or execute arbitrary files.] An adversary injects absolute path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An adversary could be able to read directories or files which they are normally not allowed to read. The adversary could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the adversary accesses arbitrary files, they could also modify files. In particular situations, the adversary could also execute arbitrary code or system commands.:TECHNIQUE:Manipulate file and its path by injecting absolute path sequences (e.g. /home/file.txt).:TECHNIQUE:Download files, modify files, or try to execute shell commands (with binary files).::","::The target must leverage and access an underlying file system.::","::SKILL:Simple command line attacks.:LEVEL:Low::SKILL:Programming attacks.:LEVEL:Medium::","::The attacker must have access to an application interface or a direct shell that allows them to inject directory strings and monitor the results.::","","::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.::","::Design: Configure the access control correctly.::Design: Enforce principle of least privilege.::Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.::Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.::Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.::Implementation: Perform input validation for all remote content, including remote and user-generated content.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::Implementation: Use indirect references rather than actual file names.::Implementation: Use possible permissions on file access when developing and deploying web applications.::Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification using an allowlist approach.::","","::36::","","",
598,"DNS Spoofing",Detailed,Draft,"An adversary sends a malicious (NXDOMAIN (No such domain) code, or DNS A record) response to a target's route request before a legitimate resolver can. This technique requires an On-path or In-path device that can monitor and respond to the target's DNS requests. This attack differs from BGP Tampering in that it directly responds to requests made by the target instead of polluting the routing the target's infrastructure uses.","",,,"::NATURE:ChildOf:CAPEC ID:194::","","::On/In Path Device::","::SKILL:To distribute email:LEVEL:Low::","","","","::Design: Avoid dependence on DNS::Design: Include hosts file/IP address in the application::Implementation: Utilize a .onion domain with Tor support::Implementation: DNSSEC::Implementation: DNS-hold-open::","::Below-Recursive DNS Poisoning: When an On/In-path device between a recursive DNS server and a user sends a malicious (NXDOMAIN (No such domain) code, or DNS A record ) response before a legitimate resolver can.::Above-Recursive DNS Poisoning: When an On/In-path device between an authority server (e.g., government-managed) and a recursive DNS server sends a malicious (NXDOMAIN (No such domain)code, or a DNS record) response before a legitimate resolver can.::","","","",
599,"Terrestrial Jamming",Detailed,Draft,"In this attack pattern, the adversary transmits disruptive signals in the direction of the target's consumer-level satellite dish (as opposed to the satellite itself). The transmission disruption occurs in a more targeted range. Portable terrestrial jammers have a range of 3-5 kilometers in urban areas and 20 kilometers in rural areas. This technique requires a terrestrial jammer that is more powerful than the frequencies sent from the satellite.","",Low,High,"::NATURE:ChildOf:CAPEC ID:195::","","","","::A terrestrial satellite jammer with a signal more powerful than that of the satellite attempting to communicate with the target. The adversary must know the location of the target satellite dish.::","","::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:A successful attack will deny, degrade, or disrupt availability of satellite communications for the target by overwhelming its resources to accurately receive authorized transmissions.::","","::An attempt to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These jamming signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.::","","","",
6,"Argument Injection",Standard,Draft,"An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.","",High,High,"::NATURE:ChildOf:CAPEC ID:137::","::STEP:1:PHASE:Explore:DESCRIPTION:[Discovery of potential injection vectors] Using an automated tool or manual discovery, the attacker identifies services or methods with arguments that could potentially be used as injection vectors (OS, API, SQL procedures, etc.).:TECHNIQUE:Manually cover the application and record the possible places where arguments could be passed into external systems.:TECHNIQUE:Use a spider, for web applications, to create a list of URLs and associated inputs.::STEP:2:PHASE:Experiment:DESCRIPTION:[1. Attempt variations on argument content] Possibly using an automated tool, the attacker will perform injection variations of the arguments.:TECHNIQUE:Use a very large list of probe strings in order to detect if there is a positive result, and, what type of system has been targeted (if obscure).:TECHNIQUE:Use a proxy tool to record results, error messages and/or log if accessible.::STEP:3:PHASE:Exploit:DESCRIPTION:[Abuse of the application] The attacker injects specific syntax into a particular argument in order to generate a specific malicious effect in the targeted application.:TECHNIQUE:Manually inject specific payload into targeted argument.::","::Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.::Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client.::","::SKILL:The attacker has to identify injection vector, identify the operating system-specific commands, and optionally collect the output.:LEVEL:Medium::","::Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::","","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.::Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.::Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise.::","::A recent example instance of argument injection occurred against Java Web Start technology, which eases the client side deployment for Java programs. The JNLP files that are used to describe the properties for the program. The client side Java runtime used the arguments in the property setting to define execution parameters, but if the attacker appends commands to an otherwise legitimate property file, then these commands are sent to the client command shell. [REF-482]::","::74::146::184::78::185::697::","","",
60,"Reusing Session IDs (aka Session Replay)",Detailed,Draft,"This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.","",High,High,"::NATURE:ChildOf:CAPEC ID:593::","::STEP:1:PHASE:Explore:DESCRIPTION:The attacker interacts with the target host and finds that session IDs are used to authenticate users.::STEP:2:PHASE:Explore:DESCRIPTION:The attacker steals a session ID from a valid user.::STEP:3:PHASE:Exploit:DESCRIPTION:The attacker tries to use the stolen session ID to gain access to the system with the privileges of the session ID's original owner.::","::The target host uses session IDs to keep track of the users.::Session IDs are used to control access to resources.::The session IDs used by the target host are not well protected from session theft.::","::SKILL:If an attacker can steal a valid session ID, they can then try to be authenticated with that stolen session ID.:LEVEL:Low::SKILL:More sophisticated attack can be used to hijack a valid session from a user and spoof a legitimate user by reusing their valid session ID.:LEVEL:Medium::","","","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Always invalidate a session ID after the user logout.::Setup a session time out for the session IDs.::Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate adversary in the middle attacks (CAPEC-94).::Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.::Encrypt the session data associated with the session ID.::Use multifactor authentication.::","::OpenSSL and SSLeay allow remote attackers to reuse SSL sessions and bypass access controls. See also: CVE-1999-0428::Merak Mail IceWarp Web Mail uses a static identifier as a user session ID that does not change across sessions, which could allow remote attackers with access to the ID to gain privileges as that user, e.g. by extracting the ID from the user's answer or forward URLs. See also: CVE-2002-0258::","::294::290::346::384::488::539::200::285::664::732::","TAXONOMY NAME:ATTACK:ENTRY ID:1134.001:ENTRY NAME:Access Token Manipulation:Token Impersonation/Theft::::TAXONOMY NAME:ATTACK:ENTRY ID:1550.004:ENTRY NAME:Use Alternate Authentication Material:Web Session Cookie::","",
600,"Credential Stuffing",Standard,Stable,"An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.","",High,High,"::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:653::","::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.:TECHNIQUE:An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.:TECHNIQUE:An adversary conducts a sniffing attack to steal credentials as they are transmitted.:TECHNIQUE:An adversary gains access to a database and exfiltrates password hashes.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.:TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account).::STEP:3:PHASE:Experiment:DESCRIPTION:[Attempt authentication] Try each username/password combination until the target grants access.:TECHNIQUE:Manually or automatically enter each username/password combination through the target's interface.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.::","::The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.::The system/application does not have a sound password policy that is being enforced.::The system/application does not implement an effective password throttling mechanism.::The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.::","::SKILL:A Credential Stuffing attack is very straightforward.:LEVEL:Low::","::A machine with sufficient resources for the job (e.g. CPU, RAM, HD).::A known list of username/password combinations.::A custom script that leverages the credential list to launch the attack.::","::Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.::The login attempts use passwords that have been used previously by the user account in question.::Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.::","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Authorization:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.::Create a strong password policy and ensure that your system enforces this policy.::Ensure users are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse local administrator account credentials across systems.::Deny remote use of local admin credentials to log into domain systems.::Do not allow accounts to be a local administrator on more than one system.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Monitor system and domain logs for abnormal credential access.::","::A user leverages the password Password123 for a handful of application logins. An adversary obtains a victim's username/password combination from a breach of a social media application and executes a Credential Stuffing attack against multiple banking and credit card applications. Since the user leverages the same credentials for their bank account login, the adversary successfully authenticates to the user's bank account and transfer money to an offshore account.::In October 2014 J.P. Morgan's Corporate Challenge website was breached, resulting in adversaries obtaining multiple username/password pairs. A Credential Stuffing attack was then executed against J.P. Morgan Chase, which resulted in over 76 million households having their accounts compromised.::","::522::307::308::309::262::263::654::","TAXONOMY NAME:ATTACK:ENTRY ID:1110.004:ENTRY NAME:Brute Force:Credential Stuffing::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Credential stuffing::","",
601,"Jamming",Standard,Draft,"An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:607::","","","","","","::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:The jamming of equipment denies the availability of functioning communications services.::","","","","","",
603,"Blockage",Standard,Draft,"An adversary blocks the delivery of an important system resource causing the system to fail or stop working.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:607::","","::This attack pattern requires knowledge of where important system resources are logically located as well as how they operate.::","","","","::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:Blocking a resource from functional operation denies its availability to authorized users.::","","","","","",
604,"Wi-Fi Jamming",Detailed,Draft,"In this attack scenario, the attacker actively transmits on the Wi-Fi channel to prevent users from transmitting or receiving data from the targeted Wi-Fi network. There are several known techniques to perform this attack – for example: the attacker may flood the Wi-Fi access point (e.g. the retransmission device) with deauthentication frames. Another method is to transmit high levels of noise on the RF band used by the Wi-Fi network.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:601::","","::Lack of anti-jam features in 802.11::Lack of authentication on deauthentication/disassociation packets on 802.11-based networks::","::SKILL:This attack can be performed by low capability attackers with freely available tools. Commercial tools are also available that can target select networks or all WiFi networks within a range of several miles.:LEVEL:Low::","","","::SCOPE:Availability:TECHNICAL IMPACT:Other:NOTE:A successful attack will deny the availability of the Wi-fi network to authorized users.::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:The attacker's goal is to prevent users from accessing the wireless network. Denying connectivity to the wireless network prevents the user from being able to transmit or receive any data, which also prevents VOIP calls, however this attack poses no threat to data confidentiality.::","::Countermeasures have been proposed for both disassociation flooding and RF jamming, however these countermeasures are not standardized and would need to be supported on both the retransmission device and the handset in order to be effective. Commercial products are not currently available that support jamming countermeasures for Wi-Fi.::","","","","",
605,"Cellular Jamming",Detailed,Draft,"In this attack scenario, the attacker actively transmits signals to overpower and disrupt the communication between a cellular user device and a cell tower. Several existing techniques are known in the open literature for this attack for 2G, 3G, and 4G LTE cellular technology. For example, some attacks target cell towers by overwhelming them with false status messages, while others introduce high levels of noise on signaling channels.","",,Low,"::NATURE:ChildOf:CAPEC ID:601::","","::Lack of anti-jam features in cellular technology (2G, 3G, 4G, LTE)::","::SKILL:This attack can be performed by low capability attackers with commercially available tools.:LEVEL:Low::","","","::SCOPE:Availability:TECHNICAL IMPACT:Resource Consumption:NOTE:The attacker's goal is to prevent users from accessing the cellular network. Denying connectivity to the cellular network prevents the user from being able to transmit or receive any data, which also prevents VOIP calls, however this attack poses no threat to data confidentiality.::","::Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.::","","","","",
606,"Weakening of Cellular Encryption",Detailed,Draft,"An attacker, with control of a Cellular Rogue Base Station or through cooperation with a Malicious Mobile Network Operator can force the mobile device (e.g., the retransmission device) to use no encryption (A5/0 mode) or to use easily breakable encryption (A5/1 or A5/2 mode).","",,High,"::NATURE:ChildOf:CAPEC ID:620::","","::Cellular devices that allow negotiating security modes to facilitate backwards compatibility and roaming on legacy networks.::","::SKILL:Adversaries can purchase and implement rogue BTS stations at a cost effective rate, and can push a mobile device to downgrade to a non-secure cellular protocol like 2G over GSM or CDMA.:LEVEL:Medium::","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Tracking, Network Reconnaissance::","::Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.::Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.::","","::757::","","",