'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
448,"Embed Virus into DLL",Detailed,Stable,"An adversary tampers with a DLL and embeds a computer virus into gaps between legitimate machine instructions. These gaps may be the result of compiler optimizations that pad memory blocks for performance gains. The embedded virus then attempts to infect any machine which interfaces with the product, and possibly steal private data or eavesdrop.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:442::","","::Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.::","","","","::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::","::Leverage anti-virus products to detect and quarantine software with known virus.::","","::506::","TAXONOMY NAME:ATTACK:ENTRY ID:1027.009:ENTRY NAME:Obfuscated Files or Information:Â Embedded Payloads::","",
45,"Buffer Overflow via Symbolic Links",Detailed,Draft,"This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.","",High,High,"::NATURE:ChildOf:CAPEC ID:100::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program that might load in certain files to memory.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.:TECHNIQUE:The adversary creates or modifies a symbolic link pointing to those files which contain an excessive amount of data. If creating a symbolic link to one of those files causes different behavior in the application, then an injection vector has been identified.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow file content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the specially crafted file content, the adversary creates a symbolic link from the identified resource to the malicious file, causing a targeted buffer overflow attack.::","::The adversary can create symbolic link on the target host.::The target host does not perform correct boundary checking while consuming data from a resources.::","::SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::","","::An adversary creating or modifying Symbolic links is a potential signal of attack in progress.::An adversary deleting temporary files can also be a sign that the adversary is trying to replace legitimate resources with malicious ones.::","::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.::Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.::Pay attention to the resource pointed to by your symlink links (See attack pattern named Forced Symlink race), they can be replaced by malicious resources.::Always check the size of the input data before copying to a buffer.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::","::The EFTP server has a buffer overflow that can be exploited if an adversary uploads a .lnk (link) file that contains more than 1,744 bytes. This is a classic example of an indirect buffer overflow. First the adversary uploads some content (the link file) and then the adversary causes the client consuming the data to be exploited. In this example, the ls command is exploited to compromise the server software.::","::120::285::302::118::119::74::20::680::697::","","",
452,"Infected Hardware",Standard,Stable,"An adversary inserts malicious logic into hardware, typically in the form of a computer virus or rootkit. This logic is often hidden from the user of the hardware and works behind the scenes to achieve negative impacts. This pattern of attack focuses on hardware already fielded and used in operation as opposed to hardware that is still under development and part of the supply chain.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:441::","","::Access to the hardware currently deployed at a victim location.::","","","","::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::","","","","","",
456,"Infected Memory",Standard,Stable,"An adversary inserts malicious logic into memory enabling them to achieve a negative impact. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems that are still under development and part of the supply chain.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:441::","","","","","","::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::","::Leverage anti-virus products to detect stop operations with known virus.::","::A USB Memory stick has malicious logic inserted before shipping of the product allowing for infection of the host machine once inserted into the USB port.::In 2007, approximately 1800 of Seagate's Maxtor Personal Storage 3200 drives were built under contract with an outside manufacturer and contained a virus that stole user passwords.::","::1257::1260::1274::1312::1316::","","",
457,"USB Memory Attacks",Detailed,Draft,"An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.","",Low,High,"::NATURE:ChildOf:CAPEC ID:456::NATURE:CanPrecede:CAPEC ID:529::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Target System] In certain cases, the adversary will explore an organization's network to determine a specific target machine to exploit based on the information it contains or privileges the main user may possess.:TECHNIQUE:If needed, the adversary explores an organization's network to determine if any specific systems of interest exist.::STEP:2:PHASE:Experiment:DESCRIPTION:[Develop or Obtain malware and install on a USB device] The adversary develops or obtains the malicious software necessary to exploit the target system, which they then install on an external USB device such as a USB flash drive.:TECHNIQUE:The adversary can develop or obtain malware for to perform a variety of tasks such as sniffing network traffic or monitoring keystrokes.::STEP:3:PHASE:Exploit:DESCRIPTION:[Connect or deceive a user into connecting the infected USB device] Once the malware has been placed on an external USB device, the adversary connects the device to the target system or deceives a user into connecting the device to the target system such as in a USB Drop Attack.:TECHNIQUE:The adversary connects the USB device to a specified target system or performs a USB Drop Attack, hoping a user will find and connect the USB device on their own. Once the device is connected, the malware executes giving the adversary access to network traffic, credentials, etc.::","::Some level of physical access to the device being attacked.::Information pertaining to the target organization on how to best execute a USB Drop Attack.::","","","","","::Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.::Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.::Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.::","","::1299::","TAXONOMY NAME:ATTACK:ENTRY ID:1091:ENTRY NAME:Replication Through Removable Media::::TAXONOMY NAME:ATTACK:ENTRY ID:1092:ENTRY NAME:Communication Through Removable Media::","",
458,"Flash Memory Attacks",Detailed,Draft,"An adversary inserts malicious logic into a product or technology via flashing the on-board memory with a code-base that contains malicious logic. Various attacks exist against the integrity of flash memory, the most direct being rootkits coded into the BIOS or chipset of a device.","",,,"::NATURE:ChildOf:CAPEC ID:456::","","","","","","","","","::1282::","","",
459,"Creating a Rogue Certification Authority Certificate",Detailed,Draft,"An adversary exploits a weakness resulting from using a hashing algorithm with weak collision resistance to generate certificate signing requests (CSR) that contain collision blocks in their to be signed parts. The adversary submits one CSR to be signed by a trusted certificate authority then uses the signed blob to make a second certificate appear signed by said certificate authority. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority.","",Medium,Very High,"::NATURE:ChildOf:CAPEC ID:473::","::STEP:1:PHASE:Experiment:DESCRIPTION:[Craft Certificates] The adversary crafts two different, but valid X.509 certificates that when hashed with an insufficiently collision resistant hashing algorithm would yield the same value.::STEP:2:PHASE:Experiment:DESCRIPTION:[Send CSR to Certificate Authority] The adversary sends the CSR for one of the certificates to the Certification Authority which uses the targeted hashing algorithm. That request is completely valid and the Certificate Authority issues an X.509 certificate to the adversary which is signed with its private key.::STEP:3:PHASE:Exploit:DESCRIPTION:[Insert Signed Blob into Unsigned Certificate] The adversary takes the signed blob and inserts it into the second X.509 certificate that the attacker generated. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob is valid in the second certificate. The result is two certificates that appear to be signed by a valid certificate authority despite only one having been signed.::","::Certification Authority is using a hash function with insufficient collision resistance to generate the certificate hash to be signed::","::SKILL:Understanding of how to force a hash collision in X.509 certificates:LEVEL:High::SKILL:An attacker must be able to craft two X.509 certificates that produce the same hash value:LEVEL:High::SKILL:Knowledge needed to set up a certification authority:LEVEL:Medium::","::Knowledge of a certificate authority that uses hashing algorithms with poor collision resistance::A valid certificate request and a malicious certificate request with identical hash values::","","::SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::","::Certification Authorities need to stop using deprecated or cryptographically insecure hashing algorithms to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512.::","::MD5 Collisions The MD5 algorithm is not collision resistant, allowing attackers to use spoofing attacks to create rogue certificate Authorities.See also: CVE-2004-2761::SHA1 Collisions The SHA1 algorithm is not collision resistant, allowing attackers to use spoofing attacks to create rogue certificate Authorities.See also: CVE-2005-4900::PKI Infrastructure vulnerabilities Research has show significant vulnerabilities in PKI infrastructure. Trusted certificate authorities have been shown to use weak hashing algorithms after attacks have been demonstrated against those algorithms. Additionally, reliable methods have been demonstrated for generated MD5 collisions that could be used to generate malicious CSRs.::","::327::295::290::","","",
46,"Overflow Variables and Tags",Detailed,Draft,"This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The adversary crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.","",High,High,"::NATURE:ChildOf:CAPEC ID:100::NATURE:PeerOf:CAPEC ID:8::NATURE:PeerOf:CAPEC ID:10::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries look for applications or programs that accept formatted files, such as configuration files, as input.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.:TECHNIQUE:Knowing the type of file that an application takes as input, the adversary takes a normal input file and modifies a single variable or tag to contain a large amount of data. If there is a crash, this means that a buffer overflow attack is possible. The adversary will keep changing single variables or tags one by one until they see a change in behavior.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] The adversary will upload the crafted file to the application, causing a buffer overflow.::","::The target program consumes user-controllable data in the form of tags or variables.::The target program does not perform sufficient boundary checking.::","::SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::","","","::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::Do not trust input data from user. Validate all user input.::","::A buffer overflow vulnerability exists in the Yamaha MidiPlug that can be accessed via a Text variable found in an EMBED tag.See also: CVE-1999-0946::A buffer overflow in Exim allows local users to gain root privileges by providing a long :include: option in a .forward file.See also: CVE-1999-0971::","::120::118::119::74::20::680::733::697::","","",
460,"HTTP Parameter Pollution (HPP)",Detailed,Draft,"An adversary adds duplicate HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules.","",,Medium,"::NATURE:ChildOf:CAPEC ID:15::NATURE:CanPrecede:CAPEC ID:676::","::STEP:1:PHASE:Explore:DESCRIPTION:[Find User Input] The adversary finds anywhere in the web application that uses user-supplied input in a form or action. This can also be found by looking at parameters in the URL in the navigation bar of the browser::STEP:2:PHASE:Experiment:DESCRIPTION:[Add Duplicate Parameter Values] Once the adversary has identified what user input is used as HTTP parameters, they will add duplicates to each parameter one by one to observe the results. If the response from the HTTP request shows the duplicate parameter value concatenated with the original parameter value in some way, or simply just the duplicate parameter value, then HPP is possible.:TECHNIQUE:In the URL, add a duplicate parameter by using the & delimiter. For example par1=val1 becomes par1=val1&par1=val2. Depending on the backend API, this could be treated as par1=val1, val2, which could lead to par1 being set to val2, ignoring val1.:TECHNIQUE:If the request is created based on user input directly on the page, the adversary will test by adding an encoded delimiter to the input. For example, the adverary might supply 1000%26action=withdraw and the backend might interpret a POST request with the paramters action=deposit&amount=1000&action=withdraw::STEP:3:PHASE:Exploit:DESCRIPTION:[Leverage HPP] Once the adversary has identified how the backend handles duplicate parameters, they will leverage this by polluting the paramters in a way that benefits them. In some cases, hardcoded parameters will be disregarded by the backend. In others, the adversary can bypass a WAF that might only check a parameter before it has been concatenated by the backend, resulting in malicious queries getting through.::","::HTTP protocol is used with some GET/POST parameters passed::","","::Any tool that enables intercepting and tampering with HTTP requests::","","","::Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests::Design: Perform URL encoding::Implementation: Use strict regular expressions in URL rewriting::Implementation: Beware of multiple occurrences of a parameter in a Query String::","","::88::147::235::","TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Web Parameter Tampering::","",
461,"Web Services API Signature Forgery Leveraging Hash Function Extension Weakness",Standard,Draft,"An adversary utilizes a hash function extension/padding weakness, to modify the parameters passed to the web service requesting authentication by generating their own call in order to generate a legitimate signature hash (as described in the notes), without knowledge of the secret token sometimes provided by the web service.","",,High,"::NATURE:ChildOf:CAPEC ID:115::","::STEP:1:PHASE:Explore:DESCRIPTION:[Find a vulnerable web service] The adversary finds a web service that uses a vulnerable authentication scheme, where an authentication token is concatenated with the parameters of a request and then hashed:TECHNIQUE:Read application documentation to learn about authentication schemes being used:TECHNIQUE:Observe web service traffic to look for vulnerable authentication schemes::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt adding padding to parameters] An adversary tests if they can simply add padding to the parameters of a request such that the request is technically changed, with the hash remaining the same:TECHNIQUE:Exploit the hash function extension / padding weakness with only padding to test the weakness::STEP:3:PHASE:Exploit:DESCRIPTION:[Add malicious parameters to request] Add malicious parameters to a captured request in addition to what is already present. Do this by exploiting the padding weakness of the hash function and send the request to the web service so that it believes it is authenticated and acts on the extra parameters.:TECHNIQUE:Exploit the hash function extension / padding weakness by adding malicious parameters to a web service request such that it is still deemed authentic::","::Web services check the signature of the API calls::Authentication tokens / secrets are shared between the server and the legitimate client::The API call signature is generated by concatenating the parameter list with the shared secret and hashing the result.::An iterative hash function like MD5 and SHA1 is used.::An attacker is able to intercept or in some other way gain access to the information passed between the legitimate client and the server in order to retrieve the hash value and length of the original message.::The communication channel between the client and the server is not secured via channel security such as TLS::","::SKILL:Medium level of cryptography knowledge, specifically how iterative hash functions work. This is needed to select proper padding.:LEVEL:Medium::","::Access to a function to produce a hash (e.g., MD5, SHA1) Tools that allow the attacker to intercept a message between the client and the server, specifically the hash that is the signature and the length of the original message concatenated with the secret bytes::","","","::Design: Use a secure message authentication code (MAC) function such as an HMAC-SHA1::","::To leverage an attack against the has function extension / padding weakness, consider the message to be passed to the web service is M (this message includes the parameters passed to the web service concatenated with the secret token / key bytes). The message M is hashed and that hash is passed to the web service and is used for authentication. The attacker does not know M, but can see Hash (M) and Length (M). The attacker can then compute Hash (M || Padding (M) || M') for any M'. The attacker does not know the entire message M, specifically the attacker does not know the secret bytes, but that does not matter. The attacker is still able to sign their own message M' and make the called web service verify the integrity of the message without an error.::","::328::290::","","",
462,"Cross-Domain Search Timing",Detailed,Draft,"An attacker initiates cross domain HTTP / GET requests and times the server responses. The timing of these responses may leak important information on what is happening on the server. Browser's same origin policy prevents the attacker from directly reading the server responses (in the absence of any other weaknesses), but does not prevent the attacker from timing the responses to requests that the attacker issued cross domain.","",,Medium,"::NATURE:ChildOf:CAPEC ID:54::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine service to send cross domain requests to] The adversary first determines which service they will be sending the requests to::STEP:2:PHASE:Experiment:DESCRIPTION:[Send and time various cross domain requests] Adversaries will send a variety of cross domain requests to the target, timing the time it takes for the target to respond. Although they won't be able to read the response, the adversary can use the time to infer information about what the service did upon receiving the request.:TECHNIQUE:Using a GET request, leverage the img tag in conjunction with onload() / onerror() javascript events to time a response:TECHNIQUE:Using a POST request, leverage the iframe element and use the onload() event to time a response::STEP:3:PHASE:Exploit:DESCRIPTION:[Infer information from the response time] After obtaining reponse times to various requests, the adversary will compare these times and infer potentially sensitive information. An example of this could be asking a service to retrieve information and random usernames. If one request took longer to process, it is likely that a user with that username exists, which could be useful knowledge to an adversary.:TECHNIQUE:Compare timing of different requests to infer potentially sensitive information about a target service::","::Ability to issue GET / POST requests cross domainJava Script is enabled in the victim's browserThe victim has an active session with the site from which the attacker would like to receive informationThe victim's site does not protect search functionality with cross site request forgery (CSRF) protection::","::SKILL:Some knowledge of Java Script:LEVEL:Low::","::Ability to issue GET / POST requests cross domain::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Design: The victim's site could protect all potentially sensitive functionality (e.g. search functions) with cross site request forgery (CSRF) protection and not perform any work on behalf of forged requests::Design: The browser's security model could be fixed to not leak timing information for cross domain requests::","","::385::352::208::","","",
463,"Padding Oracle Crypto Attack",Detailed,Draft,"An adversary is able to efficiently decrypt data without knowing the decryption key if a target system leaks data on whether or not a padding error happened while decrypting the ciphertext. A target system that leaks this type of information becomes the padding oracle and an adversary is able to make use of that oracle to efficiently decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). In addition to performing decryption, an adversary is also able to produce valid ciphertexts (i.e., perform encryption) by using the padding oracle, all without knowing the encryption key.","",,High,"::NATURE:ChildOf:CAPEC ID:97::","","::The decryption routine does not properly authenticate the message / does not verify its integrity prior to performing the decryption operation::The target system leaks data (in some way) on whether a padding error has occurred when attempting to decrypt the ciphertext.::The padding oracle remains available for enough time / for as many requests as needed for the adversary to decrypt the ciphertext.::","","::Ability to detect instances where a target system is vulnerable to an oracle padding attack Sufficient cryptography knowledge and tools needed to take advantage of the presence of the padding oracle to perform decryption / encryption of data without a key::","","","::Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption::Implementation: Do not leak information back to the user as to any cryptography (e.g., padding) encountered during decryption.::","::An adversary sends a request containing ciphertext to the target system. Due to the browser's same origin policy, the adversary is not able to see the response directly, but can use cross-domain information leak techniques to still get the information needed (i.e., information on whether or not a padding error has occurred). This can be done using img tag plus the onerror()/onload() events. The adversary's JavaScript can make web browsers to load an image on the target site, and know if the image is loaded or not. This is 1-bit information needed for the padding oracle attack to work: if the image is loaded, then it is valid padding, otherwise it is not.::","::209::514::649::347::354::696::","","",
464,"Evercookie",Standard,Draft,"An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed. The cookie is stored on the victim's machine in over ten places. When the victim clears the cookie cache via traditional means inside the browser, that operation removes the cookie from certain places but not others. The malicious code then replicates the cookie from all of the places where it was not deleted to all of the possible storage locations once again. So the victim again has the cookie in all of the original storage locations. In other words, failure to delete the cookie in even one location will result in the cookie's resurrection everywhere. The evercookie will also persist across different browsers because certain stores (e.g., Local Shared Objects) are shared between different browsers.","",,Medium,"::NATURE:ChildOf:CAPEC ID:554::","","::The victim's browser is not configured to reject all cookiesThe victim visits a website that serves the attackers' evercookie::","","::Evercookie source code::","","","::Design: Browser's design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place.::Design: Safari browser's private browsing mode is currently effective against evercookies.::","","::359::","TAXONOMY NAME:ATTACK:ENTRY ID:1606.001:ENTRY NAME:Forge Web Credentials: Web Cookies::","",
465,"Transparent Proxy Abuse",Standard,Draft,"A transparent proxy serves as an intermediate between the client and the internet at large. It intercepts all requests originating from the client and forwards them to the correct location. The proxy also intercepts all responses to the client and forwards these to the client. All of this is done in a manner transparent to the client.","",,Medium,"::NATURE:ChildOf:CAPEC ID:554::","","::Transparent proxy is usedVulnerable configuration of network topology involving the transparent proxy (e.g., no NAT happening between the client and the proxy)Execution of malicious Flash or Applet in the victim's browser::","::SKILL:Creating malicious Flash or Applet to open a cross-domain socket connection to a remote system:LEVEL:Medium::","","","","::Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.::Configuration: Disable in the browser the execution of Java Script, Flash, SilverLight, etc.::","","::441::","TAXONOMY NAME:ATTACK:ENTRY ID:1090.001:ENTRY NAME:Proxy: Internal Proxy::","",
466,"Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy",Standard,Draft,"An attacker leverages an adversary in the middle attack (CAPEC-94) in order to bypass the same origin policy protection in the victim's browser. This active adversary in the middle attack could be launched, for instance, when the victim is connected to a public WIFI hot spot. An attacker is able to intercept requests and responses between the victim's browser and some non-sensitive website that does not use TLS.","",,Medium,"::NATURE:ChildOf:CAPEC ID:94::","","::The victim and the attacker are both in an environment where an active adversary in the middle attack is possible (e.g., public WIFI hot spot)The victim visits at least one website that does not use TLS / SSL::","::SKILL:Ability to intercept and modify requests / responses:LEVEL:Low::SKILL:Ability to create iFrame and JavaScript code that would initiate unauthorized requests to sensitive sites from the victim's browser:LEVEL:Medium::SKILL:Solid understanding of the HTTP protocol:LEVEL:Medium::","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands::","::Design: Tunnel communications through a secure proxy::Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)::","","::300::","","",
467,"Cross Site Identification",Detailed,Draft,"An attacker harvests identifying information about a victim via an active session that the victim's browser has with a social networking site. A victim may have the social networking site open in one tab or perhaps is simply using the remember me feature to keep their session with the social networking site active. An attacker induces a payload to execute in the victim's browser that transparently to the victim initiates a request to the social networking site (e.g., via available social network site APIs) to retrieve identifying information about a victim. While some of this information may be public, the attacker is able to harvest this information in context and may use it for further attacks on the user (e.g., spear phishing).","",,Low,"::NATURE:ChildOf:CAPEC ID:62::","","::The victim has an active session with the social networking site.::","::SKILL:An attacker should be able to create a payload and deliver it to the victim's browser.:LEVEL:High::SKILL:An attacker needs to know how to interact with various social networking sites (e.g., via available APIs) to request information and how to send the harvested data back to the attacker.:LEVEL:Medium::","","","","::Usage: Users should always explicitly log out from the social networking sites when done using them.::Usage: Users should not open other tabs in the browser when using a social networking site.::","::An attacker may post a malicious posting that contains an image with an embedded link. The link actually requests identifying information from the social networking site. A victim who views the malicious posting in their browser will have sent identifying information to the attacker, as long as the victim had an active session with the social networking site.::","::352::359::","","",
468,"Generic Cross-Browser Cross-Domain Theft",Standard,Draft,"An attacker makes use of Cascading Style Sheets (CSS) injection to steal data cross domain from the victim's browser. The attack works by abusing the standards relating to loading of CSS: 1. Send cookies on any load of CSS (including cross-domain) 2. When parsing returned CSS ignore all data that does not make sense before a valid CSS descriptor is found by the CSS parser.","",,Medium,"::NATURE:ChildOf:CAPEC ID:242::","","::No new lines can be present in the injected CSS stringProper HTML or URL escaping of the and ' characters is not presentThe attacker has control of two injection points: pre-string and post-string::","::SKILL:Ability to craft a CSS injection:LEVEL:High::","::Attacker controlled site/page to render a page referencing the injected CSS string::","","","::Design: Prior to performing CSS parsing, require the CSS to start with well-formed CSS when it is a cross-domain load and the MIME type is broken. This is a browser level fix.::Implementation: Perform proper HTML encoding and URL escaping::","","::707::149::177::838::","","",
469,"HTTP DoS",Standard,Draft,"An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted.","",,Low,"::NATURE:ChildOf:CAPEC ID:227::","","::HTTP protocol is usedWeb server used is vulnerable to denial of service via HTTP flooding::","","::Ability to issues hundreds of HTTP requests::","","","::Configuration: Configure web server software to limit the waiting period on opened HTTP sessions::Design: Use load balancing mechanisms::","","::770::772::","TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service: Service Exhaustion Flood::","",
47,"Buffer Overflow via Parameter Expansion",Detailed,Draft,"In this attack, the target software is given input that the adversary knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:100::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.:TECHNIQUE:In this attack, the normal method of providing large user input does not work. The program performs bounds checking on the user input, but not the expanded user input. The adversary needs to provide input that they believe will be expanded by the program to overflow a buffer. To identify where this is possible, an adversary either needs to have knowledge of the inner workings of the program or use a disassembler and other reverse engineering tools to guide the search.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the input to be given to the program. If the intent is to simply cause the software to crash, the input needs only to expand to an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft input that expands in a way that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.:TECHNIQUE:Create specific files and directories on the system and then give input using path traversal shortcuts to those directories that could expand past an input buffer.::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary gives the crafted input to the program, overflowing the buffer.::","::The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.::The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is).::","::SKILL:Finding this particular buffer overflow may not be trivial. Also, stack and especially heap based buffer overflows require a lot of knowledge if the intended goal is arbitrary code execution. Not only that the adversary needs to write the shell code to accomplish their goals, but the adversary also needs to find a way to get the program execution to jump to the planted shell code. There also needs to be sufficient room for the payload. So not every buffer overflow will be exploitable, even by a skilled adversary.:LEVEL:High::","::Access to the program source or binary. If the program is only available in binary then a disassembler and other reverse engineering tools will be helpful.::","","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system::","::Attack Example: FTP glob() The glob() function in FTP servers has been susceptible to attack as a result of incorrect resizing. This is an ftpd glob() Expansion LIST Heap Overflow Vulnerability. ftp daemon contains a heap-based buffer overflow condition. The overflow occurs when the LIST command is issued with an argument that expands into an oversized string after being processed by glob(). This buffer overflow occurs in memory that is dynamically allocated. It may be possible for adversaries to exploit this vulnerability and execute arbitrary code on the affected host. To exploit this, the adversary must be able to create directories on the target host. The glob() function is used to expand short-hand notation into complete file names. By sending to the FTP server a request containing a tilde (~) and other wildcard characters in the pathname string, a remote adversary can overflow a buffer and execute arbitrary code on the FTP server to gain root privileges. Once the request is processed, the glob() function expands the user input, which could exceed the expected length. In order to exploit this vulnerability, the adversary must be able to create directories on the FTP server. [REF-1]See also: CVE-2001-0249::Buffer overflow in the glob implementation in libc in NetBSD-current before 20050914, and NetBSD 2.* and 3.* before 20061203, as used by the FTP daemon, allows remote authenticated users to execute arbitrary code via a long pathname that results from path expansion. The limit computation of an internal buffer was done incorrectly. The size of the buffer in byte was used as element count, even though the elements of the buffer are 2 bytes long. Long expanded path names would therefore overflow the buffer.See also: CVE-2006-6652::","::120::119::118::130::131::74::20::680::697::","","",
470,"Expanding Control over the Operating System from the Database",Detailed,Draft,"An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks. These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc.","",,Very High,"::NATURE:ChildOf:CAPEC ID:66::","::STEP:1:PHASE:Explore:DESCRIPTION:The adversary identifies a database management system running on a machine they would like to gain control over, or on a network they want to move laterally through.::STEP:2:PHASE:Experiment:DESCRIPTION:The adversary goes about the typical steps of an SQL injection and determines if an injection is possible.::STEP:3:PHASE:Experiment:DESCRIPTION:Once the Adversary determines that an SQL injection is possible, they must ensure that the requirements for the attack are met. These are a high privileged session user and batched query support. This is done in similar ways to discovering if an SQL injection is possible.::STEP:4:PHASE:Experiment:DESCRIPTION:If the requirements are met, based on the database management system that is running, the adversary will find or create user defined functions (UDFs) that can be loaded as DLLs. An example of a DLL can be found at https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql::STEP:5:PHASE:Experiment:DESCRIPTION:In order to load the DLL, the adversary must first find the path to the plugin directory. The command to achieve this is different based on the type of DBMS, but for MySQL, this can be achieved by running the command select @@plugin_dir::STEP:6:PHASE:Exploit:DESCRIPTION:The DLL is then moved into the previously found plugin directory so that the contained functions can be loaded. This can be done in a number of ways; loading from a network share, writing the entire hex encoded string to a file in the plugin directory, or loading the DLL into a table and then into a file. An example using MySQL to load the hex string is as follows. select 0x4d5a9000... into dump file {plugin directory}udf.dll;::STEP:6:PHASE:Exploit:DESCRIPTION:Once the DLL is in the plugin directory, a command is then run to load the UDFs. An example of this in MySQL is create function sys_eval returns string soname 'udf.dll'; The function sys_eval is specific to the example DLL listed above.::STEP:6:PHASE:Exploit:DESCRIPTION:Once the adversary has loaded the desired function(s), they will use these to execute arbitrary commands on the compromised system. This is done through a simple select command to the loaded UDF. For example: select sys_eval('dir');. Because the prerequisite to this attack is that the database session user is a super user, this means that the adversary will be able to execute commands with elevated privileges.::","::A vulnerable DBMS is usedA SQL injection exists that gives an attacker access to the database or an attacker has access to the DBMS via other means::","::SKILL:Low level knowledge of the various facilities available in different DBMS systems for interacting with the file system and operating system:LEVEL:High::","","","","::Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection::Configuration: Ensure that the DBMS is patched with the latest security patches::Design: Ensure that the DBMS login used by the application has the lowest possible level of privileges in the DBMS::Design: Ensure that DBMS runs with the lowest possible level of privileges on the host machine and that it runs as a separate user::Usage: Do not use the DBMS machine for anything else other than the database::Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.::Usage: Use an intrusion detection system to monitor network connections and logs on the database host.::Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised::","","::250::89::","","",
471,"Search Order Hijacking",Detailed,Stable,"An adversary exploits a weakness in an application's specification of external libraries to exploit the functionality of the loader where the process loading the library searches first in the same directory in which the process binary resides and then in other directories. Exploitation of this preferential search order can allow an attacker to make the loading process load the adversary's rogue library rather than the legitimate library. This attack can be leveraged with many different libraries and with many different loading processes. No forensic trails are left in the system's registry or file system that an incorrect library had been loaded.","",,Medium,"::NATURE:ChildOf:CAPEC ID:159::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target general susceptibility] An attacker uses an automated tool or manually finds whether the target application uses dynamically linked libraries and the configuration file or look up table (such as Procedure Linkage Table) which contains the entries for dynamically linked libraries.:TECHNIQUE:The attacker uses a tool such as the OSX otool utility or manually probes whether the target application uses dynamically linked libraries.:TECHNIQUE:The attacker finds the configuration files containing the entries to the dynamically linked libraries and modifies the entries to point to the malicious libraries the attacker crafted.::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft malicious libraries] The attacker uses knowledge gained in the Explore phase to craft malicious libraries that they will redirect the target to leverage. These malicious libraries could have the same APIs as the legitimate library and additional malicious code.:TECHNIQUE:The attacker monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the attacker can delay the operations by using sleep(2) and usleep() to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect the access to libraries to the malicious libraries] The attacker redirects the target to the malicious libraries they crafted in the Experiment phase. The attacker will be able to force the targeted application to execute arbitrary code when the application attempts to access the legitimate libraries.:TECHNIQUE:The attacker modifies the entries in the configuration files pointing to the malicious libraries they crafted.:TECHNIQUE:The attacker leverages symlink/timing issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-132.:TECHNIQUE:The attacker leverages file search path order issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-38.::","::Attacker has a mechanism to place its malicious libraries in the needed location on the file system.::","::SKILL:Ability to create a malicious library.:LEVEL:Medium::","","","","::Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected::Design: Sign system DLLs so that unauthorized DLLs can be detected.::","::For instance, an attacker with access to the file system may place a malicious ntshrui.dll in the C:Windows directory. This DLL normally resides in the System32 folder. Process explorer.exe which also resides in C:Windows, upon trying to load the ntshrui.dll from the System32 folder will actually load the DLL supplied by the attacker simply because of the preferential search order. Since the attacker has placed its malicious ntshrui.dll in the same directory as the loading explorer.exe process, the DLL supplied by the attacker will be found first and thus loaded in lieu of the legitimate DLL. Since explorer.exe is loaded during the boot cycle, the attackers' malware is guaranteed to execute.::macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence. A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level.::","::427::","TAXONOMY NAME:ATTACK:ENTRY ID:1574.001:ENTRY NAME:Hijack Execution Flow:DLL search order hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.004:ENTRY NAME:Hijack Execution Flow: Dylib Hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.008:ENTRY NAME:Hijack Execution Flow: Path Interception by Search Order Hijacking::","",
472,"Browser Fingerprinting",Detailed,Draft,"An attacker carefully crafts small snippets of Java Script to efficiently detect the type of browser the potential victim is using. Many web-based attacks need prior knowledge of the web browser including the version of browser to ensure successful exploitation of a vulnerability. Having this knowledge allows an attacker to target the victim with attacks that specifically exploit known or zero day weaknesses in the type and version of the browser used by the victim. Automating this process via Java Script as a part of the same delivery system used to exploit the browser is considered more efficient as the attacker can supply a browser fingerprinting method and integrate it with exploit code, all contained in Java Script and in response to the same web page request by the browser.","",,Low,"::NATURE:ChildOf:CAPEC ID:541::","","::Victim's browser visits a website that contains attacker's Java ScriptJava Script is not disabled in the victim's browser::","","","","","::Configuration: Disable Java Script in the browser::","::The following code snippets can be used to detect various browsers: Firefox 2/3 FF=/a/[-1]=='a' Firefox 3 FF3=(function x(){})[-5]=='x' Firefox 2 FF2=(function x(){})[-6]=='x' IE IE='v'=='v' Safari Saf=/a/.__proto__=='//' Chrome Chr=/source/.test((/a/.toString+'')) Opera Op=/^function (/.test([].sort)::","::200::","","",
473,"Signature Spoof",Standard,Draft,"An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.","",,,"::NATURE:ChildOf:CAPEC ID:151::","","::The victim or victim system is dependent upon a cryptographic signature-based verification system for validation of one or more security events or actions.::The validation can be bypassed via an attacker-provided signature that makes it appear that the legitimate authoritative or reputable source provided the signature.::","::SKILL:Technical understanding of how signature verification algorithms work with data and applications:LEVEL:High::","","","::SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges::","","::An attacker provides a victim with a malicious executable disguised as a legitimate executable from an established software by signing the executable with a forged cryptographic key. The victim's operating system attempts to verify the executable by checking the signature, the signature is considered valid, and the attackers' malicious executable runs.::An attacker exploits weaknesses in a cryptographic algorithm to that allow a private key for a legitimate software vendor to be reconstructed, attacker-created malicious software is cryptographically signed with the reconstructed key, and is installed by the victim operating system disguised as a legitimate software update from the software vendor.::","::20::327::290::","TAXONOMY NAME:ATTACK:ENTRY ID:1036.001:ENTRY NAME:Masquerading: Invalid Code Signature::::TAXONOMY NAME:ATTACK:ENTRY ID:1553.002:ENTRY NAME:Subvert Trust Controls: Code Signing::","",
474,"Signature Spoofing by Key Theft",Detailed,Draft,"An attacker obtains an authoritative or reputable signer's private signature key by theft and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:473::","","::An authoritative or reputable signer is storing their private signature key with insufficient protection.::","::SKILL:Knowledge of common location methods and access methods to sensitive data:LEVEL:Low::SKILL:Ability to compromise systems containing sensitive data:LEVEL:High::","","","","::Restrict access to private keys from non-supervisory accounts::Restrict access to administrative personnel and processes only::Ensure all remote methods are secured::Ensure all services are patched and up to date::","","::522::","TAXONOMY NAME:ATTACK:ENTRY ID:1552.004:ENTRY NAME:Unsecured Credentials: Private Keys::","",
475,"Signature Spoofing by Improper Validation",Detailed,Draft,"An adversary exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key.","",Low,High,"::NATURE:ChildOf:CAPEC ID:473::NATURE:CanPrecede:CAPEC ID:542::","","::Recipient is using a weak cryptographic signature verification algorithm or a weak implementation of a cryptographic signature verification algorithm, or the configuration of the recipient's application accepts the use of keys generated using cryptographically weak signature verification algorithms.::","::SKILL:Cryptanalysis of signature verification algorithm:LEVEL:High::SKILL:Reverse engineering and cryptanalysis of signature verification algorithm implementation:LEVEL:High::","","","","::Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines.::","::The Windows CryptoAPI (Crypt32.dll) was shown to be vulnerable to signature spoofing by failing to properly validate Elliptic Curve Cryptography (ECC) certificates. If the CryptoAPI's signature validator allows the specification of a nonstandard base point (G): An adversary can create a custom ECDSA certificate with an elliptic curve (ECC) signature that appears to match a known standard curve, like P-256 that includes a public key for an existing known trusted certificate authority, but which was in fact not signed by that certificate authority. Windows checks the public key and other curve parameters, but not the (bespoke adversary-supplied) base point generator (G) parameter constant which actually generated the curve [REF-562]. Exploiting this vulnerability allows the adversary to leverage a spoofed certificate to dupe trusted network connections and deliver/execute malicious code, while appearing as legitimately trusted entity [REF-563]. This ultimately tricks the victim into believing the malicious website or executable is legitimate and originates from a properly verified source. See also: CVE-2020-0601::","::347::327::295::","","",
476,"Signature Spoofing by Misrepresentation",Detailed,Draft,"An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.","",Low,High,"::NATURE:ChildOf:CAPEC ID:473::","","::Recipient is using signature verification software that does not clearly indicate potential homographs in the signer identity.Recipient is using signature verification software that contains a parsing vulnerability, or allows control characters in the signer identity field, such that a signature is mistakenly displayed as valid and from a known or authoritative signer.::","::SKILL:Attacker needs to understand the layout and composition of data blobs used by the target application.:LEVEL:High::SKILL:To discover a specific vulnerability, attacker needs to reverse engineer signature parsing, signature verification and signer representation code.:LEVEL:High::SKILL:Attacker may be required to create malformed data blobs and know how to insert them in a location that the recipient will visit.:LEVEL:High::","","","","::Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.::","","::290::","","",
477,"Signature Spoofing by Mixing Signed and Unsigned Content",Detailed,Draft,"An attacker exploits the underlying complexity of a data structure that allows for both signed and unsigned content, to cause unsigned data to be processed as though it were signed data.","",Low,High,"::NATURE:ChildOf:CAPEC ID:473::","","::Signer and recipient are using complex data storage structures that allow for a mix between signed and unsigned data::Recipient is using signature verification software that does not maintain separation between signed and unsigned data once the signature has been verified.::","::SKILL:The attacker may need to continuously monitor a stream of signed data, waiting for an exploitable message to appear.:LEVEL:High::SKILL:Attacker must be able to create malformed data blobs and know how to insert them in a location that the recipient will visit.:LEVEL:High::","","","","::Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.::","","::693::311::319::","","",
478,"Modification of Windows Service Configuration",Detailed,Usable,"An adversary exploits a weakness in access control to modify the execution parameters of a Windows service. The goal of this attack is to execute a malicious binary in place of an existing service.","",Low,High,"::NATURE:ChildOf:CAPEC ID:203::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target system] The adversary must first determine the system they wish to modify the registry of. This needs to be a windows machine as this attack only works on the windows registry.::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain access to the system] The adversary needs to gain access to the system in some way so that they can modify the windows registry.:TECHNIQUE:Gain physical access to a system either through shoulder surfing a password or accessing a system that is left unlocked.:TECHNIQUE:Gain remote access to a system through a variety of means.::STEP:3:PHASE:Exploit:DESCRIPTION:[Modify windows registry] The adversary will modify the windows registry by changing the configuration settings for a service. Specifically, the adversary will change the path settings to define a path to a malicious binary to be executed.::","::The adversary must have the capability to write to the Windows Registry on the targeted system.::","","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Integrity:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:By altering specific configuration settings for the service, the adversary could run arbitrary code to be executed.::","::Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.::","","::284::","TAXONOMY NAME:ATTACK:ENTRY ID:1574.011:ENTRY NAME:Hijack Execution Flow:Service Registry Permissions Weakness::::TAXONOMY NAME:ATTACK:ENTRY ID:1543.003:ENTRY NAME:Create or Modify System Process:Windows Service::","",
479,"Malicious Root Certificate",Detailed,Stable,"An adversary exploits a weakness in authorization and installs a new root certificate on a compromised system. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.","",Low,Low,"::NATURE:ChildOf:CAPEC ID:473::","","::The adversary must have the ability to create a new root certificate.::","","","","","","","::284::","TAXONOMY NAME:ATTACK:ENTRY ID:1553.004:ENTRY NAME:Subvert Trust Controls:Install Root Certificate::","",
48,"Passing Local Filenames to Functions That Expect a URL",Standard,Draft,"This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.","",High,High,"::NATURE:ChildOf:CAPEC ID:212::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify web application URL inputs] Review application inputs to find those that are designed to be URLs.:TECHNIQUE:Manually navigate web site pages to identify URLs.:TECHNIQUE:Use automated tools to identify URLs.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify URL inputs allowing local access.] Execute test local commands via each URL input to determine which are successful.:TECHNIQUE:Manually execute a local command (such as 'pwd') via the URL inputs.:TECHNIQUE:Using an automated tool, test each URL input for weakness.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute malicious commands] Using the identified URL inputs that allow local command execution, execute malicious commands.:TECHNIQUE:Execute local commands via the URL input.::","::The victim's software must not differentiate between the location and type of reference passed the client software, e.g. browser::","::SKILL:Attacker identifies known local files to exploit:LEVEL:Medium::","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::","::J2EE applications frequently use .properties files to store configuration information including JDBC connections, LDAP connection strings, proxy information, system passwords and other system metadata that is valuable to attackers looking to probe the system or bypass policy enforcement points. When these files are stored in publicly accessible directories and are allowed to be read by the public user, then an attacker can list the directory identify a .properties file and simply load its contents in the browser listing its contents. A standard Hibernate properties file contains hibernate.connection.driver_class = org.postgresql.Driverhibernate.connection.url = jdbc:postgresql://localhost/mydatabasehibernate.connection.username = usernamehibernate.connection.password = passwordhibernate.c3p0.min_size=5hibernate.c3p0.max_size=20 Even if the attacker cannot write this file, there is plenty of information to leverage to gain further access.::","::241::706::","","",
480,"Escaping Virtualization",Standard,Draft,"An adversary gains access to an application, service, or device with the privileges of an authorized or privileged user by escaping the confines of a virtualized environment. The adversary is then able to access resources or execute unauthorized code within the host environment, generally with the privileges of the user running the virtualized process. Successfully executing an attack of this type is often the first step in executing more complex attacks.","",Low,Very High,"::NATURE:ChildOf:CAPEC ID:115::","::STEP:1:PHASE:Explore:DESCRIPTION:[Probing] The adversary probes the target application, service, or device to find a possible weakness that would allow escaping the virtualized environment.:TECHNIQUE:Probing applications, services, or devices for virtualization weaknesses.::STEP:2:PHASE:Experiment:DESCRIPTION:[Verify the exploitable security weaknesses] Using the found weakness, the adversary attempts to escape the virtualized environment.:TECHNIQUE:Using an application weakness to escape a virtualized environment::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute more complex attacks] Once outside of the virtualized environment, the adversary attempts to perform other more complex attacks such as accessing system resources or executing unauthorized code within the host environment.:TECHNIQUE:Executing complex attacks when given higher permissions by escaping a virtualized environment::","","","","","::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:TECHNICAL IMPACT:Gain Privileges::","::Ensure virtualization software is current and up-to-date.::Abide by the least privilege principle to avoid assigning users more privileges than necessary.::","","::693::","TAXONOMY NAME:ATTACK:ENTRY ID:1611:ENTRY NAME:Escape to Host::","",