CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes
1085,Invokable Control Element with Excessive Volume of Commented-out Code,Base,Incomplete,"A function, method, procedure, etc. contains an excessive amount of code that has been commented out within its body.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of excessive volume may vary for each product or developer, CISQ recommends a default threshold of 2% of commented code.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-6::,,
1086,Class with Excessive Number of Child Classes,Base,Incomplete,A class contains an unnecessarily large number of children.,"This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of large number of children may vary for each product or developer, CISQ recommends a default maximum of 10 child classes.",::NATURE:ChildOf:CWE ID:1093:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-18::,,
1087,Class with Virtual Method without a Virtual Destructor,Base,Incomplete,"A class contains a virtual method, but the method does not have an associated virtual destructor.","This issue can prevent the product from running reliably, e.g. due to undefined behavior. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Reliability::,,,,,,::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-15::,,
1088,Synchronous Access of Remote Resource without Timeout,Base,Incomplete,"The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite.","This issue can prevent the product from running reliably, since an outage for the remote resource can cause the product to hang. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:821:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Reliability::,,,,,,::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-19::,,
1089,Large Data Table with Excessive Number of Indices,Base,Incomplete,The product uses a large data table that contains an excessively large number of indices.,"This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of large data table and excessively large number of indices may vary for each product or developer, CISQ recommends a default threshold of 1000000 rows for a large table and a default threshold of 3 indices.",::NATURE:ChildOf:CWE ID:405:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Performance::,,,,,,::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-6::,,
1090,Method Containing Access of a Member Element from Another Class,Base,Incomplete,A method for a class performs an operation that directly accesses a member element from another class.,"This issue suggests poor encapsulation and makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-16::,,
1091,Use of Object without Invoking Destructor Method,Base,Incomplete,The product contains a method that accesses an object but does not later invoke the element's associated finalize/destructor method.,"This issue can make the product perform more slowly by retaining memory and/or other resources longer than necessary. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:772:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Performance::,,,,,,::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-15::,,
1092,Use of Same Invokable Control Element in Multiple Architectural Layers,Base,Incomplete,The product uses the same control element across multiple architectural layers.,"This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-10::,,
1094,Excessive Index Range Scan for a Data Resource,Base,Incomplete,"The product contains an index range scan for a large data table, but the scan can cover a large number of rows.","This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of large data table and excessive index range may vary for each product or developer, CISQ recommends a threshold of 1000000 table rows and a threshold of 10 for the index range.",::NATURE:ChildOf:CWE ID:405:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Performance::,,,,,,::TAXONOMY NAME:OMG ASCPEM:ENTRY ID:ASCPEM-PRF-7::,,
1095,Loop Condition Value Update within the Loop,Base,Incomplete,The product uses a loop with a control flow condition based on a value that is updated within the body of the loop.,"This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-5::,,
1097,Persistent Storable Data Element without Associated Comparison Control Element,Base,Incomplete,The product uses a storable data element that does not have all of the associated functions or methods that are necessary to support comparison.,"For example, with Java, a class that is made persistent requires both hashCode() and equals() methods to be defined. This issue can prevent the product from running reliably, due to incorrect or unexpected comparison results. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:595:VIEW ID:1305:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Reliability::,,,,,,::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-RLB-4::,,
1099,Inconsistent Naming Conventions for Identifiers,Base,Incomplete,"The product's code, documentation, or other artifacts do not consistently use the same naming conventions for variables, callables, groups of related callables, I/O capabilities, data types, file names, or similar types of elements.","This issue makes it more difficult to understand and/or maintain the product due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,,,,,,,,,
1100,Insufficient Isolation of System-Dependent Functions,Base,Incomplete,The product or code does not isolate system-dependent functionality into separate standalone modules.,"This issue makes it more difficult to maintain and/or port the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,,,
1101,Reliance on Runtime Component in Generated Code,Base,Incomplete,The product uses automatically-generated code that cannot be executed without a specific runtime support component.,"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,,,
1102,Reliance on Machine-Dependent Data Representation,Base,Incomplete,"The code uses a data representation that relies on low-level data representation or constructs that may vary across different processors, physical machines, OSes, or other physical components.","This issue makes it more difficult to maintain and/or port the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:758:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:1105:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,,,
1103,Use of Platform-Dependent Third Party Components,Base,Incomplete,The product relies on third-party components that do not provide equivalent functionality across all desirable platforms.,"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:758:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,,,
1104,Use of Unmaintained Third Party Components,Base,Incomplete,The product relies on third-party components that are not actively supported or maintained by the original developer or a trusted proxy for the original developer.,"Reliance on components that are no longer maintained can make it difficult or impossible to fix significant bugs, vulnerabilities, or quality issues. In effect, unmaintained code can become obsolete. This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1357:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,,,
1105,Insufficient Encapsulation of Machine-Dependent Functionality,Base,Incomplete,"The product or code uses machine-dependent functionality, but it does not sufficiently encapsulate or isolate this functionality from the rest of the code.","This issue makes it more difficult to port or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:758:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:1061:VIEW ID:1000::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,,,
1106,Insufficient Use of Symbolic Constants,Base,Incomplete,"The source code uses literal constants that may need to change or evolve over time, instead of using symbolic constants.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,,,
1107,Insufficient Isolation of Symbolic Constant Definitions,Base,Incomplete,"The source code uses symbolic constants, but it does not sufficiently place the definitions of these constants into a more centralized or isolated location.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,,,
1108,Excessive Reliance on Global Variables,Base,Incomplete,"The code is structured in a way that relies too much on using or setting global variables throughout various points in the code, instead of preserving the associated information in a narrower, more local context.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1076:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,,,
1109,Use of Same Variable for Multiple Purposes,Base,Incomplete,"The code contains a callable, block, or other code element in which the same variable is used to control more than one unique task or store more than one instance of data.","Use of the same variable for multiple purposes can make it more difficult for a person to read or understand the code, potentially hiding other quality issues. This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,,,
1110,Incomplete Design Documentation,Base,Incomplete,"The product's design documentation does not adequately describe control flow, data flow, system initialization, relationships between tasks, components, rationales, or other important aspects of the design.",,::NATURE:ChildOf:CWE ID:1059:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,,,,,,,,,,,,,,
1111,Incomplete I/O Documentation,Base,Incomplete,"The product's documentation does not adequately define inputs, outputs, or system/software interfaces.",,::NATURE:ChildOf:CWE ID:1059:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,,,,,,,,,
1112,Incomplete Documentation of Program Execution,Base,Incomplete,The document does not fully define all mechanisms that are used to control or influence how product-specific programs are executed.,"This includes environmental variables, configuration files, registry keys, command-line switches or options, or system settings.",::NATURE:ChildOf:CWE ID:1059:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,,,,,,,,,
1113,Inappropriate Comment Style,Base,Incomplete,The source code uses comment styles or formats that are inconsistent or do not follow expected standards for the product.,"This issue makes it more difficult to maintain the product due to insufficient legibility, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,,,,,,,,,
1114,Inappropriate Whitespace Style,Base,Incomplete,The source code contains whitespace that is inconsistent across the code or does not follow expected standards for the product.,"This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,,,,,,,,,
1115,Source Code Element without Standard Prologue,Base,Incomplete,The source code contains elements such as source files that do not consistently provide a prologue or header that has been standardized for the project.,"The lack of a prologue can make it more difficult to accurately and quickly understand the associated code. Standard prologues or headers may contain information such as module name, version number, author, date, purpose, function, assumptions, limitations, accuracy considerations, etc. This issue makes it more difficult to maintain the product due to insufficient analyzability, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,,,,,,,,,
1116,Inaccurate Comments,Base,Incomplete,The source code contains comments that do not accurately describe or explain aspects of the portion of the code with which the comment is associated.,"When a comment does not accurately reflect the associated code elements, this can introduce confusion to a reviewer (due to inconsistencies) or make it more difficult and less efficient to validate that the code is implementing the intended behavior correctly. This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,::PHASE:Implementation:DESCRIPTION:Verify that each comment accurately reflects what is intended to happen during execution of the code.::,,,,,,
1117,Callable with Insufficient Behavioral Summary,Base,Incomplete,"The code contains a function or method whose signature and/or associated inline documentation does not sufficiently describe the callable's inputs, outputs, side effects, assumptions, or return codes.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,,,
1118,Insufficient Documentation of Error Handling Techniques,Base,Incomplete,"The documentation does not sufficiently describe the techniques that are used for error handling, exception processing, or similar mechanisms.","Documentation may need to cover error handling techniques at multiple layers, such as module, executable, compilable code unit, or callable.",::NATURE:ChildOf:CWE ID:1059:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,,,,,,,,,
1119,Excessive Use of Unconditional Branching,Base,Incomplete,The code uses too many unconditional branches (such as goto).,"This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,,,
1121,Excessive McCabe Cyclomatic Complexity,Base,Incomplete,The code contains McCabe cyclomatic complexity that exceeds a desirable maximum.,"This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,,,,,,,::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-11::,,
1122,Excessive Halstead Complexity,Base,Incomplete,The code is structured in a way that a Halstead complexity measure exceeds a desirable maximum.,"A variety of Halstead complexity measures exist, such as program vocabulary size or volume. This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,,,
1123,Excessive Use of Self-Modifying Code,Base,Incomplete,The product uses too much self-modifying code.,"This issue makes it more difficult to understand or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,,,
1124,Excessively Deep Nesting,Base,Incomplete,The code contains a callable or other code grouping in which the nesting / branching is too deep.,"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,,,
1125,Excessive Attack Surface,Base,Incomplete,The product has an attack surface whose quantitative measurement exceeds a desirable maximum.,"Originating from software security, an attack surface measure typically reflects the number of input points and output points that can be utilized by an untrusted party, i.e. a potential attacker. A larger attack surface provides more places to attack, and more opportunities for developers to introduce weaknesses. In some cases, this measure may reflect other aspects of quality besides security; e.g., a product with many inputs and outputs may require a large number of tests in order to improve code coverage.",::NATURE:ChildOf:CWE ID:1120:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,,,,,,,,,
1126,Declaration of Variable with Unnecessarily Wide Scope,Base,Incomplete,"The source code declares a variable in one scope, but the variable is only used within a narrower scope.","This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,,,
1127,Compilation with Insufficient Warnings or Errors,Base,Incomplete,"The code is compiled without sufficient warnings enabled, which may prevent the detection of subtle bugs or quality issues.","This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,,,,::PHASE:Build and Compilation::,,,::SCOPE:Other:IMPACT:Reduce Maintainability::,,,,,,,,
1173,Improper Use of Validation Framework,Base,Draft,"The product does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.","Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the product. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework.",::NATURE:ChildOf:CWE ID:20:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Indirect::,::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,,,::PHASE:Architecture and Design:NOTE:This weakness may occur when software designers choose to not leverage input validation frameworks provided by the source language.::PHASE:Implementation:NOTE:This weakness may occur when developers do not correctly use a provided input validation framework.::,,,"::SCOPE:Integrity:IMPACT:Unexpected State:NOTE:Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.::","::METHOD:Automated Static Analysis:DESCRIPTION:Some instances of improper input validation can be detected using automated static analysis. A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present. Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.::",::PHASE:Implementation:DESCRIPTION:Properly use provided input validation frameworks.::,,,,,,
1188,Insecure Default Initialization of Resource,Base,Incomplete,"The product initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.","Developers often choose default values that leave the product as open and easy to use as possible out-of-the-box, under the assumption that the administrator can (or should) change the default value. However, this ease-of-use comes at a cost when the default is insecure and the administrator does not change it.",::NATURE:ChildOf:CWE ID:665:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:665:VIEW ID:1003:ORDINAL:Primary::,::ORDINALITY:Primary::,,,,,,,,,,,,,,::665::,"::TYPE:Maintenance:NOTE:This entry improves organization of concepts under initialization. The typical CWE model is to cover Missing and Incorrect behaviors. Arguably, this entry could be named as Incorrect instead of Insecure. This might be changed in the near future.::"
1189,Improper Isolation of Shared Resources on System-on-a-Chip (SoC),Base,Stable,The System-On-a-Chip (SoC) does not properly isolate shared resources between trusted and untrusted agents.,"A System-On-a-Chip (SoC) has a lot of functionality, but it may have a limited number of pins or pads. A pin can only perform one function at a time. However, it can be configured to perform multiple different functions. This technique is called pin multiplexing. Similarly, several resources on the chip may be shared to multiplex and support different features or functions. When such resources are shared between trusted and untrusted agents, untrusted agents may be able to access the assets intended to be accessed only by the trusted agents.",::NATURE:ChildOf:CWE ID:653:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:668:VIEW ID:1000::NATURE:PeerOf:CWE ID:1331:VIEW ID:1000::,::ORDINALITY:Primary::,::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,,,::PHASE:Architecture and Design::PHASE:Implementation::,,,"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:If resources being used by a trusted user are shared with an untrusted user, the untrusted user may be able to modify the functionality of the shared resource of the trusted user.::SCOPE:Integrity:IMPACT:Quality Degradation:NOTE:The functionality of the shared resource may be intentionally degraded.::","::METHOD:Automated Dynamic Analysis:DESCRIPTION:Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.:EFFECTIVENESS:High::","::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:When sharing resources, avoid mixing agents of varying trust levels. Untrusted agents should not share resources with trusted agents.::","::REFERENCE:CVE-2019-6260:DESCRIPTION:Baseboard Management Controller (BMC) device implements Advanced High-performance Bus (AHB) bridges that do not require authentication for arbitrary read and write access to the BMC's physical address space from the host, and possibly the network [REF-1138].:LINK:https://www.cve.org/CVERecord?id=CVE-2019-6260::",,,,::124::,
1190,DMA Device Enabled Too Early in Boot Phase,Base,Draft,"The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.","DMA is included in a number of devices because it allows data transfer between the computer and the connected device, using direct hardware access to read or write directly to main memory without any OS interaction. An attacker could exploit this to access secrets. Several virtualization-based mitigations have been introduced to thwart DMA attacks. These are usually configured/setup during boot time. However, certain IPs that are powered up before boot is complete (known as early boot IPs) may be DMA capable. Such IPs, if not trusted, could launch DMA attacks and gain access to assets that should otherwise be protected.",::NATURE:ChildOf:CWE ID:696:VIEW ID:1000:ORDINAL:Primary::,,::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,,,::PHASE:Architecture and Design::,,,::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:IMPACT:Modify Memory:LIKELIHOOD:High:NOTE:DMA devices have direct write access to main memory and due to time of attack will be able to bypass OS or Bootloader access control.::,,::PHASE:Architecture and Design:DESCRIPTION:Utilize an IOMMU to orchestrate IO access from the start of the boot process.::,,,,,::180::,
1191,On-Chip Debug and Test Interface With Improper Access Control,Base,Stable,The chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.,"A device's internal information may be accessed through a scan chain of interconnected internal registers, usually through a JTAG interface. The JTAG interface provides access to these registers in a serial fashion in the form of a scan chain for the purposes of debugging programs running on a device. Since almost all information contained within a device may be accessed over this interface, device manufacturers typically insert some form of authentication and authorization to prevent unintended use of this sensitive information. This mechanism is implemented in addition to on-chip protections that are already present. If authorization, authentication, or some other form of access control is not implemented or not implemented correctly, a user may be able to bypass on-chip protection mechanisms through the debug interface. Sometimes, designers choose not to expose the debug pins on the motherboard. Instead, they choose to hide these pins in the intermediate layers of the board. This is primarily done to work around the lack of debug authorization inside the chip. In such a scenario (without debug authorization), when the debug interface is exposed, chip internals are accessible to an attacker.",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,::ORDINALITY:Primary::,::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,,,::PHASE:Architecture and Design::PHASE:Implementation::,,,::SCOPE:Confidentiality:IMPACT:Read Application Data:LIKELIHOOD:High::SCOPE:Confidentiality:IMPACT:Read Memory:LIKELIHOOD:High::SCOPE:Authorization:IMPACT:Execute Unauthorized Code or Commands:LIKELIHOOD:High::SCOPE:Integrity:IMPACT:Modify Memory:LIKELIHOOD:High::SCOPE:Integrity:IMPACT:Modify Application Data:LIKELIHOOD:High::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:LIKELIHOOD:High::,::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:Authentication and authorization of debug and test interfaces should be part of the architecture and design review process. Withholding of private register documentation from the debug and test interface public specification (Security by obscurity) should not be considered as sufficient security.::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:Dynamic tests should be done in the pre-silicon and post-silicon stages to verify that the debug and test interfaces are not open by default.::METHOD:Fuzzing:DESCRIPTION:Tests that fuzz Debug and Test Interfaces should ensure that no access without appropriate authentication and authorization is possible.:EFFECTIVENESS:Moderate::,"::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:If feasible, the manufacturer should disable the JTAG interface or implement authentication and authorization for the JTAG interface. If authentication logic is added, it should be resistant to timing attacks. Security-sensitive data stored in registers, such as keys, etc. should be cleared when entering debug mode.:EFFECTIVENESS:High::","::REFERENCE:CVE-2019-18827:DESCRIPTION:chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys:LINK:https://www.cve.org/CVERecord?id=CVE-2019-18827::",,,,::1::180::,"::TYPE:Relationship:NOTE:CWE-1191 and CWE-1244 both involve physical debug access, but the weaknesses are different. CWE-1191 is effectively about missing authorization for a debug interface, i.e. JTAG. CWE-1244 is about providing internal assets with the wrong debug access level, exposing the asset to untrusted debug agents.::"
1192,"System-on-Chip (SoC) Using Components without Unique, Immutable Identifiers",Base,Draft,"The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components.","A System-on-Chip (SoC) comprises several components (IP) with varied trust requirements. It is required that each IP is identified uniquely and should distinguish itself from other entities in the SoC without any ambiguity. The unique secured identity is required for various purposes. Most of the time the identity is used to route a transaction or perform certain actions, including resetting, retrieving a sensitive information, and acting upon or on behalf of something else. There are several variants of this weakness: A missing identifier is when the SoC does not define any mechanism to uniquely identify the IP. An insufficient identifier might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended. A misconfigured mechanism occurs when a mechanism is available but not implemented correctly. An ignored identifier occurs when the SoC/IP has not applied any policies or does not act upon the identifier securely.",::NATURE:ChildOf:CWE ID:657:VIEW ID:1000:ORDINAL:Primary::,,::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,,,::PHASE:Architecture and Design::PHASE:Implementation::PHASE:Operation::,,,::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:LIKELIHOOD:High::,,"::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Every identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization.::",,,,,::113::,
1193,Power-On of Untrusted Execution Core Before Enabling Fabric Access Control,Base,Draft,The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.,"After initial reset, System-on-Chip (SoC) fabric access controls and other security features need to be programmed by trusted firmware as part of the boot sequence. If untrusted IPs or peripheral microcontrollers are enabled first, then the untrusted component can master transactions on the hardware bus and target memory or other assets to compromise the SoC boot firmware.",::NATURE:ChildOf:CWE ID:696:VIEW ID:1000:ORDINAL:Primary::,,,,,,,,::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:LIKELIHOOD:High:NOTE:An untrusted component can master transactions on the HW bus and target memory or other assets to compromise the SoC boot firmware.::,,::PHASE:Architecture and Design:DESCRIPTION:The boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware.::,,,,,::1::180::,
1204,Generation of Weak Initialization Vector (IV),Base,Incomplete,"The product uses a cryptographic primitive that uses an Initialization Vector (IV), but the product does not generate IVs that are sufficiently unpredictable or unique according to the expected cryptographic requirements for that primitive.","By design, some cryptographic primitives (such as block ciphers) require that IVs must have certain properties for the uniqueness and/or unpredictability of an IV. Primitives may vary in how important these properties are. If these properties are not maintained, e.g. by a bug in the code, then the cryptography may be weakened or broken by attacking the IVs themselves.",::NATURE:ChildOf:CWE ID:330:VIEW ID:1000:ORDINAL:Primary::,,::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,,,::PHASE:Implementation::PHASE:Architecture and Design::,,,"::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:If the IV is not properly initialized, data that is encrypted can be compromised and information about the data can be leaked. See [REF-1179].::",,"::PHASE:Implementation:DESCRIPTION:Different cipher modes have different requirements for their IVs. When choosing and implementing a mode, it is important to understand those requirements in order to keep security guarantees intact. Generally, it is safest to generate a random IV, since it will be both unpredictable and have a very low chance of being non-unique. IVs do not have to be kept secret, so if generating duplicate IVs is a concern, a list of already-used IVs can be kept and checked against. NIST offers recommendations on generation of IVs for modes of which they have approved. These include options for when random IVs are not practical. For CBC, CFB, and OFB, see [REF-1175]; for GCM, see [REF-1178].::","::REFERENCE:CVE-2020-1472:DESCRIPTION:ZeroLogon vulnerability - use of a static IV of all zeroes in AES-CFB8 mode:LINK:https://www.cve.org/CVERecord?id=CVE-2020-1472::REFERENCE:CVE-2011-3389:DESCRIPTION:BEAST attack in SSL 3.0 / TLS 1.0. In CBC mode, chained initialization vectors are non-random, allowing decryption of HTTPS traffic using a chosen plaintext attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2011-3389::REFERENCE:CVE-2001-0161:DESCRIPTION:wireless router does not use 6 of the 24 bits for WEP encryption, making it easier for attackers to decrypt traffic:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0161::REFERENCE:CVE-2001-0160:DESCRIPTION:WEP card generates predictable IV values, making it easier for attackers to decrypt traffic:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0160::REFERENCE:CVE-2017-3225:DESCRIPTION:device bootloader uses a zero initialization vector during AES-CBC:LINK:https://www.cve.org/CVERecord?id=CVE-2017-3225::REFERENCE:CVE-2016-6485:DESCRIPTION:crypto framework uses PHP rand function - which is not cryptographically secure - for an initialization vector:LINK:https://www.cve.org/CVERecord?id=CVE-2016-6485::REFERENCE:CVE-2014-5386:DESCRIPTION:encryption routine does not seed the random number generator, causing the same initialization vector to be generated repeatedly:LINK:https://www.cve.org/CVERecord?id=CVE-2014-5386::REFERENCE:CVE-2020-5408:DESCRIPTION:encryption functionality in an authentication framework uses a fixed null IV with CBC mode, allowing attackers to decrypt traffic in applications that use this functionality:LINK:https://www.cve.org/CVERecord?id=CVE-2020-5408::REFERENCE:CVE-2017-17704:DESCRIPTION:messages for a door-unlocking product use a fixed IV in CBC mode, which is the same after each restart:LINK:https://www.cve.org/CVERecord?id=CVE-2017-17704::REFERENCE:CVE-2017-11133:DESCRIPTION:application uses AES in CBC mode, but the pseudo-random secret and IV are generated using math.random, which is not cryptographically strong.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-11133::REFERENCE:CVE-2007-3528:DESCRIPTION:Blowfish-CBC implementation constructs an IV where each byte is calculated modulo 8 instead of modulo 256, resulting in less than 12 bits for the effective IV length, and less than 4096 possible IV values.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-3528::",::Cryptography::,,,::20::97::,"::TYPE:Maintenance:NOTE:As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, randomness is used heavily. However, within cryptography, entropy is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios.::"
1209,Failure to Disable Reserved Bits,Base,Incomplete,"The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design. However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state.","Reserved bits are labeled as such so they can be allocated for a later purpose. They are not to do anything in the current design. However, designers might want to use these bits to debug or control/configure a future capability to help minimize time to market (TTM). If the logic being controlled by these bits is still enabled in production, an adversary could use the logic to induce unwanted/unsupported behavior in the hardware.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::,,::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:System on Chip:TECHNOLOGY PREVALENCE:Undetermined::,,,"::PHASE:Architecture and Design:NOTE:The Designer and Implementer have to make a conscious choice to do this::PHASE:Implementation:NOTE:The Designer and Implementer have to make a conscious choice to do this::PHASE:Documentation:NOTE:If documentation labels anything for future use, reserved, or the like, such labeling could indicate to an attacker a potential attack point::",,,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-Repudiation:IMPACT:Varies by Context:NOTE:This type of weakness all depends on the capabilities of the logic being controlled or configured by the reserved bits::,,"::PHASE:Architecture and Design Implementation:DESCRIPTION:Include a feature to disable reserved bits.::PHASE:Integration:DESCRIPTION:Any writes to these reserve bits are blocked (e.g., ignored, access-protected, etc.), or an exception can be asserted.::",,,,,::121::,
1220,Insufficient Granularity of Access Control,Base,Incomplete,"The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.","Integrated circuits and hardware engines can expose accesses to assets (device configuration, keys, etc.) to trusted firmware or a software module (commonly set by BIOS/bootloader). This access is typically access-controlled. Upon a power reset, the hardware or system usually starts with default values in registers, and the trusted firmware (Boot firmware) configures the necessary access-control protection. A common weakness that can exist in such protection schemes is that access controls or policies are not granular enough. This condition allows agents beyond trusted agents to access assets and could lead to a loss of functionality or the ability to set up the device securely. This further results in security risks from leaked, sensitive, key material to modification of device configuration.",::NATURE:ChildOf:CWE ID:284:VIEW ID:1000:ORDINAL:Primary::,,::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,,,::PHASE:Architecture and Design:NOTE:Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.::PHASE:Implementation:NOTE:Such issues could be introduced during hardware implementation and identified later during Testing or System Configuration phases.::,,,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity:IMPACT:Bypass Protection Mechanism:IMPACT:Other:LIKELIHOOD:High::,,"::PHASE:Architecture and Design Implementation Testing:DESCRIPTION:Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.:EFFECTIVENESS:High::",,,,,::1::180::,
1221,Incorrect Register Defaults or Module Parameters,Base,Incomplete,Hardware description language code incorrectly defines register defaults or hardware IP parameters to insecure values.,"Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. Hardware descriptive languages also support definition of parameter variables, which can be defined in code during instantiation of the hardware IP module. Such parameters are generally used to configure a specific instance of a hardware IP in the design. The system security settings of a hardware design can be affected by incorrectly defined default values or IP parameters. The hardware IP would be in an insecure state at power reset, and this can be exposed or exploited by untrusted software running on the system. Both register defaults and parameters are hardcoded values, which cannot be changed using software or firmware patches but must be changed in hardware silicon. Thus, such security issues are considerably more difficult to address later in the lifecycle. Hardware designs can have a large number of such parameters and register defaults settings, and it is important to have design tool support to check these settings in an automated way and be able to identify which settings are security sensitive.",::NATURE:ChildOf:CWE ID:665:VIEW ID:1000:ORDINAL:Primary::,,::LANGUAGE NAME:Verilog:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:VHDL:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,,,"::PHASE:Implementation:NOTE:Such issues could be introduced during implementation of hardware design, since IP parameters and defaults are defined in HDL code and identified later during Testing or System Configuration phases.::",,,"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Access Control:IMPACT:Varies by Context:NOTE:Degradation of system functionality, or loss of access control enforcement can occur.::",,"::PHASE:Architecture and Design:DESCRIPTION:During hardware design, all the system parameters and register defaults must be reviewed to identify security sensitive settings.::PHASE:Implementation:DESCRIPTION:The default values of these security sensitive settings need to be defined as part of the design review phase.::PHASE:Testing:DESCRIPTION:Testing phase should use automated tools to test that values are configured per design specifications.::",,,,,::166::,
