'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
1,"Accessing Functionality Not Properly Constrained by ACLs",Standard,Draft,"In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.","",High,High,"::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey] The attacker surveys the target application, possibly as a valid and authenticated user:TECHNIQUE:Spidering web sites for all available links:TECHNIQUE:Brute force guessing of resource names:TECHNIQUE:Brute force guessing of user names / credentials:TECHNIQUE:Brute force guessing of function names / actions::STEP:2:PHASE:Explore:DESCRIPTION:[Identify Functionality] At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actions:TECHNIQUE:Use the web inventory of all forms and inputs and apply attack data to those inputs.:TECHNIQUE:Use a packet sniffer to capture and record network traffic:TECHNIQUE:Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment.::STEP:3:PHASE:Experiment:DESCRIPTION:[Iterate over access capabilities] Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.:TECHNIQUE:Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters)::","::The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.::The various resources, or individual URLs, must be somehow discoverable by the attacker::The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.::","::SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::","::Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a Single front controller pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets. If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted.::","::276::285::434::693::732::1191::1193::1220::1297::1311::1314::1315::1318::1320::1321::1327::","TAXONOMY NAME:ATTACK:ENTRY ID:1574.010:ENTRY NAME:Hijack Execution Flow: ServicesFile Permissions Weakness::","",
10,"Buffer Overflow via Environment Variables",Detailed,Draft,"This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.","",High,High,"::NATURE:ChildOf:CAPEC ID:100::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. In this attack the adversary looks for an application that loads the content of an environment variable into a buffer.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.:TECHNIQUE:Change the values of environment variables thought to be used by the application to contain excessive data. If the program is loading the value of the environment variable into a buffer, this could cause a crash and an attack vector will be found.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary injects the crafted overflow content into the buffer.::","::The application uses environment variables.::An environment variable exposed to the user is vulnerable to a buffer overflow.::The vulnerable environment variable uses untrusted data.::Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.::","::SKILL:An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::","","::If the application does bound checking, it should fail when the data source is larger than the size of the destination buffer. If the application's code is well written, that failure should trigger an alert.::","::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Do not expose environment variable to the user.::Do not use untrusted data in your environment variables.::Use a language or compiler that performs automatic bounds checking::There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.::","::A buffer overflow in sccw allows local users to gain root access via the $HOME environmental variable. See also: CVE-1999-0906::A buffer overflow in the rlogin program involves its consumption of the $TERM environmental variable. See also: CVE-1999-0046::","::120::302::118::119::74::99::20::680::733::697::","TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Buffer Overflow via Environment Variables::","",
100,"Overflow Buffers",Standard,Draft,"Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:123::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.:TECHNIQUE:Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary injects the crafted overflow content into the buffer.::","::Targeted software performs buffer operations.::Targeted software inadequately performs bounds-checking on buffer operations.::Adversary has the capability to influence the input to buffer operations.::","::SKILL:In most cases, overflowing a buffer does not require advanced skills beyond the ability to notice an overflow and stuff an input variable with content.:LEVEL:Low::SKILL:In cases of directed overflows, where the motive is to divert the flow of the program or application as per the adversaries' bidding, high level skills are required. This may involve detailed knowledge of the target system architecture and kernel.:LEVEL:High::","::None: No specialized resources are required to execute this type of attack. Detecting and exploiting a buffer overflow does not require any resources beyond knowledge of and access to the target system.::","::An attack designed to leverage a buffer overflow and redirect execution as per the adversary's bidding is fairly difficult to detect. An attack aimed solely at bringing the system down is usually preceded by a barrage of long inputs that make no sense. In either case, it is likely that the adversary would have resorted to a few hit-or-miss attempts that will be recorded in the system event logs, if they exist.::","::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Use a language or compiler that performs automatic bounds checking.::Use secure functions not vulnerable to buffer overflow.::If you have to use dangerous functions, make sure that you do boundary checking.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software.::","::The most straightforward example is an application that reads in input from the user and stores it in an internal buffer but does not check that the size of the input data is less than or equal to the size of the buffer. If the user enters excessive length data, the buffer may overflow leading to the application crashing, or worse, enabling the user to cause execution of injected code.::Many web servers enforce security in web applications through the use of filter plugins. An example is the SiteMinder plugin used for authentication. An overflow in such a plugin, possibly through a long URL or redirect parameter, can allow an adversary not only to bypass the security checks but also execute arbitrary code on the target web server in the context of the user that runs the web server process.::","::120::119::131::129::805::680::","TAXONOMY NAME:WASC:ENTRY ID:07:ENTRY NAME:Buffer Overflow::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Buffer overflow attack::","",
101,"Server Side Include (SSI) Injection",Detailed,Draft,"An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.","",High,High,"::NATURE:ChildOf:CAPEC ID:253::NATURE:CanPrecede:CAPEC ID:600::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine applicability] The adversary determines whether server side includes are enabled on the target web server.:TECHNIQUE:Look for popular page file names. The attacker will look for .shtml, .shtm, .asp, .aspx, and other well-known strings in URLs to help determine whether SSI functionality is enabled.:TECHNIQUE:Fetch .htaccess file. In Apache web server installations, the .htaccess file may enable server side includes in specific locations. In those cases, the .htaccess file lives inside the directory where SSI is enabled, and is theoretically fetchable from the web server. Although most web servers deny fetching the .htaccess file, a misconfigured server will allow it. Thus, an attacker will frequently try it.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find Injection Point] Look for user controllable input, including HTTP headers, that can carry server side include directives to the web server.:TECHNIQUE:Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject SSI] Using the found injection point, the adversary sends arbitrary code to be inlcuded by the application on the server side. They may then need to view a particular page in order to have the server execute the include directive and run a command or open a file on behalf of the adversary.::","::A web server that supports server side includes and has them enabled::User controllable input that can carry include directives to the web server::","::SKILL:The attacker needs to be aware of SSI technology, determine the nature of injection and be able to craft input that results in the SSI directives being executed.:LEVEL:Medium::","::None: No specialized resources are required to execute this type of attack. Determining whether the server supports SSI does not require special tools, and nor does injecting directives that get executed. Spidering tools can make the task of finding and following links easier.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::","::Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them::All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive::Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead::","::Consider a website hosted on a server that permits Server Side Includes (SSI), such as Apache with the Options Includes directive enabled. Whenever an error occurs, the HTTP Headers along with the entire request are logged, which can then be displayed on a page that allows review of such errors. A malicious user can inject SSI directives in the HTTP Headers of a request designed to create an error. When these logs are eventually reviewed, the server parses the SSI directives and executes them.::","::97::74::20::","TAXONOMY NAME:WASC:ENTRY ID:36:ENTRY NAME:SSI Injection::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Server-Side Includes (SSI) Injection::","",
102,"Session Sidejacking",Detailed,Draft,"Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.","",High,High,"::NATURE:ChildOf:CAPEC ID:593::","::STEP:1:PHASE:Explore:DESCRIPTION:[Detect Unprotected Session Token Transfer] The attacker sniffs on the wireless network to detect unencrypted traffic that contains session tokens.:TECHNIQUE:The attacker uses a network sniffer tool like ferret or hamster to monitor the wireless traffic at a WiFi hotspot while examining it for evidence of transmittal of session tokens in unencrypted or recognizably encrypted form. An attacker applies their knowledge of the manner by which session tokens are generated and transmitted by various target systems to identify the session tokens.::STEP:2:PHASE:Experiment:DESCRIPTION:[Capture session token] The attacker uses sniffing tools to capture a session token from traffic.::STEP:3:PHASE:Experiment:DESCRIPTION:[Insert captured session token] The attacker attempts to insert a captured session token into communication with the targeted application to confirm viability for exploitation.::STEP:4:PHASE:Exploit:DESCRIPTION:[Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.::","::An attacker and the victim are both using the same WiFi network.::The victim has an active session with a target system.::The victim is not using a secure channel to communicate with the target system (e.g. SSL, VPN, etc.)::The victim initiated communication with a target system that requires transfer of the session token or the target application uses AJAX and thereby periodically rings home asynchronously using the session token::","::SKILL:Easy to use tools exist to automate this attack.:LEVEL:Low::","::A packet sniffing tool, such as wireshark, can be used to capture session information.::","","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::","::Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.::Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks.::","::The attacker and the victim are using the same WiFi public hotspot. When the victim connects to the hotspot, they has a hosted e-mail account open. This e-mail account uses AJAX on the client side which periodically asynchronously connects to the server side and transfers, amongst other things, the user's session token to the server. The communication is supposed to happen over HTTPS. However, the configuration in the public hotspot initially disallows the HTTPS connection (or any other connection) between the victim and the hosted e-mail servers because the victim first needs to register with the hotspot. The victim does so, but their e-mail client already defaulted to using a connection without HTTPS, since it was denied access the first time. Victim's session token is now flowing unencrypted between the victim's browser and the hosted e-mail servers. The attacker leverages this opportunity to capture the session token and gain access to the victim's hosted e-mail account.::","::294::522::523::319::614::","","",
103,"Clickjacking",Standard,Draft,"An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:173::","::STEP:1:PHASE:Experiment:DESCRIPTION:[Craft a clickjacking page] The adversary utilizes web page layering techniques to try to craft a malicious clickjacking page:TECHNIQUE:The adversary leveraged iframe overlay capabilities to craft a malicious clickjacking page:TECHNIQUE:The adversary leveraged Flash file overlay capabilities to craft a malicious clickjacking page:TECHNIQUE:The adversary leveraged Silverlight overlay capabilities to craft a malicious clickjacking page:TECHNIQUE:The adversary leveraged cross-frame scripting to craft a malicious clickjacking page::STEP:2:PHASE:Exploit:DESCRIPTION:[Adversary lures victim to clickjacking page] Adversary utilizes some form of temptation, misdirection or coercion to lure the victim to loading and interacting with the clickjacking page in a way that increases the chances that the victim will click in the right areas.:TECHNIQUE:Lure the victim to the malicious site by sending the victim an e-mail with a URL to the site.:TECHNIQUE:Lure the victim to the malicious site by manipulating URLs on a site trusted by the victim.:TECHNIQUE:Lure the victim to the malicious site through a cross-site scripting attack.::STEP:3:PHASE:Exploit:DESCRIPTION:[Trick victim into interacting with the clickjacking page in the desired manner] The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.:TECHNIQUE:Hide action controls over very commonly used functionality.:TECHNIQUE:Hide action controls over very psychologically tempting content.::","::The victim is communicating with the target application via a web based UI and not a thick client::The victim's browser security policies allow at least one of the following JavaScript, Flash, iFrames, ActiveX, or CSS.::The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser)::The victim has an active session with the target system.::The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system::","::SKILL:Crafting the proper malicious site and luring the victim to this site are not trivial tasks.:LEVEL:High::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::","::If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.::Turn off JavaScript, Flash and disable CSS.::When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.::","::A victim has an authenticated session with a site that provides an electronic payment service to transfer funds between subscribing members. At the same time, the victim receives an e-mail that appears to come from an online publication to which they subscribe with links to today's news articles. The victim clicks on one of these links and is taken to a page with the news story. There is a screen with an advertisement that appears on top of the news article with the 'skip this ad' button. Eager to read the news article, the user clicks on this button. Nothing happens. The user clicks on the button one more time and still nothing happens. In reality, the victim activated a hidden action control located in a transparent layer above the 'skip this ad' button. The ad screen blocking the news article made it likely that the victim would click on the 'skip this ad' button. Clicking on the button, actually initiated the transfer of $1000 from the victim's account with an electronic payment service to an adversary's account. Clicking on the 'skip this ad' button the second time (after nothing seemingly happened the first time) confirmed the transfer of funds to the electronic payment service.::","::1021::","TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Clickjacking::","",
104,"Cross Zone Scripting",Standard,Draft,"An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:233::","::STEP:1:PHASE:Explore:DESCRIPTION:[Find systems susceptible to the attack] Find systems that contain functionality that is accessed from both the internet zone and the local zone. There needs to be a way to supply input to that functionality from the internet zone and that original input needs to be used later on a page from a local zone.:TECHNIQUE:Leverage knowledge of common local zone functionality on targeted platforms to guide attempted injection of code through relevant internet zone mechanisms. In some cases this may be due to standard system configurations enabling shared functionality between internet and local zones. The attacker can search for indicators that these standard configurations are in place.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find the insertion point for the payload] The attacker first needs to find some system functionality or possibly another weakness in the system (e.g. susceptibility to cross site scripting) that would provide the attacker with a mechanism to deliver the payload (i.e. the code to be executed) to the user. The location from which this code is executed in the user's browser needs to be within the local machine zone.:TECHNIQUE:Finding weaknesses in functionality used by both privileged and unprivileged users.::STEP:3:PHASE:Exploit:DESCRIPTION:[Craft and inject the payload] Develop the payload to be executed in the higher privileged zone in the user's browser. Inject the payload and attempt to lure the victim (if possible) into executing the functionality which unleashes the payload.:TECHNIQUE:The attacker makes it as likely as possible that the vulnerable functionality into which they have injected the payload has a high likelihood of being used by the victim.:TECHNIQUE:Leverage cross-site scripting vulnerability to inject payload.::","::The target must be using a zone-aware browser.::","::SKILL:Ability to craft malicious scripts or find them elsewhere and ability to identify functionality that is running web controls in the local zone and to find an injection vector into that functionality:LEVEL:Medium::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::","::Disable script execution.::Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone::Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone::Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum::Ensure proper HTML output encoding before writing user supplied data to the page::","::There was a cross zone scripting vulnerability discovered in Skype that allowed one user to upload a video with a maliciously crafted title that contains a script. Subsequently, when the victim attempts to use the add video to chat feature on attacker's video, the script embedded in the title of the video runs with local zone privileges. Skype is using IE web controls to render internal and external HTML pages. Add video to chat uses these web controls and they are running in the Local Zone. Any user who searched for the video in Skype with the same keywords as in the title field, would have the attackers' code executing in their browser with local zone privileges to their host machine (e.g. applications on the victim's host system could be executed).::","::250::638::285::116::20::","","",
105,"HTTP Request Splitting",Detailed,Stable,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:34::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.:TECHNIQUE:Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.::STEP:1:PHASE:Experiment:DESCRIPTION:[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP requests with custom strings and embedded web scripts and objects in HTTP headers to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.:TECHNIQUE:Continue the monitoring of HTTP traffic.:TECHNIQUE:Utilize different sequences of special characters (CR - Carriage Return, LF - Line Feed, HT - Horizontal Tab, SP - Space and etc.) to bypass filtering and back-end encoding and to embed: additional HTTP Requests with their own headers malicious web scripts into parameters of HTTP Request headers (e.g., browser cookies like Set-Cookie or Ajax web/browser object parameters like XMLHttpRequest) adversary chosen encoding (e.g., UTF-7) to utilize additional special characters (e.g., > and <) filtered by the target HTTP agent. Note that certain special characters and character encoding may be applicable only to intermediary and front-end agents with rare configurations or that are not RFC compliant.:TECHNIQUE:Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request.::STEP:1:PHASE:Exploit:DESCRIPTION:[Perform HTTP Request Splitting attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.:TECHNIQUE:Leverage techniques identified in the Experiment Phase.::","::An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.::Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.::HTTP headers capable of being user-manipulated.::HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.::","::SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:Medium::SKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:Medium::SKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium::","::Tools capable of crafting malicious HTTP messages and monitoring HTTP messages responses.::","::Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.::","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::","::Microsoft Internet Explorer versions 5.01 SP4 and prior, 6.0 SP2 and prior, and 7.0 contain a vulnerability that could allow an unauthenticated, remote adversary to conduct HTTP request splitting and smuggling attacks. The vulnerability is due to an input validation error in the browser that allows adversaries to manipulate certain headers to expose the browser to HTTP request splitting and smuggling attacks. Attacks may include cross-site scripting, proxy cache poisoning, and session fixation. In certain instances, an exploit could allow the adversary to bypass web application firewalls or other filtering devices. Microsoft has confirmed the vulnerability and released software updates.::","::74::113::138::436::","TAXONOMY NAME:WASC:ENTRY ID:24:ENTRY NAME:HTTP Request Splitting::","TYPE:Terminology:NOTE:HTTP Splitting – the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender’s intension. The messages sent are 100% valid and RFC compliant [REF-117].::::TYPE:Terminology:NOTE:HTTP Smuggling – the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender’s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way [REF-117].::::TYPE:Relationship:NOTE:HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against.::",
107,"Cross Site Tracing",Detailed,Draft,"Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to a destination system's web server.","",Medium,Very High,"::NATURE:ChildOf:CAPEC ID:593::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine if HTTP Trace is enabled] Determine if HTTP Trace is enabled at the web server with which the victim has an active session:TECHNIQUE:An adversary may issue an HTTP Trace request to the target web server and observe if the response arrives with the original request in the body of the response.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify mechanism to launch HTTP Trace request] The adversary attempts to force the victim to issue an HTTP Trace request to the targeted application.:TECHNIQUE:The adversary probes for cross-site scripting vulnerabilities to force the victim into issuing an HTTP Trace request.::STEP:3:PHASE:Exploit:DESCRIPTION:[Create a malicious script that pings the web server with HTTP TRACE request] The adversary creates a malicious script that will induce the victim's browser to issue an HTTP TRACE request to the destination system's web server. The script will further intercept the response from the web server, pick up sensitive information out of it, and forward to the site controlled by the adversary.:TECHNIQUE:The adversary's malicious script circumvents the httpOnly cookie attribute that prevents from hijacking the victim's session cookie directly using document.cookie and instead leverages the HTTP TRACE to catch this information from the header of the HTTP request once it is echoed back from the web server in the body of the HTTP TRACE response.::STEP:4:PHASE:Exploit:DESCRIPTION:[Execute malicious HTTP Trace launching script] The adversary leverages an XSS vulnerability to force the victim to execute the malicious HTTP Trace launching script::STEP:5:PHASE:Exploit:DESCRIPTION:[Intercept HTTP TRACE response] The adversary's script intercepts the HTTP TRACE response from teh web server, glance sensitive information from it, and forward that information to a server controlled by the adversary.::","::HTTP TRACE is enabled on the web server::The destination system is susceptible to XSS or an adversary can leverage some other weakness to bypass the same origin policy::Scripting is enabled in the client's browser::HTTP is used as the communication protocol between the server and the client::","::SKILL:Understanding of the HTTP protocol and an ability to craft a malicious script:LEVEL:Medium::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.::Patch web browser against known security origin policy bypass exploits.::","::An adversary determines that a particular system is vulnerable to reflected cross-site scripting (XSS) and endeavors to leverage this weakness to steal the victim's authentication cookie. An adversary realizes that since httpOnly attribute is set on the user's cookie, it is not possible to steal it directly with their malicious script. Instead, the adversary has their script use XMLHTTP ActiveX control in the victim's IE browser to issue an HTTP TRACE to the target system's server which has HTTP TRACE enabled. The original HTTP TRACE request contains the session cookie and so does the echoed response. The adversary picks the session cookie from the body of HTTP TRACE response and ships it to the adversary. The adversary then uses the newly acquired victim's session cookie to impersonate the victim in the target system. In the absence of an XSS weakness on the site with which the victim is interacting, an adversary can get the script to come from the site that they control and get it to execute in the victim's browser (if they can trick the victim's into visiting their malicious website or clicking on the link that they supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the adversary's malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An adversary will then need to find a way to exploit another weakness that would enable them to circumvent the same origin policy protection.::","::693::648::","TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cross Site Tracing::","",
108,"Command Line Execution through SQL Injection",Detailed,Draft,"An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.","",Low,Very High,"::NATURE:ChildOf:CAPEC ID:66::","::STEP:1:PHASE:Explore:DESCRIPTION:[Probe for SQL Injection vulnerability] The attacker injects SQL syntax into user-controllable data inputs to search unfiltered execution of the SQL syntax in a query.::STEP:2:PHASE:Exploit:DESCRIPTION:[Achieve arbitrary command execution through SQL Injection with the MSSQL_xp_cmdshell directive] The attacker leverages a SQL Injection attack to inject shell code to be executed by leveraging the xp_cmdshell directive.::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject malicious data in the database] Leverage SQL injection to inject data in the database that could later be used to achieve command injection if ever used as a command line argument::STEP:4:PHASE:Exploit:DESCRIPTION:[Trigger command line execution with injected arguments] The attacker causes execution of command line functionality which leverages previously injected database content as arguments.::","::The application does not properly validate data before storing in the database::Backend application implicitly trusts the data stored in the database::Malicious data is used on the backend as a command line argument::","::SKILL:The attacker most likely has to be familiar with the internal functionality of the system to launch this attack. Without that knowledge, there are not many feedback mechanisms to give an attacker the indication of how to perform command injection or whether the attack is succeeding.:LEVEL:High::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::","::Disable MSSQL xp_cmdshell directive on the database::Properly validate the data (syntactically and semantically) before writing it to the database.::Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).::","::SQL injection vulnerability in Cacti 0.8.6i and earlier, when register_argc_argv is enabled, allows remote attackers to execute arbitrary SQL commands via the (1) second or (2) third arguments to cmd.php. NOTE: this issue can be leveraged to execute arbitrary commands since the SQL query results are later used in the polling_items array and popen function (CVE-2006-6799). Reference: https://www.cve.org/CVERecord?id=CVE-2006-6799::","::89::74::20::78::114::","","",
109,"Object Relational Mapping Injection",Detailed,Draft,"An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.","",Low,High,"::NATURE:ChildOf:CAPEC ID:66::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Persistence Framework Used] An attacker tries to determine what persistence framework is used by the application in order to leverage a weakness in the generated data access layer code or a weakness in a way that the data access layer may have been used by the developer.:TECHNIQUE:An attacker provides input to the application in an attempt to induce an error screen that reveals a stack trace that gives an indication of the automated data access layer used. Or an attacker may simply make some educated guesses and assume, for instance, that Hibernate is used and try to craft an attack from there.::STEP:2:PHASE:Explore:DESCRIPTION:[Probe for ORM Injection vulnerabilities] The attacker injects ORM syntax into user-controllable data inputs of the application to determine if it is possible modify data query structure and content.::STEP:3:PHASE:Exploit:DESCRIPTION:[Perform SQL Injection through the generated data access layer] An attacker proceeds to exploit a weakness in the generated data access methods that does not properly separate control plane from the data plan, or potentially a particular way in which developer might have misused the generated code, to modify the structure of the executed SQL queries and/or inject entirely new SQL queries.:TECHNIQUE:An attacker uses normal SQL injection techniques and adjusts them to reflect the type of data access layer generation framework used by the application.::","::An application uses data access layer generated by an ORM tool or framework::An application uses user supplied data in queries executed against the database::The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework::","::SKILL:Knowledge of general SQL injection techniques and subtleties of the ORM framework is needed:LEVEL:Medium::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::","::Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework::Ensure to keep up to date with security relevant updates to the persistence framework used within your application.::","::When using Hibernate, it is possible to use the session.find() method to run queries against the database. This is an overloaded method that provides facilities to perform binding between the supplied user data and place holders in the statically defined query. However, it is also possible to use the session.find() method without using any of these query binding overloads, hence effectively concatenating the user supplied data with rest of the SQL query, resulting in a possibility for SQL injection. While the framework may provide mechanisms to use methods immune to SQL injections, it may also contain ways that are not immune that may be chosen by the developer.::","::20::89::564::","","",
11,"Cause Web Server Misclassification",Detailed,Draft,"An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:635::","::STEP:1:PHASE:Explore:DESCRIPTION:[Footprint file input vectors] Manually or using an automated tool, an attacker searches for all input locations where a user has control over the filenames or MIME types of files submitted to the web server.:TECHNIQUE:Attacker manually crawls application to identify file inputs:TECHNIQUE:Attacker uses an automated tool to crawl application identify file inputs:TECHNIQUE:Attacker manually assesses strength of access control protecting native application files from user control:TECHNIQUE:Attacker explores potential for submitting files directly to the web server via independently constructed HTTP Requests::STEP:2:PHASE:Experiment:DESCRIPTION:[File misclassification shotgunning] An attacker makes changes to file extensions and MIME types typically processed by web servers and looks for abnormal behavior.:TECHNIQUE:Attacker submits files with switched extensions (e.g. .php on a .jsp file) to web server.:TECHNIQUE:Attacker adds extra characters (e.g. adding an extra . after the file extension) to filenames of files submitted to web server.::STEP:3:PHASE:Experiment:DESCRIPTION:[File misclassification sniping] Understanding how certain file types are processed by web servers, an attacker crafts varying file payloads and modifies their file extension or MIME type to be that of the targeted type to see if the web server is vulnerable to misclassification of that type.:TECHNIQUE:Craft a malicious file payload, modify file extension to the targeted file type and submit it to the web server.:TECHNIQUE:Craft a malicious file payload, modify its associated MIME type to the targeted file type and submit it to the web server.::STEP:4:PHASE:Exploit:DESCRIPTION:[Disclose information] The attacker, by manipulating a file extension or MIME type is able to make the web server return raw information (not executed).:TECHNIQUE:Manipulate the file names that are explicitly sent to the server.:TECHNIQUE:Manipulate the MIME sent in order to confuse the web server.::","::Web server software must rely on file name or file extension for processing.::The attacker must be able to make HTTP requests to the web server.::","::SKILL:To modify file name or file extension:LEVEL:Low::SKILL:To use misclassification to force the Web server to disclose configuration information, source, or binary data:LEVEL:Medium::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Implementation: Server routines should be determined by content not determined by filename or file extension.::","::J2EE application servers are supposed to execute Java Server Pages (JSP). There have been disclosure issues relating to Orion Application Server, where an attacker that appends either a period (.) or space characters to the end of a legitimate Http request, then the server displays the full source code in the attackers' web browser. http://victim.site/login.jsp. Since remote data and directory access may be accessed directly from the JSP, this is a potentially very serious issue. [REF-6]::","::430::","TAXONOMY NAME:ATTACK:ENTRY ID:1036.006:ENTRY NAME:Masquerading: Space after Filename::","",
110,"SQL Injection through SOAP Parameter Tampering",Detailed,Draft,"An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:66::NATURE:CanPrecede:CAPEC ID:108::","::STEP:1:PHASE:Explore:DESCRIPTION:[Detect Incorrect SOAP Parameter Handling] The attacker tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.:TECHNIQUE:The attacker tampers with the SOAP message parameters by injecting some special characters such as single quotes, double quotes, semi columns, etc. The attacker observes system behavior.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe for SQL Injection vulnerability] The attacker injects SQL syntax into vulnerable SOAP parameters identified during the Explore phase to search for unfiltered execution of the SQL syntax in a query.::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject SQL via SOAP Parameters] The attacker injects SQL via SOAP parameters identified as vulnerable during Explore phase to launch a first or second order SQL injection attack.:TECHNIQUE:An attacker performs a SQL injection attack via the usual methods leveraging SOAP parameters as the injection vector. An attacker has to be careful not to break the XML parser at the service provider which may prevent the payload getting through to the SQL query. The attacker may also look at the WSDL for the web service (if available) to better understand what is expected by the service provider.::","::SOAP messages are used as a communication mechanism in the system::SOAP parameters are not properly validated at the service provider::The service provider does not properly utilize parameter binding when building SQL queries::","::SKILL:If the attacker is able to gain good understanding of the system's database schema:LEVEL:Medium::SKILL:If the attacker has to perform Blind SQL Injection:LEVEL:High::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::","::Properly validate and sanitize/reject user input at the service provider.::Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.::At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.::","::An attacker uses a travel booking system that leverages SOAP communication between the client and the travel booking service. An attacker begins to tamper with the outgoing SOAP messages by modifying their parameters to include characters that would break a dynamically constructed SQL query. They notice that the system fails to respond when these malicious inputs are injected in certain parameters transferred in a SOAP message. The attacker crafts a SQL query that modifies their payment amount in the travel system's database and passes it as one of the parameters . A backend batch payment system later fetches the payment amount from the database (the modified payment amount) and sends to the credit card processor, enabling the attacker to purchase the airfare at a lower price. An attacker needs to have some knowledge of the system's database, perhaps by exploiting another weakness that results in information disclosure.::","::89::20::","","",
111,"JSON Hijacking (aka JavaScript Hijacking)",Standard,Draft,"An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.","",High,High,"::NATURE:ChildOf:CAPEC ID:212::","::STEP:1:PHASE:Explore:DESCRIPTION:[Understand How to Request JSON Responses from the Target System] An attacker first explores the target system to understand what URLs need to be provided to it in order to retrieve JSON objects that contain information of interest to the attacker.:TECHNIQUE:An attacker creates an account with the target system and observes requests and the corresponding JSON responses from the server. Understanding how to properly elicit responses from the server is crucial to the attackers' ability to craft the exploit.::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft a malicious website]The attacker crafts a malicious website to which they plan to lure the victim who is using the vulnerable target system. The malicious website does two things: 1. Contains a hook that intercepts incoming JSON objects, reads their contents and forwards the contents to the server controlled by the attacker (via a new XMLHttpRequest). 2. Uses the script tag with a URL in the source that requests a JSON object from the vulnerable target system. Once the JSON object is transmitted to the victim's browser, the malicious code (as described in step 1) intercepts that JSON object, steals its contents, and forwards to the attacker. This attack step leverages the fact that the same origin policy in the browser does not protect JavaScript originating from one domain from setting up an environment to intercept and access JSON objects arriving from a completely different domain.::STEP:3:PHASE:Exploit:DESCRIPTION:[Launch JSON hijack] An attacker lures the victim to the malicious website or leverages other means to get their malicious code executing in the victim's browser. Once that happens, the malicious code makes a request to the victim target system to retrieve a JSON object with sensitive information. The request includes the victim's session cookie if the victim is logged in.:TECHNIQUE:An attacker employs a myriad of standard techniques to get the victim to visit their malicious site or by some other means get the attackers' malicious code executing in the victim's browser.::","::JSON is used as a transport mechanism between the client and the server::The target server cannot differentiate real requests from forged requests::The JSON object returned from the server can be accessed by the attackers' malicious code via a script tag::","::SKILL:Once this attack pattern is developed and understood, creating an exploit is not very complex.The attacker needs to have knowledge of the URLs that need to be accessed on the target system to request the JSON objects.:LEVEL:Medium::","::None: No specialized resources are required to execute this type of attack.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.::On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).::Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.::Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario.::","::Gmail service was found to be vulnerable to a JSON Hijacking attack that enabled an attacker to get the contents of the victim's address book. An attacker could send an e-mail to the victim's Gmail account (which ensures that the victim is logged in to Gmail when they receive it) with a link to the attackers' malicious site. If the victim clicked on the link, a request (containing the victim's authenticated session cookie) would be sent to the Gmail servers to fetch the victim's address book. This functionality is typically used by the Gmail service to get this data on the fly so that the user can be provided a list of contacts from which to choose the recipient of the e-mail. When the JSON object with the contacts came back, it was loaded into the JavaScript space via a script tag on the attackers' malicious page. Since the JSON object was never assigned to a local variable (which would have prevented a script from a different domain accessing it due to the browser's same origin policy), another mechanism was needed to access the data that it contained. That mechanism was overwriting the internal array constructor with the attackers' own constructor in order to gain access to the JSON object's contents. These contents could then be transferred to the site controlled by the attacker.::","::345::346::352::","","",
112,"Brute Force",Meta,Draft,"In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset.","",,High,"","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine secret testing procedure] Determine how a potential guess of the secret may be tested. This may be accomplished by comparing some manipulation of the secret to a known value, use of the secret to manipulate some known set of data and determining if the result displays specific characteristics (for example, turning cryptotext into plaintext), or by submitting the secret to some external authority and having the external authority respond as to whether the value was the correct secret. Ideally, the attacker will want to determine the correctness of their guess independently since involvement of an external authority is usually slower and can provide an indication to the defender that a brute-force attack is being attempted.:TECHNIQUE:Determine if there is a way to parallelize the attack. Most brute force attacks can take advantage of parallel techniques by dividing the search space among available resources, thus dividing the average time to success by the number of resources available. If there is a single choke point, such as a need to check answers with an external authority, the attackers' position is significantly degraded.::STEP:2:PHASE:Explore:DESCRIPTION:[Reduce search space] Find ways to reduce the secret space. The smaller the attacker can make the space they need to search for the secret value, the greater their chances for success. There are a great many ways in which the search space may be reduced.:TECHNIQUE:If possible, determine how the secret was selected. If the secret was determined algorithmically (such as by a random number generator) the algorithm may have patterns or dependencies that reduce the size of the secret space. If the secret was created by a human, behavioral factors may, if not completely reduce the space, make some types of secrets more likely than others. (For example, humans may use the same secrets in multiple places or use secrets that look or sound familiar for ease of recall.):TECHNIQUE:If the secret was chosen algorithmically, cryptanalysis can be applied to the algorithm to discover patterns in this algorithm. (This is true even if the secret is not used in cryptography.) Periodicity, the need for seed values, or weaknesses in the generator all can result in a significantly smaller secret space.:TECHNIQUE:If the secret was chosen by a person, social engineering and simple espionage can indicate patterns in their secret selection. If old secrets can be learned (and a target may feel they have little need to protect a secret that has been replaced) hints as to their selection preferences can be gleaned. These can include character substitutions a target employs, patterns in sources (dates, famous phrases, music lyrics, family members, etc.). Once these patterns have been determined, the initial efforts of a brute-force attack can focus on these areas.:TECHNIQUE:Some algorithmic techniques for secret selection may leave indicators that can be tested for relatively easily and which could then be used to eliminate large areas of the search space for consideration. For example, it may be possible to determine that a secret does or does not start with a given character after a relatively small number of tests. Alternatively, it might be possible to discover the length of the secret relatively easily. These discoveries would significantly reduce the search space, thus increasing speed with which the attacker discovers the secret.::STEP:3:PHASE:Explore:DESCRIPTION:[Expand victory conditions] It is sometimes possible to expand victory conditions. For example, the attacker might not need to know the exact secret but simply needs a value that produces the same result using a one-way function. While doing this does not reduce the size of the search space, the presence of multiple victory conditions does reduce the likely amount of time that the attacker will need to explore the space before finding a workable value.::STEP:4:PHASE:Exploit:DESCRIPTION:[Gather information so attack can be performed independently.] If possible, gather the necessary information so a successful search can be determined without consultation of an external authority. This can be accomplished by capturing cryptotext (if the goal is decoding the text) or the encrypted password dictionary (if the goal is learning passwords).::","::The attacker must be able to determine when they have successfully guessed the secret. As such, one-time pads are immune to this type of attack since there is no way to determine when a guess is correct.::","::SKILL:The attack simply requires basic scripting ability to automate the exploration of the search space. More sophisticated attackers may be able to use more advanced methods to reduce the search space and increase the speed with which the secret is located.:LEVEL:Low::","::None: No specialized resources are required to execute this type of attack. Ultimately, the speed with which an attacker discovers a secret is directly proportional to the computational resources the attacker has at their disposal. This attack method is resource expensive: having large amounts of computational power do not guarantee timely success, but having only minimal resources makes the problem intractable against all but the weakest secret selection procedures.::","::Repeated submissions of incorrect secret values may indicate a brute force attack. For example, repeated bad passwords when accessing user accounts or repeated queries to databases using non-existent keys.::Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.::If the attacker is able to perform the checking offline then there will likely be no indication that an attack is ongoing.::","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.::Use a secret space that is well known and with no known patterns that may reduce functional size.::Do not provide the means for an attacker to determine success independently. This forces the attacker to check their guesses against an external authority, which can slow the attack and warn the defender. This mitigation may not be possible if testing material must appear externally, such as with a transmitted cryptotext.::","","::330::326::521::","TAXONOMY NAME:ATTACK:ENTRY ID:1110:ENTRY NAME:Brute Force::::TAXONOMY NAME:WASC:ENTRY ID:11:ENTRY NAME:Brute Force::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Brute force attack::","",
113,"Interface Manipulation",Meta,Draft,"An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.","",Medium,Medium,"","","::The target system must expose interface functionality in a manner that can be discovered and manipulated by an adversary. This may require reverse engineering the interface or decrypting/de-obfuscating client-server exchanges.::","","::The requirements vary depending upon the nature of the interface. For example, application-layer APIs related to the processing of the HTTP protocol may require one or more of the following: an Adversary-In-The-Middle (CAPEC-94) proxy, a web browser, or a programming/scripting language.::","","","","::An adversary may make a request to an application that leverages a non-standard API that is known to incorrectly validate its data and thus it may be manipulated by supplying metacharacters or alternate encodings as input, resulting in any number of injection flaws, including SQL injection, cross-site scripting, or command execution.::API methods not intended for production, such as debugging or testing APIs, may not be disabled when deploying in a production environment. As a result, dangerous functionality can be exposed within the production environment, which an adversary can leverage to execute additional attacks.::SoC components contain insufficient identifiers, which allows an adversary to reset the device at will or read sensitive data from the device.::","::1192::","","",
114,"Authentication Abuse",Meta,Draft,"An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker.","",,Medium,"","","::An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc. which is flawed in some way.::","","::A client application, command-line access to a binary, or scripting language capable of interacting with the authentication mechanism.::","","","","","::287::1244::","TAXONOMY NAME:ATTACK:ENTRY ID:1548:ENTRY NAME:Abuse Elevation Control Mechanism::","",
115,"Authentication Bypass",Meta,Draft,"An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.","",,Medium,"","","::An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc.::","","::A client application, such as a web browser, or a scripting language capable of interacting with the target.::","","","","","::287::","TAXONOMY NAME:ATTACK:ENTRY ID:1548:ENTRY NAME:Abuse Elevation Control Mechanism::","",
116,"Excavation",Meta,Stable,"An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.","",High,Medium,"::NATURE:CanPrecede:CAPEC ID:163::","","::An adversary requires some way of interacting with the system.::","","::A tool, such as an Adversary in the Middle (CAPEC-94) Proxy or a fuzzer, that is capable of generating and injecting custom inputs to be used in the attack.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Minimize error/response output to only what is necessary for functional use or corrective language.::Remove potentially sensitive information that is not necessary for the application's functionality.::","","::200::1243::","","TYPE:Other:NOTE:Large quantities of data is often moved from the target system to some other adversary controlled system. Data found on a target system might require extensive resources to be fully analyzed. Using these resources on the target system might enable a defender to detect the adversary. Additionally, proper analysis tools required might not be available on the target system.::::TYPE:Other:NOTE:This attack differs from Data Interception and other data collection attacks in that the attacker actively queries the target rather than simply watching for the target to reveal information.::",
117,"Interception",Meta,Stable,"An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.","",Low,Medium,"","","::The target must transmit data over a medium that is accessible to the adversary.::","","::The adversary must have the necessary technology to intercept information passing between the nodes of a network. For TCP/IP, the capability to run tcpdump, ethereal, etc. can be useful. Depending upon the data being targeted the technological requirements will change.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.::","","::319::","","",
12,"Choosing Message Identifier",Standard,Draft,"This pattern of attack is defined by the selection of messages distributed via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.","",High,High,"::NATURE:PeerOf:CAPEC ID:21::NATURE:ChildOf:CAPEC ID:216::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Nature of Messages] Determine the nature of messages being transported as well as the identifiers to be used as part of the attack::STEP:2:PHASE:Experiment:DESCRIPTION:[Authenticate] If required, authenticate to the distribution channel::STEP:3:PHASE:Experiment:DESCRIPTION:[Identify Known Client Identifiers] If any particular client's information is available through a control channel available to all users, the adversary will discover particular identifiers for targeted clients by observing this channel, or requesting client information through this channel.::STEP:4:PHASE:Experiment:DESCRIPTION:[Change Message Identifier] Adversaries with client access connecting to output channels could change their channel identifier and see someone else's (perhaps more privileged) data.::","::Information and client-sensitive (and client-specific) data must be present through a distribution channel available to all users.::Distribution means must code (through channel, message identifiers, or convention) message destination in a manner visible within the distribution means itself (such as a control channel) or in the messages themselves.::","::SKILL:All the adversary needs to discover is the format of the messages on the channel/distribution means and the particular identifier used within the messages.:LEVEL:Low::","::The adversary needs the ability to control source code or application configuration responsible for selecting which message/channel id is absorbed from the public distribution means.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Associate some ACL (in the form of a token) with an authenticated user which they provide middleware. The middleware uses this token as part of its channel/message selection for that client, or part of a discerning authorization decision for privileged channels/messages. The purpose is to architect the system in a way that associates proper authentication/authorization with each channel/message.::Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them.::","::A certain B2B interface on a large application codes for messages passed over an MQSeries queue, on a single Partners channel. Messages on that channel code for their client destination based on a partner_ID field, held by each message. That field is a simple integer. Adversaries having access to that channel, perhaps a particularly nosey partner, can simply choose to store messages of another partner's ID and read them as they desire. Note that authentication does not prevent a partner from leveraging this attack on other partners. It simply disallows adversaries without partner status from conducting this attack.::","::201::306::","","",
120,"Double Encoding",Detailed,Draft,"The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.","",Low,Medium,"::NATURE:ChildOf:CAPEC ID:267::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an attacker records all entry points to the application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] Try double-encoding for parts of the input in order to try to get past the filters. For instance, by double encoding certain characters in the URL (e.g. dots and slashes) an adversary may try to get access to restricted resources on the web server or force browse to protected pages (thus subverting the authorization service). An adversary can also attempt other injection style attacks using this attack pattern: command injection, SQL injection, etc.:TECHNIQUE:Try to use double-encoding to bypass validation routines.::","::The target's filters must fail to detect that a character has been doubly encoded but its interpreting engine must still be able to convert a doubly encoded character to an un-encoded character.::The application accepts and decodes URL string request.::The application performs insufficient filtering/canonicalization on the URLs.::","","::Tools that automate encoding of data can assist the adversary in generating encoded strings.::","","","::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::","::Double Enconding Attacks can often be used to bypass Cross Site Scripting (XSS) detection and execute XSS attacks.: %253Cscript%253Ealert('This is an XSS Attack')%253C%252Fscript%253E Since <, <, and / are often sued to perform web attacks, these may be captured by XSS filters. The use of double encouding prevents the filter from working as intended and allows the XSS to bypass dectection. This can allow an adversary to execute malicious code.::","::173::172::177::181::183::184::74::20::697::692::","","",
121,"Exploit Non-Production Interfaces",Standard,Stable,"An adversary exploits a sample, demonstration, test, or debug interface that is unintentionally enabled on a production system, with the goal of gleaning information or leveraging functionality that would otherwise be unavailable.","",Low,High,"::NATURE:ChildOf:CAPEC ID:113::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Vulnerable Interface] An adversary explores a target system for sample or test interfaces that have not been disabled by a system administrator and which may be exploitable by the adversary.:TECHNIQUE:If needed, the adversary explores an organization's network to determine if any specific systems of interest exist.::STEP:2:PHASE:Exploit:DESCRIPTION:[Leverage Test Interface to Execute Attacks] Once an adversary has discovered a system with a non-production interface, the interface is leveraged to exploit the system and/or conduct various attacks.:TECHNIQUE:The adversary can leverage the sample or test interface to conduct several types of attacks such as Adversary-in-the-Middle attacks (CAPEC-94), keylogging, Cross Site Scripting (XSS), hardware manipulation attacks, and more.::","::The target must have configured non-production interfaces and failed to secure or remove them when brought into a production environment.::","::SKILL:Exploiting non-production interfaces requires significant skill and knowledge about the potential non-production interfaces left enabled in production.:LEVEL:High::","::For some interfaces, the adversary will need that appropriate client application or hardware that interfaces with the interface. Other non-production interfaces can be executed using simple tools, such as web browsers or console windows. In some cases, an adversary may need to be able to authenticate to the target before it can access the vulnerable interface.::","","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authentication:TECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Read Data:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Access Control:SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Alter Execution Logic::","::Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.::","::Some software applications include application programming interfaces (APIs) that are intended to allow an administrator to test and refine their domain. These APIs are typically disabled once a system enters a production environment, but may be left in an insecure state due to a configuration error or mismanagement.::Many hardware systems leverage bits typically reserved for future functionality for testing and debugging purposes. If these reserved bits remain enabled in a production environment, it could allow an adversary to induce unwanted/unsupported behavior in the hardware.::","::489::1209::1259::1267::1270::1294::1295::1296::1302::1313::","","",
122,"Privilege Abuse",Meta,Draft,"An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.","",High,Medium,"::NATURE:CanPrecede:CAPEC ID:664::","","::The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.::The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources.::","::SKILL:Adversary can leverage privileged features they already have access to without additional effort or skill. Adversary is only required to have access to an account with improper priveleges.:LEVEL:Low::","::None: No specialized resources are required to execute this type of attack. The ability to access the target is required.::","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Authorization:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::","::Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.::","::Improperly configured account privileges allowed unauthorized users on a hospital's network to access the medical records for over 3,000 patients. Thus compromising data integrity and confidentiality in addition to HIPAA violations.::","::269::732::1317::","TAXONOMY NAME:ATTACK:ENTRY ID:1548:ENTRY NAME:Abuse Elevation Control Mechanism::","",
123,"Buffer Manipulation",Meta,Draft,"An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.","",High,Very High,"","","::The adversary must identify a programmatic means for interacting with a buffer, such as vulnerable C code, and be able to provide input to this interaction.::","","","","::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:A buffer manipulation attack often results in a crash of the application due to the corruption of memory.::SCOPE:Confidentiality:TECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Read Data:NOTE:If constructed properly, a buffer manipulation attack can be used to contol the execution of the application leading to any number of negative consequenses.::","::To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.::","","::119::","","",
124,"Shared Resource Manipulation",Meta,Draft,"An adversary exploits a resource shared between multiple applications, an application pool or hardware pin multiplexing to affect behavior. Resources may be shared between multiple applications or between multiple threads of a single application. Resource sharing is usually accomplished through mutual access to a single memory location or multiplexed hardware pins. If an adversary can manipulate this shared resource (usually by co-opting one of the applications or threads) the other applications or threads using the shared resource will often continue to trust the validity of the compromised shared resource and use it in their calculations. This can result in invalid trust assumptions, corruption of additional data through the normal operations of the other users of the shared resource, or even cause a crash or compromise of the sharing applications.","",,Medium,"","","::The target applications, threads or functions must share resources between themselves.::The adversary must be able to manipulate some piece of the shared resource either directly or indirectly and the other users of the data must accept the changed data as valid. Usually this requires that the adversary be able to compromise one of the sharing applications or threads in order to manipulate the shared data.::","","::None: The attacker does not need any specialized resources to execute this type of attack.::","","","","","::1189::1331::","","",
125,"Flooding",Meta,Stable,"An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.","",High,Medium,"","","::Any target that services requests is vulnerable to this attack on some level of scale.::","","::A script or program capable of generating more requests than the target can handle, or a network or cluster of objects all capable of making simultaneous requests.::","","::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:A successful flooding attack compromises the availability of the target system's service by exhausting its available resources.::","::Ensure that protocols have specific limits of scale configured.::Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.::Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::","","::404::770::","TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service: Direct Network Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1499:ENTRY NAME:Endpoint Denial of Service::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Traffic flood::","",
126,"Path Traversal",Standard,Draft,"An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or ) and/or dots (.)) to reach desired directories or files.","::TERM:Directory Traversal:DESCRIPTION:::",High,Very High,"::NATURE:ChildOf:CAPEC ID:153::NATURE:CanPrecede:CAPEC ID:664::","::STEP:1:PHASE:Explore:DESCRIPTION:[Fingerprinting of the operating system] In order to perform a valid path traversal, the attacker needs to know what the underlying OS is so that the proper file seperator is used.:TECHNIQUE:Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.:TECHNIQUE:TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.:TECHNIQUE:Induce errors to find informative error messages::STEP:2:PHASE:Explore:DESCRIPTION:[Survey the Application to Identify User-controllable Inputs] The attacker surveys the target application to identify all user-controllable file inputs::STEP:3:PHASE:Experiment:DESCRIPTION:[Vary inputs, looking for malicious results] Depending on whether the application being exploited is a remote or local one, the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application::STEP:4:PHASE:Exploit:DESCRIPTION:[Manipulate files accessible by the application] The attacker may steal information or directly manipulate files (delete, copy, flush, etc.)::","::The attacker must be able to control the path that is requested of the target.::The target must fail to adequately sanitize incoming paths::","::SKILL:Simple command line attacks or to inject the malicious payload in a web page.:LEVEL:Low::SKILL:Customizing attacks to bypass non trivial filters in the application.:LEVEL:Medium::","::The ability to manually manipulate path information either directly through a client application relative to the service or application or via a proxy application.::","","::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data:NOTE:The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution:NOTE:The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.::","::Design: Configure the access control correctly.::Design: Enforce principle of least privilege.::Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.::Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.::Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.::Implementation: Perform input validation for all remote content, including remote and user-generated content.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::Implementation: Use indirect references rather than actual file names.::Implementation: Use possible permissions on file access when developing and deploying web applications.::Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.::","::An example of using path traversal to attack some set of resources on a web server is to use a standard HTTP request http://example/../../../../../etc/passwd From an attacker point of view, this may be sufficient to gain access to the password file on a poorly protected system. If the attacker can list directories of critical resources then read only access is not sufficient to protect the system.::","::22::","TAXONOMY NAME:WASC:ENTRY ID:33:ENTRY NAME:Path Traversal::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Path Traversal::","",
127,"Directory Indexing",Detailed,Draft,"An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.","",High,Medium,"::NATURE:ChildOf:CAPEC ID:54::","::STEP:1:PHASE:Explore:DESCRIPTION:[Directory Discovery] Use a method, either manual, scripted, or automated to discover the directories on the server by making requests for directories that may possibly exist. During this phase the adversary is less concerned with whether a directory can be accessed or indexed and more focused on simply discovering what directories do exist on the target.:TECHNIQUE:Send requests to the web server for common directory names:TECHNIQUE:If directories are discovered that are native to a server type further refine the directory search to include directories usually present on those types of servers.:TECHNIQUE:Search for uncommon or potentially user created directories that may be present.::STEP:2:PHASE:Experiment:DESCRIPTION:[Iteratively explore directory/file structures] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods:TECHNIQUE:Use a scanner tool to dynamically add directories/files to include their scan based upon data obtained in initial probes.:TECHNIQUE:Use a browser to manually explore the website by issuing a request ending the URL in a slash '/'.:TECHNIQUE:Attempt to bypass ACLs on directories by using methods that known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.:TECHNIQUE:Sequentially request a list of common base files to each directory discovered.:TECHNIQUE:Try multiple fuzzing techniques to list directory contents for directories that will not reveal their contents with a / request::STEP:3:PHASE:Exploit:DESCRIPTION:[Read directories or files which are not intended for public viewing.] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods:TECHNIQUE:Try multiple exploit techniques to list directory contents for directories that will not reveal their contents with a / request:TECHNIQUE:Try other known exploits to elevate privileges sufficient to bypass protected directories.:TECHNIQUE:List the files in the directory by issuing a request with the URL ending in a / slash.:TECHNIQUE:Access the files via direct URL and capture contents.:TECHNIQUE:Attempt to bypass ACLs on directories by using methods that are known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.:TECHNIQUE:Sequentially request a list of common base files to each directory discovered.::","::The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.::The adversary must be able to control the path that is requested of the target.::The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.::The server version or patch level must not inherently prevent known directory listing attacks from working.::","::SKILL:To issue the request to URL without given a specific file name:LEVEL:Low::SKILL:To bypass the access control of the directory of listings:LEVEL:High::","::Ability to send HTTP requests to a web application.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:Information Leakage::","::1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.::2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.::3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message.::","::The adversary uses directory listing to view sensitive files in the application. This is an example of accessing the backup file. The attack issues a request for http://www.example.com/admin/ and receives the following dynamic directory indexing content in the response: Index of /admin Name Last Modified Size Description backup/ 31-May-2007 08:18 - Apache/ 2.0.55 Server at www.example.com Port 80 The target application does not have direct hyperlink to the backup directory in the normal html webpage, however the attacker has learned of this directory due to indexing the content. The client then requests the backup directory URL and receives output which has a db_dump.php file in it. This sensitive data should not be disclosed publicly.::","::424::425::288::285::732::276::693::","TAXONOMY NAME:ATTACK:ENTRY ID:1083:ENTRY NAME:File and Directory Discovery::","",
128,"Integer Attacks",Standard,Draft,"An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats.","",,Medium,"::NATURE:ChildOf:CAPEC ID:153::","","::The target application must have an integer variable for which only some of the possible integer values are expected by the application and where there are no checks on the value of the variable before use.::The attacker must be able to manipulate the targeted integer variable such that normal operations result in non-standard values due to the storage structure of integers.::","","::None: No specialized resources are required to execute this type of attack.::","","","","","::682::","","",
129,"Pointer Manipulation",Meta,Draft,"This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks.","",,Medium,"","","::The target application must have a pointer variable that the attacker can influence to hold an arbitrary value.::","","::None: No specialized resources are required to execute this type of attack.::","","","","","::682::822::823::","","",