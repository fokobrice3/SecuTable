CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes
432,"Dangerous Signal Handler not Disabled During Sensitive Operations",Base,Draft,"The product uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running.","During the execution of a signal handler, it can be interrupted by another handler when a different signal is sent. If the two handlers share state - such as global variables - then an attacker can corrupt the state by sending another signal before the first handler has completed execution.",::NATURE:ChildOf:CWE ID:364:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Integrity:IMPACT:Modify Application Data::","","::PHASE:Implementation:DESCRIPTION:Turn off dangerous handlers when performing sensitive operations.::","",,,"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:SIG00-C:ENTRY NAME:Mask signals handled by noninterruptible signal handlers::TAXONOMY NAME:PLOVER:ENTRY NAME:Dangerous handler not cleared/disabled during sensitive operations::",,"",
433,"Unparsed Raw Web Content Delivery",Variant,Incomplete,"The product stores raw content or supporting code under the web document root with an extension that is not specifically handled by the server.","If code is stored in a file with an extension such as .inc or .pl, and the web server does not have a handler for that extension, then the server will likely send the contents of the file directly to the requester without the pre-processing that was expected. When that file contains sensitive information such as database credentials, this may allow the attacker to compromise the application or associated components.",::NATURE:ChildOf:CWE ID:219:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::PHASE:Operation::","",,"::SCOPE:Confidentiality:IMPACT:Read Application Data::","","::PHASE:Architecture and Design:DESCRIPTION:Perform a type check before interpreting files.::PHASE:Architecture and Design:DESCRIPTION:Do not store sensitive information in files which may be misinterpreted.::","::REFERENCE:CVE-2002-1886:DESCRIPTION:.inc file stored under web document root and returned unparsed by the server:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1886::REFERENCE:CVE-2002-2065:DESCRIPTION:.inc file stored under web document root and returned unparsed by the server:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2065::REFERENCE:CVE-2005-2029:DESCRIPTION:.inc file stored under web document root and returned unparsed by the server:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2029::REFERENCE:CVE-2001-0330:DESCRIPTION:direct request to .pl file leaves it unparsed:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0330::REFERENCE:CVE-2002-0614:DESCRIPTION:.inc file:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0614::REFERENCE:CVE-2004-2353:DESCRIPTION:unparsed config.conf file:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2353::REFERENCE:CVE-2007-3365:DESCRIPTION:Chain: uppercase file extensions causes web server to return script source code instead of executing the script.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-3365::",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:Unparsed Raw Web Content Delivery::",,"::TYPE:Relationship:NOTE:This overlaps direct requests (CWE-425), alternate path (CWE-424), permissions (CWE-275), and sensitive file under web root (CWE-219).::",
434,"Unrestricted Upload of File with Dangerous Type",Base,Draft,"The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.","",::NATURE:ChildOf:CWE ID:669:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:669:VIEW ID:1003:ORDINAL:Primary::NATURE:PeerOf:CWE ID:351:VIEW ID:1000::NATURE:PeerOf:CWE ID:436:VIEW ID:1000::NATURE:PeerOf:CWE ID:430:VIEW ID:1000::,"::ORDINALITY:Primary:DESCRIPTION:This can be primary when there is no check at all.::ORDINALITY:Resultant:DESCRIPTION:This is frequently resultant when use of double extensions (e.g. .php.gif) bypasses a sanity check.::ORDINALITY:Resultant:DESCRIPTION:This can be resultant from client-side enforcement (CWE-602); some products will include web script in web clients to check the filename, without verifying on the server side.::",::LANGUAGE NAME:ASP.NET:LANGUAGE PREVALENCE:Sometimes::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Often::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY NAME:Web Server:TECHNOLOGY PREVALENCE:Sometimes::,"","::TERM:Unrestricted File Upload:DESCRIPTION:Used in vulnerability databases and elsewhere, but it is insufficiently precise. The phrase could be interpreted as the lack of restrictions on the size or number of uploaded files, which is a resource consumption issue.::","::PHASE:Implementation::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::","",,"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:NOTE:Arbitrary code execution is possible if an uploaded file is interpreted and executed as code by the recipient. This is especially true for .asp and .php extensions uploaded to web servers because these file types are often treated as automatically executable, even when file system permissions do not specify execution. For example, in Unix environments, programs typically cannot run unless the execute bit is set, but PHP programs may be executed by the web server without directly invoking them on the operating system.::","::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections):EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::","::PHASE:Architecture and Design:DESCRIPTION:Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423]::PHASE:Architecture and Design:STRATEGY:Enforcement by Conversion:DESCRIPTION:When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.::PHASE:Architecture and Design:DESCRIPTION:Consider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically. [REF-423]::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. For example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions.::PHASE:Architecture and Design:DESCRIPTION:Define a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Ensure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that filename.php.gif is fed to the PHP interpreter.[REF-422] [REF-423]::PHASE:Implementation:DESCRIPTION:When running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Implementation:DESCRIPTION:Do not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field.::PHASE:Implementation:DESCRIPTION:Do not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution.::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::PHASE:Architecture and Design Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Run the code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.:EFFECTIVENESS:Limited::","::REFERENCE:CVE-2001-0901:DESCRIPTION:Web-based mail product stores .shtml attachments that could contain SSI:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0901::REFERENCE:CVE-2002-1841:DESCRIPTION:PHP upload does not restrict file types:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1841::REFERENCE:CVE-2005-1868:DESCRIPTION:upload and execution of .php file:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1868::REFERENCE:CVE-2005-1881:DESCRIPTION:upload file with dangerous extension:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1881::REFERENCE:CVE-2005-0254:DESCRIPTION:program does not restrict file types:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0254::REFERENCE:CVE-2004-2262:DESCRIPTION:improper type checking of uploaded files:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2262::REFERENCE:CVE-2006-4558:DESCRIPTION:Double php extension leaves an active php extension in the generated filename.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4558::REFERENCE:CVE-2006-6994:DESCRIPTION:ASP program allows upload of .asp files by bypassing client-side checks:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6994::REFERENCE:CVE-2005-3288:DESCRIPTION:ASP file upload:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3288::REFERENCE:CVE-2006-2428:DESCRIPTION:ASP file upload:LINK:https://www.cve.org/CVERecord?id=CVE-2006-2428::",::File Processing::,::File or Directory::,"::TAXONOMY NAME:PLOVER:ENTRY NAME:Unrestricted File Upload::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A3:ENTRY NAME:Malicious File Execution:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-434::",::1::,"::TYPE:Relationship:NOTE:This can have a chaining relationship with incomplete denylist / permissive allowlist errors when the product tries, but fails, to properly limit which types of files are allowed (CWE-183, CWE-184). This can also overlap multiple interpretation errors for intermediaries, e.g. anti-virus products that do not remove or quarantine attachments with certain file extensions that can be processed by client systems.::",
435,"Improper Interaction Between Multiple Correctly-Behaving Entities",Pillar,Draft,"An interaction error occurs when two entities have correct behavior when running independently of each other, but when they are integrated as components in a larger system or process, they introduce incorrect behaviors that may cause resultant weaknesses.","When a system or process combines multiple independent components, this often produces new, emergent behaviors at the system level. However, if the interactions between these components are not fully accounted for, some of the emergent behaviors can be incorrect or even insecure.",,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,"","::TERM:Interaction Error::TERM:Emergent Fault::","::PHASE:Architecture and Design::PHASE:Implementation::PHASE:Operation::","",,"::SCOPE:Integrity:IMPACT:Unexpected State:IMPACT:Varies by Context::","","","",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:Interaction Errors::",,"::TYPE:Relationship:NOTE:The Interaction Error term, in CWE and elsewhere, is only intended to describe products that behave according to specification. When one or more of the products do not comply with specifications, then it is more likely to be API Abuse (CWE-227) or an interpretation conflict (CWE-436). This distinction can be blurred in real world scenarios, especially when de facto standards do not comply with specifications, or when there are no standards but there is widespread adoption. As a result, it can be difficult to distinguish these weaknesses during mapping and classification.::",
436,"Interpretation Conflict",Class,Incomplete,"Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.","This is generally found in proxies, firewalls, anti-virus software, and other intermediary devices that monitor, allow, deny, or modify traffic based on how the client or server is expected to behave.",::NATURE:ChildOf:CWE ID:435:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Integrity:SCOPE:Other:IMPACT:Unexpected State:IMPACT:Varies by Context::","","","::REFERENCE:CVE-2005-1215:DESCRIPTION:Bypass filters or poison web cache using requests with multiple Content-Length headers, a non-standard behavior.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1215::REFERENCE:CVE-2002-0485:DESCRIPTION:Anti-virus product allows bypass via Content-Type and Content-Disposition headers that are mixed case, which are still processed by some clients.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0485::REFERENCE:CVE-2002-1978:DESCRIPTION:FTP clients sending a command with PASV in the argument can cause firewalls to misinterpret the server's error as a valid response, allowing filter bypass.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1978::REFERENCE:CVE-2002-1979:DESCRIPTION:FTP clients sending a command with PASV in the argument can cause firewalls to misinterpret the server's error as a valid response, allowing filter bypass.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1979::REFERENCE:CVE-2002-0637:DESCRIPTION:Virus product bypass with spaces between MIME header fields and the : separator, a non-standard message that is accepted by some clients.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0637::REFERENCE:CVE-2002-1777:DESCRIPTION:AV product detection bypass using inconsistency manipulation (file extension in MIME Content-Type vs. Content-Disposition field).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1777::REFERENCE:CVE-2005-3310:DESCRIPTION:CMS system allows uploads of files with GIF/JPG extensions, but if they contain HTML, Internet Explorer renders them as HTML instead of images.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3310::REFERENCE:CVE-2005-4260:DESCRIPTION:Interpretation conflict allows XSS via invalid < when a > is expected, which is treated as > by many web browsers.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-4260::REFERENCE:CVE-2005-4080:DESCRIPTION:Interpretation conflict (non-standard behavior) enables XSS because browser ignores invalid characters in the middle of tags.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-4080::",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:Multiple Interpretation Error (MIE)::TAXONOMY NAME:WASC:ENTRY ID:27:ENTRY NAME:HTTP Response Smuggling::",::105::273::34::,"",
437,"Incomplete Model of Endpoint Features",Base,Incomplete,"A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model.","",::NATURE:ChildOf:CWE ID:436:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Integrity:SCOPE:Other:IMPACT:Unexpected State:IMPACT:Varies by Context::","","","",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:Extra Unhandled Features::",,"::TYPE:Relationship:NOTE:This can be related to interaction errors, although in some cases, one of the endpoints is not performing correctly according to specification.::",
439,"Behavioral Change in New Version or Environment",Base,Draft,"A's behavior or functionality changes with a new version of A, or a new environment, which is not known (or manageable) by B.","",::NATURE:ChildOf:CWE ID:435:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","::TERM:Functional change::","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::","","","::REFERENCE:CVE-2002-1976:DESCRIPTION:Linux kernel 2.2 and above allow promiscuous mode using a different method than previous versions, and ifconfig is not aware of the new method (alternate path property).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1976::REFERENCE:CVE-2005-1711:DESCRIPTION:Product uses defunct method from another product that does not return an error code and allows detection avoidance.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1711::REFERENCE:CVE-2003-0411:DESCRIPTION:chain: Code was ported from a case-sensitive Unix platform to a case-insensitive Windows platform where filetype handlers treat .jsp and .JSP as different extensions. JSP source code may be read because .JSP defaults to the filetype text.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0411::",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:CHANGE Behavioral Change::",,"",
440,"Expected Behavior Violation",Base,Draft,"A feature, API, or function does not perform according to its specification.","",::NATURE:ChildOf:CWE ID:684:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::PHASE:Operation::","",,"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::","","","::REFERENCE:CVE-2003-0187:DESCRIPTION:Program uses large timeouts on undeserving to compensate for inconsistency of support for linked lists.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0187::REFERENCE:CVE-2003-0465:DESCRIPTION:strncpy in Linux kernel acts different than libc on x86, leading to expected behavior difference - sort of a multiple interpretation error?:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0465::REFERENCE:CVE-2005-3265:DESCRIPTION:Buffer overflow in product stems the use of a third party library function that is expected to have internal protection against overflows, but doesn't.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3265::",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:Expected behavior violation::",,"::TYPE:Theoretical:NOTE:The behavior of an application that is not consistent with the expectations of the developer may lead to incorrect use of the software.::",
441,"Unintended Proxy or Intermediary ('Confused Deputy')",Class,Draft,"The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.","If an attacker cannot directly contact a target, but the product has access to the target, then the attacker can send a request to the product and have it be forwarded to the target. The request would appear to be coming from the product's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker. Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when: The product runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component; The attacker is prevented from making the request directly to the target; and The attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, hardware IP, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources.",::NATURE:ChildOf:CWE ID:610:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:668:VIEW ID:1000::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::OPERATING SYSTEM CLASS:Not OS-Specific:OPERATING SYSTEM PREVALENCE:Undetermined::ARCHITECTURE CLASS:Not Architecture-Specific:ARCHITECTURE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::,"","::TERM:Confused Deputy:DESCRIPTION:This weakness is sometimes referred to as the Confused deputy problem, in which an attacker misused the authority of one victim (the confused deputy) when targeting another victim.::","::PHASE:Architecture and Design:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::","",,"::SCOPE:Non-Repudiation:SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:IMPACT:Hide Activities:IMPACT:Execute Unauthorized Code or Commands::","","::PHASE:Architecture and Design:DESCRIPTION:Enforce the use of strong mutual authentication mechanism between the two parties.::PHASE:Architecture and Design:DESCRIPTION:Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.::","::REFERENCE:CVE-1999-0017:DESCRIPTION:FTP bounce attack. The design of the protocol allows an attacker to modify the PORT command to cause the FTP server to connect to other machines besides the attacker's.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0017::REFERENCE:CVE-1999-0168:DESCRIPTION:RPC portmapper could redirect service requests from an attacker to another entity, which thinks the requests came from the portmapper.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0168::REFERENCE:CVE-2005-0315:DESCRIPTION:FTP server does not ensure that the IP address in a PORT command is the same as the FTP user's session, allowing port scanning by proxy.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0315::REFERENCE:CVE-2002-1484:DESCRIPTION:Web server allows attackers to request a URL from another server, including other ports, which allows proxied scanning.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1484::REFERENCE:CVE-2004-2061:DESCRIPTION:CGI script accepts and retrieves incoming URLs.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2061::REFERENCE:CVE-2001-1484:DESCRIPTION:Bounce attack allows access to TFTP from trusted side.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1484::REFERENCE:CVE-2010-1637:DESCRIPTION:Web-based mail program allows internal network scanning using a modified POP3 port number.:LINK:https://www.cve.org/CVERecord?id=CVE-2010-1637::REFERENCE:CVE-2009-0037:DESCRIPTION:URL-downloading library automatically follows redirects to file:// and scp:// URLs:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0037::",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:Unintended proxy/intermediary::TAXONOMY NAME:PLOVER:ENTRY NAME:Proxied Trusted Channel::TAXONOMY NAME:WASC:ENTRY ID:32:ENTRY NAME:Routing Detour::",::219::465::,"::TYPE:Relationship:NOTE:This weakness has a chaining relationship with CWE-668 (Exposure of Resource to Wrong Sphere) because the proxy effectively provides the attacker with access to the target's resources that the attacker cannot directly obtain.::TYPE:Maintenance:NOTE:This could possibly be considered as an emergent resource.::TYPE:Theoretical:NOTE:It could be argued that the confused deputy is a fundamental aspect of most vulnerabilities that require an active attacker. Even for common implementation issues such as buffer overflows, SQL injection, OS command injection, and path traversal, the vulnerable program already has the authorization to run code or access files. The vulnerability arises when the attacker causes the program to run unexpected code or access unexpected files.::",
444,"Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')",Base,Incomplete,"The product acts as an intermediary HTTP agent (such as a proxy or firewall) in the data flow between two entities such as a client and server, but it does not interpret malformed HTTP requests or responses in ways that are consistent with how the messages will be processed by those entities that are at the ultimate destination.","HTTP requests or responses (messages) can be malformed or unexpected in ways that cause web servers or clients to interpret the messages in different ways than intermediary HTTP agents such as load balancers, reverse proxies, web caching proxies, application firewalls, etc. For example, an adversary may be able to add duplicate or different header fields that a client or server might interpret as one set of messages, whereas the intermediary might interpret the same sequence of bytes as a different set of messages. For example, discrepancies can arise in how to handle duplicate headers like two Transfer-encoding (TE) or two Content-length (CL), or the malicious HTTP message will have different headers for TE and CL. The inconsistent parsing and interpretation of messages can allow the adversary to smuggle a message to the client/server without the intermediary being aware of it. This weakness is usually the result of the usage of outdated or incompatible HTTP protocol versions in the HTTP agents.",::NATURE:ChildOf:CWE ID:436:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:436:VIEW ID:1003:ORDINAL:Primary::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Web Based:TECHNOLOGY PREVALENCE:Undetermined::,"","::TERM:HTTP Request Smuggling::TERM:HTTP Response Smuggling::TERM:HTTP Smuggling::","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Integrity:SCOPE:Non-Repudiation:SCOPE:Access Control:IMPACT:Unexpected State:IMPACT:Hide Activities:IMPACT:Bypass Protection Mechanism:NOTE:An attacker could create HTTP messages to exploit a number of weaknesses including 1) the message can trick the web server to associate a URL with another URL's webpage and caching the contents of the webpage (web cache poisoning attack), 2) the message can be structured to bypass the firewall protection mechanisms and gain unauthorized access to a web application, and 3) the message can invoke a script or a page that returns client credentials (similar to a Cross Site Scripting attack).::","","::PHASE:Implementation:DESCRIPTION:Use a web server that employs a strict HTTP parsing procedure, such as Apache [REF-433].::PHASE:Implementation:DESCRIPTION:Use only SSL communication.::PHASE:Implementation:DESCRIPTION:Terminate the client session after each request.::PHASE:System Configuration:DESCRIPTION:Turn all pages to non-cacheable.::","::REFERENCE:CVE-2022-24766:DESCRIPTION:SSL/TLS-capable proxy allows HTTP smuggling when used in tandem with HTTP/1.0 services, due to inconsistent interpretation and input sanitization of HTTP messages within the body of another message:LINK:https://www.cve.org/CVERecord?id=CVE-2022-24766::REFERENCE:CVE-2021-37147:DESCRIPTION:Chain: caching proxy server has improper input validation (CWE-20) of headers, allowing HTTP response smuggling (CWE-444) using an LF line ending:LINK:https://www.cve.org/CVERecord?id=CVE-2021-37147::REFERENCE:CVE-2020-8287:DESCRIPTION:Node.js platform allows request smuggling via two Transfer-Encoding headers:LINK:https://www.cve.org/CVERecord?id=CVE-2020-8287::REFERENCE:CVE-2006-6276:DESCRIPTION:Web servers allow request smuggling via inconsistent HTTP headers.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-6276::REFERENCE:CVE-2005-2088:DESCRIPTION:HTTP server allows request smuggling with both a Transfer-Encoding: chunked header and a Content-Length header:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2088::REFERENCE:CVE-2005-2089:DESCRIPTION:HTTP server allows request smuggling with both a Transfer-Encoding: chunked header and a Content-Length header:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2089::",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:HTTP Request Smuggling::TAXONOMY NAME:WASC:ENTRY ID:26:ENTRY NAME:HTTP Request Smuggling::TAXONOMY NAME:WASC:ENTRY ID:27:ENTRY NAME:HTTP Response Smuggling::",::273::33::,"::TYPE:Theoretical:NOTE:Request smuggling can be performed due to a multiple interpretation error, where the target is an intermediary or monitor, via a consistency manipulation (Transfer-Encoding and Content-Length headers).::",
446,"UI Discrepancy for Security Feature",Class,Incomplete,"The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state.","When the user interface does not properly reflect what the user asks of it, then it can lead the user into a false sense of security. For example, the user might check a box to enable a security option to enable encrypted communications, but the product does not actually enable the encryption. Alternately, the user might provide a restrict ALL access control rule, but the product only implements restrict SOME.",::NATURE:ChildOf:CWE ID:684:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Primary::",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Varies by Context::","","","::REFERENCE:CVE-1999-1446:DESCRIPTION:UI inconsistency; visited URLs list not cleared when Clear History option is selected.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-1446::",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:User interface inconsistency::",,"::TYPE:Maintenance:NOTE:This entry is likely a loose composite that could be broken down into the different types of errors that cause the user interface to have incorrect interactions with the underlying security feature.::",
447,"Unimplemented or Unsupported Feature in UI",Base,Draft,"A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented.","",::NATURE:ChildOf:CWE ID:446:VIEW ID:1000::NATURE:ChildOf:CWE ID:671:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Varies by Context::","","::PHASE:Testing:DESCRIPTION:Perform functionality testing before deploying the application.::","::REFERENCE:CVE-2000-0127:DESCRIPTION:GUI configuration tool does not enable a security option when a checkbox is selected, although that option is honored when manually set in the configuration file.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0127::REFERENCE:CVE-2001-0863:DESCRIPTION:Router does not implement a specific keyword when it is used in an ACL, allowing filter bypass.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0863::REFERENCE:CVE-2001-0865:DESCRIPTION:Router does not implement a specific keyword when it is used in an ACL, allowing filter bypass.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0865::REFERENCE:CVE-2004-0979:DESCRIPTION:Web browser does not properly modify security setting when the user sets it.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0979::",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:Unimplemented or unsupported feature in UI::",,"::TYPE:Research Gap:NOTE:This issue needs more study, as there are not many examples. It is not clear whether it is primary or resultant.::",
448,"Obsolete Feature in UI",Base,Draft,"A UI function is obsolete and the product does not warn the user.","",::NATURE:ChildOf:CWE ID:446:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::","","::PHASE:Architecture and Design:DESCRIPTION:Remove the obsolete feature from the UI. Warn the user that the feature is no longer supported.::","",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:Obsolete feature in UI::",,"",
449,"The UI Performs the Wrong Action",Base,Incomplete,"The UI performs the wrong action with respect to the user's request.","",::NATURE:ChildOf:CWE ID:446:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::","","::PHASE:Testing:DESCRIPTION:Perform extensive functionality testing of the UI. The UI should behave as specified.::","::REFERENCE:CVE-2001-1387:DESCRIPTION:Network firewall accidentally implements one command line option as if it were another, possibly leading to behavioral infoleak.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1387::REFERENCE:CVE-2001-0081:DESCRIPTION:Command line option correctly suppresses a user prompt but does not properly disable a feature, although when the product prompts the user, the feature is properly disabled.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0081::REFERENCE:CVE-2002-1977:DESCRIPTION:Product does not time out according to user specification, leaving sensitive data available after it has expired.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1977::",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:The UI performs the wrong action::",,"",
450,"Multiple Interpretations of UI Input",Base,Draft,"The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation.","",::NATURE:ChildOf:CWE ID:357:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Varies by Context::","","::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::","",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:Multiple Interpretations of UI Input::",,"",
451,"User Interface (UI) Misrepresentation of Critical Information",Class,Draft,"The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.","If an attacker can cause the UI to display erroneous data, or to otherwise convince the user to display information that appears to come from a trusted source, then the attacker could trick the user into performing the wrong action. This is often a component in phishing attacks, but other kinds of problems exist. For example, if the UI is used to monitor the security state of a system or network, then omitting or obscuring an important indicator could prevent the user from detecting and reacting to a security-critical event. UI misrepresentation can take many forms: Incorrect indicator: incorrect information is displayed, which prevents the user from understanding the true state of the product or the environment the product is monitoring, especially of potentially-dangerous conditions or operations. This can be broken down into several different subtypes. Overlay: an area of the display is intended to give critical information, but another process can modify the display by overlaying another element on top of it. The user is not interacting with the expected portion of the user interface. This is the problem that enables clickjacking attacks, although many other types of attacks exist that involve overlay. Icon manipulation: the wrong icon, or the wrong color indicator, can be influenced (such as making a dangerous .EXE executable look like a harmless .GIF) Timing: the product is performing a state transition or context switch that is presented to the user with an indicator, but a race condition can cause the wrong indicator to be used before the product has fully switched context. The race window could be extended indefinitely if the attacker can trigger an error. Visual truncation: important information could be truncated from the display, such as a long filename with a dangerous extension that is not displayed in the GUI because the malicious portion is truncated. The use of excessive whitespace can also cause truncation, or place the potentially-dangerous indicator outside of the user's field of view (e.g. filename.txt .exe). A different type of truncation can occur when a portion of the information is removed due to reasons other than length, such as the accidental insertion of an end-of-input marker in the middle of an input, such as a NUL byte in a C-style string. Visual distinction: visual information might be presented in a way that makes it difficult for the user to quickly and correctly distinguish between critical and unimportant segments of the display. Homographs: letters from different character sets, fonts, or languages can appear very similar (i.e. may be visually equivalent) in a way that causes the human user to misread the text (for example, to conduct phishing attacks to trick a user into visiting a malicious web site with a visually-similar name as a trusted site). This can be regarded as a type of visual distinction issue.",::NATURE:ChildOf:CWE ID:684:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:221:VIEW ID:1000::NATURE:PeerOf:CWE ID:346:VIEW ID:1000::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Non-Repudiation:SCOPE:Access Control:IMPACT:Hide Activities:IMPACT:Bypass Protection Mechanism::","","::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Perform data validation (e.g. syntax, length, etc.) before interpreting the data.::PHASE:Architecture and Design:STRATEGY:Output Encoding:DESCRIPTION:Create a strategy for presenting information, and plan for how to display unusual characters.::","::REFERENCE:CVE-2004-2227:DESCRIPTION:Web browser's filename selection dialog only shows the beginning portion of long filenames, which can trick users into launching executables with dangerous extensions.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2227::REFERENCE:CVE-2001-0398:DESCRIPTION:Attachment with many spaces in filename bypasses dangerous content warning and uses different icon. Likely resultant.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0398::REFERENCE:CVE-2001-0643:DESCRIPTION:Misrepresentation and equivalence issue.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0643::REFERENCE:CVE-2005-0593:DESCRIPTION:Lock spoofing from several different weaknesses.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0593::REFERENCE:CVE-2004-1104:DESCRIPTION:Incorrect indicator: web browser can be tricked into presenting the wrong URL:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1104::REFERENCE:CVE-2005-0143:DESCRIPTION:Incorrect indicator: Lock icon displayed when an insecure page loads a binary file loaded from a trusted site.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0143::REFERENCE:CVE-2005-0144:DESCRIPTION:Incorrect indicator: Secure lock icon is presented for one channel, while an insecure page is being simultaneously loaded in another channel.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0144::REFERENCE:CVE-2004-0761:DESCRIPTION:Incorrect indicator: Certain redirect sequences cause security lock icon to appear in web browser, even when page is not encrypted.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0761::REFERENCE:CVE-2004-2219:DESCRIPTION:Incorrect indicator: Spoofing via multi-step attack that causes incorrect information to be displayed in browser address bar.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2219::REFERENCE:CVE-2004-0537:DESCRIPTION:Overlay: Wide favorites icon can overlay and obscure address bar:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0537::REFERENCE:CVE-2005-2271:DESCRIPTION:Visual distinction: Web browsers do not clearly associate a Javascript dialog box with the web page that generated it, allowing spoof of the source of the dialog. origin validation error of a sort?:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2271::REFERENCE:CVE-2005-2272:DESCRIPTION:Visual distinction: Web browsers do not clearly associate a Javascript dialog box with the web page that generated it, allowing spoof of the source of the dialog. origin validation error of a sort?:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2272::REFERENCE:CVE-2005-2273:DESCRIPTION:Visual distinction: Web browsers do not clearly associate a Javascript dialog box with the web page that generated it, allowing spoof of the source of the dialog. origin validation error of a sort?:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2273::REFERENCE:CVE-2005-2274:DESCRIPTION:Visual distinction: Web browsers do not clearly associate a Javascript dialog box with the web page that generated it, allowing spoof of the source of the dialog. origin validation error of a sort?:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2274::REFERENCE:CVE-2001-1410:DESCRIPTION:Visual distinction: Browser allows attackers to create chromeless windows and spoof victim's display using unprotected Javascript method.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1410::REFERENCE:CVE-2002-0197:DESCRIPTION:Visual distinction: Chat client allows remote attackers to spoof encrypted, trusted messages with lines that begin with a special sequence, which makes the message appear legitimate.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0197::REFERENCE:CVE-2005-0831:DESCRIPTION:Visual distinction: Product allows spoofing names of other users by registering with a username containing hex-encoded characters.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0831::REFERENCE:CVE-2003-1025:DESCRIPTION:Visual truncation: Special character in URL causes web browser to truncate the user portion of the user@domain URL, hiding real domain in the address bar.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1025::REFERENCE:CVE-2005-0243:DESCRIPTION:Visual truncation: Chat client does not display long filenames in file dialog boxes, allowing dangerous extensions via manipulations including (1) many spaces and (2) multiple file extensions.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0243::REFERENCE:CVE-2005-1575:DESCRIPTION:Visual truncation: Web browser file download type can be hidden using whitespace.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1575::REFERENCE:CVE-2004-2530:DESCRIPTION:Visual truncation: Visual truncation in chat client using whitespace to hide dangerous file extension.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2530::REFERENCE:CVE-2005-0590:DESCRIPTION:Visual truncation: Dialog box in web browser allows user to spoof the hostname via a long user:pass sequence in the URL, which appears before the real hostname.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0590::REFERENCE:CVE-2004-1451:DESCRIPTION:Visual truncation: Null character in URL prevents entire URL from being displayed in web browser.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-1451::REFERENCE:CVE-2004-2258:DESCRIPTION:Miscellaneous -- [step-based attack, GUI] -- Password-protected tab can be bypassed by switching to another tab, then back to original tab.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2258::REFERENCE:CVE-2005-1678:DESCRIPTION:Miscellaneous -- Dangerous file extensions not displayed.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1678::REFERENCE:CVE-2002-0722:DESCRIPTION:Miscellaneous -- Web browser allows remote attackers to misrepresent the source of a file in the File Download dialog box.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0722::",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:UI Misrepresentation of Critical Information::",::154::163::164::173::98::,"::TYPE:Maintenance:NOTE:This entry should be broken down into more precise entries. See extended description.::TYPE:Research Gap:NOTE:Misrepresentation problems are frequently studied in web browsers, but there are no known efforts for classifying these kinds of problems in terms of the shortcomings of the interface. In addition, many misrepresentation issues are resultant.::",
453,"Insecure Default Variable Initialization",Variant,Draft,"The product, by default, initializes an internal variable with an insecure or less secure value than is possible.","",::NATURE:ChildOf:CWE ID:1188:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Sometimes::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Integrity:IMPACT:Modify Application Data:NOTE:An attacker could gain access to and modify sensitive data or system information.::","","::PHASE:System Configuration:DESCRIPTION:Disable or change default settings when they can be used to abuse the system. Since those default settings are shipped with the product they are likely to be known by a potential attacker who is familiar with the product. For instance, default credentials should be changed or the associated accounts should be disabled.::","",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:Insecure default variable initialization::",,"::TYPE:Maintenance:NOTE:This overlaps other categories, probably should be split into separate items.::",
454,"External Initialization of Trusted Variables or Data Stores",Base,Draft,"The product initializes critical internal variables or data stores using inputs that can be modified by untrusted actors.","A product system should be reluctant to trust variables that have been initialized outside of its trust boundary, especially if they are initialized by users. The variables may have been initialized incorrectly. If an attacker can initialize the variable, then they can influence what the vulnerable system will do.",::NATURE:ChildOf:CWE ID:665:VIEW ID:1000:ORDINAL:Primary::NATURE:CanAlsoBe:CWE ID:456:VIEW ID:1000::,"",::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Sometimes::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Integrity:IMPACT:Modify Application Data:NOTE:An attacker could gain access to and modify sensitive data or system information.::","","::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:A product system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking (e.g. input validation) is performed when relying on input from outside a trust boundary.::PHASE:Architecture and Design:DESCRIPTION:Avoid any external control of variables. If necessary, restrict the variables that can be modified using an allowlist, and use a different namespace or naming convention if possible.::","::REFERENCE:CVE-2000-0959:DESCRIPTION:Does not clear dangerous environment variables, enabling symlink attack.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0959::REFERENCE:CVE-2001-0033:DESCRIPTION:Specify alternate configuration directory in environment variable, enabling untrusted path.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0033::REFERENCE:CVE-2001-0872:DESCRIPTION:Dangerous environment variable not cleansed.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0872::REFERENCE:CVE-2001-0084:DESCRIPTION:Specify arbitrary modules using environment variable.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0084::",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:External initialization of trusted variables or values::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP25:ENTRY NAME:Tainted input to variable::",,"::TYPE:Relationship:NOTE:Overlaps Missing variable initialization, especially in PHP.::TYPE:Applicable Platform:NOTE:This is often found in PHP due to register_globals and the common practice of storing library/include files under the web document root so that they are available using a direct request.::",
455,"Non-exit on Failed Initialization",Base,Draft,"The product does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error or a hardware security module (HSM) cannot be activated, which can cause the product to execute in a less secure fashion than intended by the administrator.","",::NATURE:ChildOf:CWE ID:665:VIEW ID:1000::NATURE:ChildOf:CWE ID:705:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:636:VIEW ID:1000::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Integrity:SCOPE:Other:IMPACT:Modify Application Data:IMPACT:Alter Execution Logic:NOTE:The application could be placed in an insecure state that may allow an attacker to modify sensitive data or allow unintended logic to be executed.::","","::PHASE:Implementation:DESCRIPTION:Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.::","::REFERENCE:CVE-2005-1345:DESCRIPTION:Product does not trigger a fatal error if missing or invalid ACLs are in a configuration file.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1345::",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:Non-exit on Failed Initialization::",,"::TYPE:Research Gap:NOTE:Under-studied. These issues are not frequently reported, and it is difficult to find published examples.::",
456,"Missing Initialization of a Variable",Variant,Draft,"The product does not initialize critical variables, which causes the execution environment to use unexpected values.","",::NATURE:ChildOf:CWE ID:909:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:665:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:665:VIEW ID:1340:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:89:VIEW ID:1000::NATURE:CanPrecede:CWE ID:120:VIEW ID:1000::NATURE:CanPrecede:CWE ID:98:VIEW ID:1000::NATURE:CanPrecede:CWE ID:457:VIEW ID:1000::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Integrity:SCOPE:Other:IMPACT:Unexpected State:IMPACT:Quality Degradation:IMPACT:Varies by Context:NOTE:The uninitialized data may be invalid, causing logic errors within the program. In some cases, this could result in a security problem.::","","::PHASE:Implementation:DESCRIPTION:Check that critical variables are initialized.::PHASE:Testing:DESCRIPTION:Use a static analysis tool to spot non-initialized variables.::","::REFERENCE:CVE-2020-6078:DESCRIPTION:Chain: The return value of a function returning a pointer is not checked for success (CWE-252) resulting in the later use of an uninitialized variable (CWE-456) and a null pointer dereference (CWE-476):LINK:https://www.cve.org/CVERecord?id=CVE-2020-6078::REFERENCE:CVE-2009-2692:DESCRIPTION:Chain: Use of an unimplemented network socket operation pointing to an uninitialized handler function (CWE-456) causes a crash because of a null pointer dereference (CWE-476).:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2692::REFERENCE:CVE-2020-20739:DESCRIPTION:A variable that has its value set in a conditional statement is sometimes used when the conditional fails, sometimes causing data leakage:LINK:https://www.cve.org/CVERecord?id=CVE-2020-20739::REFERENCE:CVE-2005-2978:DESCRIPTION:Product uses uninitialized variables for size and index, leading to resultant buffer overflow.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2978::REFERENCE:CVE-2005-2109:DESCRIPTION:Internal variable in PHP application is not initialized, allowing external modification.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2109::REFERENCE:CVE-2005-2193:DESCRIPTION:Array variable not initialized in PHP application, leading to resultant SQL injection.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2193::",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:Missing Initialization::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ERR30-C:ENTRY NAME:Set errno to zero before calling a library function known to set errno, and check errno only after the function returns a value indicating failure:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:DCL04-PL:ENTRY NAME:Always initialize local variables:MAPPING FIT:Exact::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:DCL33-PL:ENTRY NAME:Declare identifiers before using them:MAPPING FIT:Imprecise::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-456::TAXONOMY NAME:OMG ASCRM:ENTRY ID:ASCRM-CWE-456::",,"::TYPE:Relationship:NOTE:This weakness is a major factor in a number of resultant weaknesses, especially in web applications that allow global variable initialization (such as PHP) with libraries that can be directly requested.::TYPE:Research Gap:NOTE:It is highly likely that a large number of resultant weaknesses have missing initialization as a primary factor, but researcher reports generally do not provide this level of detail.::",
457,"Use of Uninitialized Variable",Variant,Draft,"The code uses a variable that has not been initialized, leading to unpredictable or unintended results.","In some languages such as C and C++, stack variables are not initialized by default. They generally contain junk data with the contents of stack memory before the function was invoked. An attacker can sometimes control or read these contents. In other languages or conditions, a variable that is not explicitly initialized can be given a default value that has security implications, depending on the logic of the program. The presence of an uninitialized variable can sometimes indicate a typographic error in the code.",::NATURE:ChildOf:CWE ID:908:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:665:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:665:VIEW ID:1340:ORDINAL:Primary::,"",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Sometimes::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Sometimes::LANGUAGE NAME:Perl:LANGUAGE PREVALENCE:Often::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Often::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation:NOTE:In C, using an uninitialized char * in some string libraries will return incorrect results, as the libraries expect the null terminator to always be at the end of a string, even if the string is empty.::","",,"::SCOPE:Availability:SCOPE:Integrity:SCOPE:Other:IMPACT:Other:NOTE:Initial variables usually contain junk, which can not be trusted for consistency. This can lead to denial of service conditions, or modify control flow in unexpected ways. In some cases, an attacker can pre-initialize the variable using previous actions, which might enable code execution. This can cause a race condition if a lock variable check passes when it should not.::SCOPE:Authorization:SCOPE:Other:IMPACT:Other:NOTE:Strings that are not initialized are especially dangerous, since many functions expect a null at the end -- and only at the end -- of a string.::","","::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Assign all variables to an initial value.::PHASE:Build and Compilation:STRATEGY:Compilation or Build Hardening:DESCRIPTION:Most compilers will complain about the use of uninitialized variables if warnings are turned on.::PHASE:Implementation Operation:DESCRIPTION:When using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.::PHASE:Requirements:DESCRIPTION:The choice could be made to use a language that is not susceptible to these issues.::PHASE:Architecture and Design:DESCRIPTION:Mitigating technologies such as safe string libraries and container abstractions could be introduced.::","::REFERENCE:CVE-2019-15900:DESCRIPTION:Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).:LINK:https://www.cve.org/CVERecord?id=CVE-2019-15900::REFERENCE:CVE-2008-3688:DESCRIPTION:Chain: A denial of service may be caused by an uninitialized variable (CWE-457) allowing an infinite loop (CWE-835) resulting from a connection to an unresponsive server.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3688::REFERENCE:CVE-2008-0081:DESCRIPTION:Uninitialized variable leads to code execution in popular desktop application.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0081::REFERENCE:CVE-2007-4682:DESCRIPTION:Crafted input triggers dereference of an uninitialized object pointer.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-4682::REFERENCE:CVE-2007-3468:DESCRIPTION:Crafted audio file triggers crash when an uninitialized variable is used.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-3468::REFERENCE:CVE-2007-2728:DESCRIPTION:Uninitialized random seed variable used.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-2728::",,,"::TAXONOMY NAME:CLASP:ENTRY NAME:Uninitialized variable::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Uninitialized Variable::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:DCL33-PL:ENTRY NAME:Declare identifiers before using them:MAPPING FIT:Imprecise::",,"",
459,"Incomplete Cleanup",Base,Draft,"The product does not properly clean up and remove temporary or supporting resources after they have been used.","",::NATURE:ChildOf:CWE ID:404:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:404:VIEW ID:1003:ORDINAL:Primary::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","::TERM:Insufficient Cleanup::","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Other:SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Other:IMPACT:Read Application Data:IMPACT:Modify Application Data:IMPACT:DoS: Resource Consumption (Other):NOTE:It is possible to overflow the number of temporary files because directories typically have limits on the number of files allowed. This could create a denial of service problem.::","","::PHASE:Architecture and Design Implementation:DESCRIPTION:Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.::","::REFERENCE:CVE-2000-0552:DESCRIPTION:World-readable temporary file not deleted after use.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0552::REFERENCE:CVE-2005-2293:DESCRIPTION:Temporary file not deleted after use, leaking database usernames and passwords.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2293::REFERENCE:CVE-2002-0788:DESCRIPTION:Interaction error creates a temporary file that can not be deleted due to strong permissions.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0788::REFERENCE:CVE-2002-2066:DESCRIPTION:Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2066::REFERENCE:CVE-2002-2067:DESCRIPTION:Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2067::REFERENCE:CVE-2002-2068:DESCRIPTION:Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2068::REFERENCE:CVE-2002-2069:DESCRIPTION:Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2069::REFERENCE:CVE-2002-2070:DESCRIPTION:Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak).:LINK:https://www.cve.org/CVERecord?id=CVE-2002-2070::REFERENCE:CVE-2005-1744:DESCRIPTION:Users not logged out when application is restarted after security-relevant changes were made.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1744::",::File Processing::,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:Incomplete Cleanup::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A10:ENTRY NAME:Insecure Configuration Management:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO42-C:ENTRY NAME:Close files when they are no longer needed:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MEM31-C:ENTRY NAME:Free dynamically allocated memory when no longer needed:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:FIO04-J:ENTRY NAME:Release resources when they are no longer needed::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:FIO00-J:ENTRY NAME:Do not operate on files in shared directories::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP14:ENTRY NAME:Failure to release resource::",,"::TYPE:Relationship:NOTE:CWE-459 is a child of CWE-404 because, while CWE-404 covers any type of improper shutdown or release of a resource, CWE-459 deals specifically with a multi-step shutdown process in which a crucial step for proper cleanup is omitted or impossible. That is, CWE-459 deals specifically with a cleanup or shutdown process that does not successfully remove all potentially sensitive data.::TYPE:Relationship:NOTE:Overlaps other categories such as permissions and containment. Concept needs further development. This could be primary (e.g. leading to infoleak) or resultant (e.g. resulting from unhandled error conditions or early termination).::",
460,"Improper Cleanup on Thrown Exception",Base,Draft,"The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.","Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening.",::NATURE:ChildOf:CWE ID:459:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:755:VIEW ID:1000::,"",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::","",,"::SCOPE:Other:IMPACT:Varies by Context:NOTE:The code could be left in a bad state.::","","::PHASE:Implementation:DESCRIPTION:If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.::","",,,"::TAXONOMY NAME:CLASP:ENTRY NAME:Improper cleanup on thrown exception::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:ERR03-J:ENTRY NAME:Restore prior object state on method failure::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:ERR05-J:ENTRY NAME:Do not let checked exceptions escape from a finally block::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:EXP31-PL:ENTRY NAME:Do not suppress or ignore exceptions:MAPPING FIT:Imprecise::",,"",
462,"Duplicate Key in Associative List (Alist)",Base,Incomplete,"Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.","A duplicate key entry -- if the alist is designed properly -- could be used as a constant time replace function. However, duplicate key entries could be inserted by mistake. Because of this ambiguity, duplicate key entries in an association list are not recommended and should not be allowed.",::NATURE:ChildOf:CWE ID:694:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::","","::PHASE:Architecture and Design:DESCRIPTION:Use a hash table instead of an alist.::PHASE:Architecture and Design:DESCRIPTION:Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.::","",,,"::TAXONOMY NAME:CLASP:ENTRY NAME:Duplicate key in associative list (alist)::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ENV02-C:ENTRY NAME:Beware of multiple environment variables with the same effective name::",,"",
463,"Deletion of Data Structure Sentinel",Base,Incomplete,"The accidental deletion of a data-structure sentinel can cause serious programming logic problems.","Often times data-structure sentinels are used to mark structure of the data structure. A common example of this is the null character at the end of strings. Another common example is linked lists which may contain a sentinel to mark the end of the list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the deletion or modification outside of some wrapper interface which provides safety.",::NATURE:ChildOf:CWE ID:707:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:464:VIEW ID:1000::,"",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Availability:SCOPE:Other:IMPACT:Other:NOTE:Generally this error will cause the data structure to not work properly.::SCOPE:Authorization:SCOPE:Other:IMPACT:Other:NOTE:If a control character, such as NULL is removed, one may cause resource access control problems.::","","::PHASE:Architecture and Design:DESCRIPTION:Use an abstraction library to abstract away risky APIs. Not a complete solution.::PHASE:Build and Compilation:STRATEGY:Compilation or Build Hardening:DESCRIPTION:Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows. For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.:EFFECTIVENESS:Defense in Depth::PHASE:Operation:DESCRIPTION:Use OS-level preventative functionality. Not a complete solution.::","",,,"::TAXONOMY NAME:CLASP:ENTRY NAME:Deletion of data-structure sentinel::",,"",
464,"Addition of Data Structure Sentinel",Base,Incomplete,"The accidental addition of a data-structure sentinel can cause serious programming logic problems.","Data-structure sentinels are often used to mark the structure of data. A common example of this is the null character at the end of strings or a special sentinel to mark the end of a linked list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the addition or modification of sentinels.",::NATURE:ChildOf:CWE ID:138:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Integrity:IMPACT:Modify Application Data:NOTE:Generally this error will cause the data structure to not work properly by truncating the data.::","","::PHASE:Implementation Architecture and Design:DESCRIPTION:Encapsulate the user from interacting with data sentinels. Validate user input to verify that sentinels are not present.::PHASE:Implementation:DESCRIPTION:Proper error checking can reduce the risk of inadvertently introducing sentinel values into data. For example, if a parsing function fails or encounters an error, it might return a value that is the same as the sentinel.::PHASE:Architecture and Design:DESCRIPTION:Use an abstraction library to abstract away risky APIs. This is not a complete solution.::PHASE:Operation:DESCRIPTION:Use OS-level preventative functionality. This is not a complete solution.::","",,,"::TAXONOMY NAME:CLASP:ENTRY NAME:Addition of data-structure sentinel::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:STR03-C:ENTRY NAME:Do not inadvertently truncate a null-terminated byte string::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:STR06-C:ENTRY NAME:Do not assume that strtok() leaves the parse string unchanged::",,"",
466,"Return of Pointer Value Outside of Expected Range",Base,Draft,"A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.","",::NATURE:ChildOf:CWE ID:119:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,"",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Memory:IMPACT:Modify Memory::","","","",,,"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Illegal Pointer Value::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::",,"::TYPE:Maintenance:NOTE:This entry should have a chaining relationship with CWE-119 instead of a parent / child relationship, however the focus of this weakness does not map cleanly to any existing entries in CWE. A new parent is being considered which covers the more generic problem of incorrect return values. There is also an abstract relationship to weaknesses in which one component sends incorrect messages to another component; in this case, one routine is sending an incorrect value to another.::",
467,"Use of sizeof() on a Pointer Type",Variant,Draft,"The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.","The use of sizeof() on a pointer can sometimes generate useful information. An obvious case is to find out the wordsize on a platform. More often than not, the appearance of sizeof(pointer) indicates a bug.",::NATURE:ChildOf:CWE ID:682:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:131:VIEW ID:1000::,"::ORDINALITY:Primary::",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Integrity:SCOPE:Confidentiality:IMPACT:Modify Memory:IMPACT:Read Memory:NOTE:This error can often cause one to allocate a buffer that is much smaller than what is needed, leading to resultant weaknesses such as buffer overflows.::","","::PHASE:Implementation:DESCRIPTION:Use expressions such as sizeof(*pointer) instead of sizeof(pointer), unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.::","",,,"::TAXONOMY NAME:CLASP:ENTRY NAME:Use of sizeof() on a pointer type::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ARR01-C:ENTRY NAME:Do not apply the sizeof operator to a pointer when taking the size of an array::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MEM35-C:ENTRY NAME:Allocate sufficient memory for an object:MAPPING FIT:CWE More Abstract::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP10:ENTRY NAME:Incorrect Buffer Length Computation::",,"",
468,"Incorrect Pointer Scaling",Base,Incomplete,"In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled.","",::NATURE:ChildOf:CWE ID:682:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation:NOTE:Programmers may try to index from a pointer by adding a number of bytes. This is incorrect because C and C++ implicitly scale the operand by the size of the data type.::","",,"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Memory:IMPACT:Modify Memory:NOTE:Incorrect pointer scaling will often result in buffer overflow conditions. Confidentiality can be compromised if the weakness is in the context of a buffer over-read or under-read.::","","::PHASE:Architecture and Design:DESCRIPTION:Use a platform with high-level memory abstractions.::PHASE:Implementation:DESCRIPTION:Always use array indexing instead of direct pointer manipulation.::PHASE:Architecture and Design:DESCRIPTION:Use technologies for preventing buffer overflows.::","",,,"::TAXONOMY NAME:CLASP:ENTRY NAME:Unintentional pointer scaling::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ARR39-C:ENTRY NAME:Do not add or subtract a scaled integer to a pointer:MAPPING FIT:Exact::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:EXP08-C:ENTRY NAME:Ensure pointer arithmetic is used correctly::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::",,"",
469,"Use of Pointer Subtraction to Determine Size",Base,Draft,"The product subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.","",::NATURE:ChildOf:CWE ID:682:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Access Control:SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Modify Memory:IMPACT:Read Memory:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Gain Privileges or Assume Identity:NOTE:There is the potential for arbitrary code execution with privileges of the vulnerable program.::","","::PHASE:Implementation:DESCRIPTION:Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to walk from one pointer to the other and calculate the difference. Always validate this number.::","",,,"::TAXONOMY NAME:CLASP:ENTRY NAME:Improper pointer subtraction::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ARR36-C:ENTRY NAME:Do not subtract or compare two pointers that do not refer to the same array:MAPPING FIT:Exact::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP7:ENTRY NAME:Faulty Pointer Use::",,"",
470,"Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')",Base,Draft,"The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.","If the product uses external inputs to determine which class to instantiate or which method to invoke, then an attacker could supply values to select unexpected classes or methods. If this occurs, then the attacker could create control flow paths that were not intended by the developer. These paths could bypass authentication or access control checks, or otherwise cause the product to behave in an unexpected manner. This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the product's classpath (CWE-427) or add new entries to the product's classpath (CWE-426). Under either of these conditions, the attacker can use reflection to introduce new, malicious behavior into the product.",::NATURE:ChildOf:CWE ID:913:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:913:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:610:VIEW ID:1000::NATURE:ChildOf:CWE ID:20:VIEW ID:700:ORDINAL:Primary::,"",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Undetermined::LANGUAGE CLASS:Interpreted:LANGUAGE PREVALENCE:Sometimes::,"","::TERM:Reflection Injection::","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Other:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Alter Execution Logic:NOTE:The attacker might be able to execute code that is not directly accessible to the attacker. Alternately, the attacker could call unexpected code in the wrong place or the wrong time, possibly modifying critical system state.::SCOPE:Availability:SCOPE:Other:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Other:NOTE:The attacker might be able to use reflection to call the wrong code, possibly with unexpected arguments that violate the API (CWE-227). This could cause the product to exit or hang.::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:By causing the wrong code to be invoked, the attacker might be able to trigger a runtime error that leaks sensitive information in the error message, such as CWE-536.::","","::PHASE:Architecture and Design:DESCRIPTION:Refactor your code to avoid using reflection.::PHASE:Architecture and Design:DESCRIPTION:Do not use user-controlled inputs to select and load classes or code.::PHASE:Implementation:DESCRIPTION:Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.::","::REFERENCE:CVE-2004-2331:DESCRIPTION:Database system allows attackers to bypass sandbox restrictions by using the Reflection APi.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-2331::",,,"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Unsafe Reflection::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:SEC06-J:ENTRY NAME:Do not use reflection to increase accessibility of classes, methods, or fields::",::138::,"",
471,"Modification of Assumed-Immutable Data (MAID)",Base,Draft,"The product does not properly protect an assumed-immutable element from being modified by an attacker.","This occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups.",::NATURE:ChildOf:CWE ID:664:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::PHASE:Architecture and Design::","",,"::SCOPE:Integrity:IMPACT:Modify Application Data:NOTE:Common data types that are attacked are environment variables, web application parameters, and HTTP headers.::SCOPE:Integrity:IMPACT:Unexpected State::","","::PHASE:Architecture and Design Operation Implementation:DESCRIPTION:When the data is stored or transmitted through untrusted sources that could modify the data, implement integrity checks to detect unauthorized modification, or store/transmit the data in a trusted location that is free from external influence.::","::REFERENCE:CVE-2002-1757:DESCRIPTION:Relies on $PHP_SELF variable for authentication.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1757::REFERENCE:CVE-2005-1905:DESCRIPTION:Gain privileges by modifying assumed-immutable code addresses that are accessed by a driver.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1905::",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:Modification of Assumed-Immutable Data::",::384::385::386::387::388::,"::TYPE:Relationship:NOTE:MAID issues can be primary to many other weaknesses, and they are a major factor in languages that provide easy access to internal program constructs, such as PHP's register_globals and similar features. However, MAID issues can also be resultant from weaknesses that modify internal state; for example, a program might validate some data and store it in memory, but a buffer overflow could overwrite that validated data, leading to a change in program logic.::TYPE:Theoretical:NOTE:There are many examples where the MUTABILITY property is a major factor in a vulnerability.::",
472,"External Control of Assumed-Immutable Web Parameter",Base,Draft,"The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.","If a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input. For example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application.",::NATURE:ChildOf:CWE ID:642:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:471:VIEW ID:1000::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","::TERM:Assumed-Immutable Parameter Tampering::","::PHASE:Implementation:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::","",,"::SCOPE:Integrity:IMPACT:Modify Application Data:NOTE:Without appropriate protection mechanisms, the client can easily tamper with cookies and similar web data. Reliance on the cookies without detailed validation can lead to problems such as SQL injection. If you use cookie values for security related decisions on the server side, manipulating the cookies might lead to violations of security policies such as authentication bypassing, user impersonation and privilege escalation. In addition, storing sensitive data in the cookie without appropriate protection can also lead to disclosure of sensitive user data, especially data stored in persistent cookies.::","","::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::","::REFERENCE:CVE-2002-0108:DESCRIPTION:Forum product allows spoofed messages of other users via hidden form fields for name and e-mail address.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0108::REFERENCE:CVE-2000-0253:DESCRIPTION:Shopping cart allows price modification via hidden form field.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0253::REFERENCE:CVE-2000-0254:DESCRIPTION:Shopping cart allows price modification via hidden form field.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0254::REFERENCE:CVE-2000-0926:DESCRIPTION:Shopping cart allows price modification via hidden form field.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0926::REFERENCE:CVE-2000-0101:DESCRIPTION:Shopping cart allows price modification via hidden form field.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0101::REFERENCE:CVE-2000-0102:DESCRIPTION:Shopping cart allows price modification via hidden form field.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0102::REFERENCE:CVE-2000-0758:DESCRIPTION:Allows admin access by modifying value of form field.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0758::REFERENCE:CVE-2002-1880:DESCRIPTION:Read messages by modifying message ID parameter.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1880::REFERENCE:CVE-2000-1234:DESCRIPTION:Send email to arbitrary users by modifying email parameter.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-1234::REFERENCE:CVE-2005-1652:DESCRIPTION:Authentication bypass by setting a parameter.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1652::REFERENCE:CVE-2005-1784:DESCRIPTION:Product does not check authorization for configuration change admin script, leading to password theft via modified e-mail address field.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1784::REFERENCE:CVE-2005-2314:DESCRIPTION:Logic error leads to password disclosure.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-2314::REFERENCE:CVE-2005-1682:DESCRIPTION:Modification of message number parameter allows attackers to read other people's messages.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-1682::",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:Web Parameter Tampering::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A4:ENTRY NAME:Insecure Direct Object Reference:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A1:ENTRY NAME:Unvalidated Input:MAPPING FIT:CWE More Specific::",::146::226::31::39::,"::TYPE:Relationship:NOTE:This is a primary weakness for many other weaknesses and functional consequences, including XSS, SQL injection, path disclosure, and file inclusion.::TYPE:Theoretical:NOTE:This is a technology-specific MAID problem.::",
473,"PHP External Variable Modification",Variant,Draft,"A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.","",::NATURE:ChildOf:CWE ID:471:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:98:VIEW ID:1000::,"",::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::","",,"::SCOPE:Integrity:IMPACT:Modify Application Data::","","::PHASE:Requirements Implementation:DESCRIPTION:Carefully identify which variables can be controlled or influenced by an external user, and consider adopting a naming convention to emphasize when externally modifiable variables are being used. An application should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary. Do not allow your application to run with register_globals enabled. If you implement a register_globals emulator, be extremely careful of variable extraction, dynamic evaluation, and similar issues, since weaknesses in your emulation could allow external variable modification to take place even without register_globals.::","::REFERENCE:CVE-2000-0860:DESCRIPTION:File upload allows arbitrary file read by setting hidden form variables to match internal variable names.:LINK:https://www.cve.org/CVERecord?id=CVE-2000-0860::REFERENCE:CVE-2001-0854:DESCRIPTION:Mistakenly trusts $PHP_SELF variable to determine if include script was called by its parent.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-0854::REFERENCE:CVE-2002-0764:DESCRIPTION:PHP remote file inclusion by modified assumed-immutable variable.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0764::REFERENCE:CVE-2001-1025:DESCRIPTION:Modify key variable when calling scripts that don't load a library that initializes it.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1025::REFERENCE:CVE-2003-0754:DESCRIPTION:Authentication bypass by modifying array used for authentication.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0754::",,,"::TAXONOMY NAME:PLOVER:ENTRY NAME:PHP External Variable Modification::",::77::,"::TYPE:Relationship:NOTE:This is a language-specific instance of Modification of Assumed-Immutable Data (MAID). This can be resultant from direct request (alternate path) issues. It can be primary to weaknesses such as PHP file inclusion, SQL injection, XSS, authentication bypass, and others.::",
474,"Use of Function with Inconsistent Implementations",Base,Draft,"The code uses a function that has inconsistent implementations across operating systems and versions.","The use of inconsistent implementations can cause changes in behavior when the code is ported or built under a different environment than the programmer expects, which can lead to security problems in some cases. The implementation of many functions varies by platform, and at times, even by different versions of the same platform. Implementation differences can include: Slight differences in the way parameters are interpreted leading to inconsistent results. Some implementations of the function carry significant security risks. The function might not be defined on all platforms. The function might change which return codes it can provide, or change the meaning of its return codes.",::NATURE:ChildOf:CWE ID:758:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Primary::ORDINALITY:Indirect::",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Often::LANGUAGE NAME:PHP:LANGUAGE PREVALENCE:Often::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::","","::PHASE:Architecture and Design Requirements:DESCRIPTION:Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.::","",,,"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Inconsistent Implementations::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::",,"",
475,"Undefined Behavior for Input to API",Base,Incomplete,"The behavior of this function is undefined unless its control parameter is set to a specific value.","",::NATURE:ChildOf:CWE ID:573:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context::","","","",,,"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Undefined Behavior::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::",,"::TYPE:Other:NOTE:The Linux Standard Base Specification 2.0.1 for libc places constraints on the arguments to some internal functions [21]. If the constraints are not met, the behavior of the functions is not defined. It is unusual for this function to be called directly. It is almost always invoked through a macro defined in a system header file, and the macro ensures that the following constraints are met: The value 1 must be passed to the third parameter (the version number) of the following file system function: __xmknod The value 2 must be passed to the third parameter (the group argument) of the following wide character string functions: __wcstod_internal __wcstof_internal __wcstol_internal __wcstold_internal __wcstoul_internal The value 3 must be passed as the first parameter (the version number) of the following file system functions: __xstat __lxstat __fxstat __xstat64 __lxstat64 __fxstat64::",
476,"NULL Pointer Dereference",Base,Stable,"A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.","NULL pointer dereference issues can occur through a number of flaws, including race conditions, and simple programming omissions.",::NATURE:ChildOf:CWE ID:710:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:754:VIEW ID:1000::NATURE:ChildOf:CWE ID:754:VIEW ID:1003:ORDINAL:Primary::,"::ORDINALITY:Resultant:DESCRIPTION:NULL pointer dereferences are frequently resultant from rarely encountered error conditions, since these are most likely to escape detection during the testing phases.::",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C#:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:Go:LANGUAGE PREVALENCE:Undetermined::,"","::TERM:NPD::TERM:null deref::TERM:nil pointer dereference:DESCRIPTION:used for access of nil in Go programs::","::PHASE:Implementation::","",,"::SCOPE:Availability:IMPACT:DoS: Crash, Exit, or Restart:NOTE:NULL pointer dereferences usually result in the failure of the process unless exception handling (on some platforms) is available and implemented. Even when exception handling is being used, it can still be very difficult to return the software to a safe state of operation.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Read Memory:IMPACT:Modify Memory:NOTE:In rare circumstances, when NULL is equivalent to the 0x0 memory address and privileged code can access it, then writing or reading memory is possible, which may lead to code execution.::","::METHOD:Automated Dynamic Analysis:DESCRIPTION:This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.:EFFECTIVENESS:Moderate::METHOD:Manual Dynamic Analysis:DESCRIPTION:Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.::","::PHASE:Implementation:DESCRIPTION:If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.::PHASE:Requirements:DESCRIPTION:The choice could be made to use a language that is not susceptible to these issues.::PHASE:Implementation:DESCRIPTION:Check the results of all functions that return a value and verify that the value is non-null before acting upon it.:EFFECTIVENESS:Moderate::PHASE:Architecture and Design:DESCRIPTION:Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.::PHASE:Implementation:DESCRIPTION:Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.::PHASE:Testing:DESCRIPTION:Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.::","::REFERENCE:CVE-2005-3274:DESCRIPTION:race condition causes a table to be corrupted if a timer activates while it is being modified, leading to resultant NULL dereference; also involves locking.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3274::REFERENCE:CVE-2002-1912:DESCRIPTION:large number of packets leads to NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1912::REFERENCE:CVE-2005-0772:DESCRIPTION:packet with invalid error status value triggers NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0772::REFERENCE:CVE-2009-4895:DESCRIPTION:Chain: race condition for an argument value, possibly resulting in NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2009-4895::REFERENCE:CVE-2020-29652:DESCRIPTION:ssh component for Go allows clients to cause a denial of service (nil pointer dereference) against SSH servers.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-29652::REFERENCE:CVE-2009-2692:DESCRIPTION:Chain: Use of an unimplemented network socket operation pointing to an uninitialized handler function (CWE-456) causes a crash because of a null pointer dereference (CWE-476).:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2692::REFERENCE:CVE-2009-3547:DESCRIPTION:Chain: race condition might allow resource to be released before operating on it, leading to NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2009-3547::REFERENCE:CVE-2009-3620:DESCRIPTION:Chain: some unprivileged ioctls do not verify that a structure has been initialized before invocation, leading to NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2009-3620::REFERENCE:CVE-2009-2698:DESCRIPTION:Chain: IP and UDP layers each track the same value with different mechanisms that can get out of sync, possibly resulting in a NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2698::REFERENCE:CVE-2009-2692:DESCRIPTION:Chain: uninitialized function pointers can be dereferenced allowing code execution:LINK:https://www.cve.org/CVERecord?id=CVE-2009-2692::REFERENCE:CVE-2009-0949:DESCRIPTION:Chain: improper initialization of memory can lead to NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2009-0949::REFERENCE:CVE-2008-3597:DESCRIPTION:Chain: game server can access player data structures before initialization has happened leading to NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2008-3597::REFERENCE:CVE-2020-6078:DESCRIPTION:Chain: The return value of a function returning a pointer is not checked for success (CWE-252) resulting in the later use of an uninitialized variable (CWE-456) and a null pointer dereference (CWE-476):LINK:https://www.cve.org/CVERecord?id=CVE-2020-6078::REFERENCE:CVE-2008-0062:DESCRIPTION:Chain: a message having an unknown message type may cause a reference to uninitialized memory resulting in a null pointer dereference (CWE-476) or dangling pointer (CWE-825), possibly crashing the system or causing heap corruption.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0062::REFERENCE:CVE-2008-5183:DESCRIPTION:Chain: unchecked return value can lead to NULL dereference:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5183::REFERENCE:CVE-2004-0079:DESCRIPTION:SSL software allows remote attackers to cause a denial of service (crash) via a crafted SSL/TLS handshake that triggers a null dereference.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0079::REFERENCE:CVE-2004-0365:DESCRIPTION:Network monitor allows remote attackers to cause a denial of service (crash) via a malformed RADIUS packet that triggers a null dereference.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0365::REFERENCE:CVE-2003-1013:DESCRIPTION:Network monitor allows remote attackers to cause a denial of service (crash) via a malformed Q.931, which triggers a null dereference.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1013::REFERENCE:CVE-2003-1000:DESCRIPTION:Chat client allows remote attackers to cause a denial of service (crash) via a passive DCC request with an invalid ID number, which causes a null dereference.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-1000::REFERENCE:CVE-2004-0389:DESCRIPTION:Server allows remote attackers to cause a denial of service (crash) via malformed requests that trigger a null dereference.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0389::REFERENCE:CVE-2004-0119:DESCRIPTION:OS allows remote attackers to cause a denial of service (crash from null dereference) or execute arbitrary code via a crafted request during authentication protocol selection.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0119::REFERENCE:CVE-2004-0458:DESCRIPTION:Game allows remote attackers to cause a denial of service (server crash) via a missing argument, which triggers a null pointer dereference.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0458::REFERENCE:CVE-2002-0401:DESCRIPTION:Network monitor allows remote attackers to cause a denial of service (crash) or execute arbitrary code via malformed packets that cause a NULL pointer dereference.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0401::",,,"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Null Dereference::TAXONOMY NAME:CLASP:ENTRY NAME:Null-pointer dereference::TAXONOMY NAME:PLOVER:ENTRY NAME:Null Dereference (Null Pointer Dereference)::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A9:ENTRY NAME:Denial of Service:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:EXP34-C:ENTRY NAME:Do not dereference null pointers:MAPPING FIT:Exact::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP7:ENTRY NAME:Faulty Pointer Use::",,"",