CWE-ID,Name,Weakness Abstraction,Status,Description,Extended Description,Related Weaknesses,Weakness Ordinalities,Applicable Platforms,Background Details,Alternate Terms,Modes Of Introduction,Exploitation Factors,Likelihood of Exploit,Common Consequences,Detection Methods,Potential Mitigations,Observed Examples,Functional Areas,Affected Resources,Taxonomy Mappings,Related Attack Patterns,Notes
524,"Use of Cache Containing Sensitive Information",Base,Incomplete,"The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.","Applications may use caches to improve efficiency when communicating with remote entities or performing intensive calculations. A cache maintains a pool of objects, threads, connections, pages, financial data, passwords, or other resources to minimize the time it takes to initialize and access these resources. If the cache is accessible to unauthorized actors, attackers can read the cache and obtain this sensitive information.",::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Implementation::","",,"::SCOPE:Confidentiality:IMPACT:Read Application Data::","","::PHASE:Architecture and Design:DESCRIPTION:Protect information stored in cache.::PHASE:Architecture and Design:DESCRIPTION:Do not store unnecessarily sensitive information in the cache.::PHASE:Architecture and Design:DESCRIPTION:Consider using encryption in the cache.::","",,,"",::204::,"",
525,"Use of Web Browser Cache Containing Sensitive Information",Variant,Incomplete,"The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached.","",::NATURE:ChildOf:CWE ID:524:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Implementation::","",,"::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:Browsers often store information in a client-side cache, which can leave behind sensitive information for other users to find and exploit, such as passwords or credit card numbers. The locations at most risk include public terminals, such as those in libraries and Internet cafes.::","","::PHASE:Architecture and Design:DESCRIPTION:Protect information stored in cache.::PHASE:Architecture and Design Implementation:DESCRIPTION:Use a restrictive caching policy for forms and web pages that potentially contain sensitive information.::PHASE:Architecture and Design:DESCRIPTION:Do not store unnecessarily sensitive information in the cache.::PHASE:Architecture and Design:DESCRIPTION:Consider using encryption in the cache.::","",,,"::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A2:ENTRY NAME:Broken Access Control:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A3:ENTRY NAME:Broken Authentication and Session Management:MAPPING FIT:CWE More Specific::",::37::,"",
526,"Cleartext Storage of Sensitive Information in an Environment Variable",Variant,Incomplete,"The product uses an environment variable to store unencrypted sensitive information.","Information stored in an environment variable can be accessible by other processes with the execution context, including child processes that dependencies are executed in, or serverless functions in cloud environments. An environment variable's contents can also be inserted into messages, headers, log files, or other outputs. Often these other dependencies have no need to use the environment variable in question. A weakness that discloses environment variables could expose this information.",::NATURE:ChildOf:CWE ID:312:VIEW ID:1000:ORDINAL:Primary::NATURE:PeerOf:CWE ID:214:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Architecture and Design::PHASE:Implementation::PHASE:Operation::","",,"::SCOPE:Confidentiality:IMPACT:Read Application Data::","","::PHASE:Architecture and Design:DESCRIPTION:Encrypt information stored in the environment variable to protect it from being exposed to an unauthorized user. If encryption is not feasible or is considered too expensive for the business use of the application, then consider using a properly protected configuration file instead of an environment variable. It should be understood that unencrypted information in a config file is also not guaranteed to be protected, but it is still a better choice, because it reduces attack surface related to weaknesses such as CWE-214. In some settings, vaults might be a feasible option for safer data transfer. Users should be notified of the business choice made to not protect the sensitive information through encryption.::PHASE:Implementation:DESCRIPTION:If the environment variable is not necessary for the desired behavior, then remove it entirely, or clear it to an empty value.::","::REFERENCE:CVE-2022-43691:DESCRIPTION:CMS shows sensitive server-side information from environment variables when run in Debug mode.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-43691::REFERENCE:CVE-2022-27195:DESCRIPTION:Plugin for an automation server inserts environment variable contents into build XML files.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-27195::REFERENCE:CVE-2022-25264:DESCRIPTION:CI/CD tool logs environment variables related to passwords add Contribution to content history.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-25264::",,,"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::",,"",
527,"Exposure of Version-Control Repository to an Unauthorized Control Sphere",Variant,Incomplete,"The product stores a CVS, git, or other repository in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.","Version control repositories such as CVS or git store version-specific metadata and other details within subdirectories. If these subdirectories are stored on a web server or added to an archive, then these could be used by an attacker. This information may include usernames, filenames, path root, IP addresses, and detailed diff data about how files have been changed - which could reveal source code snippets that were never intended to be made public.",::NATURE:ChildOf:CWE ID:552:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Operation:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::","",,"::SCOPE:Confidentiality:IMPACT:Read Application Data:IMPACT:Read Files or Directories::","","::PHASE:Operation Distribution System Configuration:DESCRIPTION:Recommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed.::","",,,"",,"",
528,"Exposure of Core Dump File to an Unauthorized Control Sphere",Variant,Draft,"The product generates a core dump file in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.","",::NATURE:ChildOf:CWE ID:552:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Operation:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::","",,"::SCOPE:Confidentiality:IMPACT:Read Application Data:IMPACT:Read Files or Directories::","","::PHASE:System Configuration:DESCRIPTION:Protect the core dump files from unauthorized access.::","",,,"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MEM06-C:ENTRY NAME:Ensure that sensitive data is not written out to disk::",,"",
529,"Exposure of Access Control List Files to an Unauthorized Control Sphere",Variant,Incomplete,"The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere.","Exposure of these access control list files may give the attacker information about the configuration of the site or system. This information may then be used to bypass the intended security policy or identify trusted systems from which an attack can be launched.",::NATURE:ChildOf:CWE ID:552:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Operation:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::","",,"::SCOPE:Confidentiality:SCOPE:Access Control:IMPACT:Read Application Data:IMPACT:Bypass Protection Mechanism::","","::PHASE:System Configuration:DESCRIPTION:Protect access control list files.::","",,,"",,"",
530,"Exposure of Backup File to an Unauthorized Control Sphere",Variant,Incomplete,"A backup file is stored in a directory or archive that is made accessible to unauthorized actors.","Often, older backup files are renamed with an extension such as .~bk to distinguish them from production files. The source code for old files that have been renamed in this manner and left in the webroot can often be retrieved. This renaming may have been performed automatically by the web server, or manually by the administrator.",::NATURE:ChildOf:CWE ID:552:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Operation:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::","",,"::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:At a minimum, an attacker who retrieves this file would have all the information contained in it, whether that be database calls, the format of parameters accepted by the application, or simply information regarding the architectural structure of your site.::","","::PHASE:Policy:DESCRIPTION:Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.::","",,,"",,"",
531,"Inclusion of Sensitive Information in Test Code",Variant,Incomplete,"Accessible test applications can pose a variety of security risks. Since developers or administrators rarely consider that someone besides themselves would even know about the existence of these applications, it is common for them to contain sensitive information or functions.","",::NATURE:ChildOf:CWE ID:540:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Testing::","",,"::SCOPE:Confidentiality:IMPACT:Read Application Data::","","::PHASE:Distribution Installation:DESCRIPTION:Remove test code before deploying the application into production.::","",,,"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP28:ENTRY NAME:Unexpected access points::",,"",
532,"Insertion of Sensitive Information into Log File",Base,Incomplete,"Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.","While logging all information may be helpful during development stages, it is important that logging levels be set appropriately before a product ships so that sensitive user data and system information are not accidentally exposed to potential attackers. Different log files may be produced and stored for: Server log files (e.g. server.log). This can give information on whatever application left the file. Usually this can give full path names and system information, and sometimes usernames and passwords. log files that are used for debugging",::NATURE:ChildOf:CWE ID:538:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:200:VIEW ID:1003:ORDINAL:Primary::,"",,"","","::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::PHASE:Implementation::PHASE:Operation::","",,"::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:Logging sensitive user data often provides attackers with an additional, less-protected path to acquiring the information.::","","::PHASE:Architecture and Design Implementation:DESCRIPTION:Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files.::PHASE:Distribution:DESCRIPTION:Remove debug log files before deploying the application into production.::PHASE:Operation:DESCRIPTION:Protect log files against unauthorized read/write.::PHASE:Implementation:DESCRIPTION:Adjust configurations appropriately when software is transitioned from a debug state to production.::","::REFERENCE:CVE-2017-9615:DESCRIPTION:verbose logging stores admin credentials in a world-readablelog file:LINK:https://www.cve.org/CVERecord?id=CVE-2017-9615::REFERENCE:CVE-2018-1999036:DESCRIPTION:SSH password for private key stored in build log:LINK:https://www.cve.org/CVERecord?id=CVE-2018-1999036::",,,"::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:FIO13-J:ENTRY NAME:Do not log sensitive information outside a trust boundary::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::",::215::,"",
535,"Exposure of Information Through Shell Error Message",Variant,Incomplete,"A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system.","",::NATURE:ChildOf:CWE ID:211:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Confidentiality:IMPACT:Read Application Data::","","","",,,"",,"",
536,"Servlet Runtime Error Message Containing Sensitive Information",Variant,Incomplete,"A servlet error message indicates that there exists an unhandled exception in your web application code and may provide useful information to an attacker.","",::NATURE:ChildOf:CWE ID:211:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Implementation::","",,"::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:The error message may contain the location of the file in which the offending function is located. This may disclose the web root's absolute path as well as give the attacker the location of application files or configuration information. It may even disclose the portion of code that failed. In many cases, an attacker can use the data to launch further attacks against the system.::","","","",,,"",,"",
537,"Java Runtime Error Message Containing Sensitive Information",Variant,Incomplete,"In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system.","",::NATURE:ChildOf:CWE ID:211:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Confidentiality:IMPACT:Read Application Data::","","::PHASE:Implementation:DESCRIPTION:Do not expose sensitive error information to the user.::","",,,"",,"",
538,"Insertion of Sensitive Information into Externally-Accessible File or Directory",Base,Draft,"The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.","",::NATURE:ChildOf:CWE ID:200:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Operation:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::","",,"::SCOPE:Confidentiality:IMPACT:Read Files or Directories::","","::PHASE:Architecture and Design Operation System Configuration:DESCRIPTION:Do not expose file and directory information to the user.::","",,,"",::95::,"::TYPE:Maintenance:NOTE:Depending on usage, this could be a weakness or a category. Further study of all its children is needed, and the entire sub-tree may need to be clarified. The current organization is based primarily on the exposure of sensitive information as a consequence, instead of as a primary weakness.::TYPE:Maintenance:NOTE:There is a close relationship with CWE-552, which is more focused on weaknesses. As a result, it may be more appropriate to convert CWE-538 to a category.::",
539,"Use of Persistent Cookies Containing Sensitive Information",Variant,Incomplete,"The web application uses persistent cookies, but the cookies contain sensitive information.","Cookies are small bits of data that are sent by the web application but stored locally in the browser. This lets the application use the cookie to pass information between pages and store variable information. The web application controls what information is stored in a cookie and how it is used. Typical types of information stored in cookies are session identifiers, personalization and customization information, and in rare cases even usernames to enable automated logins. There are two different types of cookies: session cookies and persistent cookies. Session cookies just live in the browser's memory and are not stored anywhere, but persistent cookies are stored on the browser's hard drive. This can cause security and privacy issues depending on the information stored in the cookie and how it is accessed.",::NATURE:ChildOf:CWE ID:552:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Confidentiality:IMPACT:Read Application Data::","","::PHASE:Architecture and Design:DESCRIPTION:Do not store sensitive information in persistent cookies.::","",,,"",::21::31::39::59::60::,"",
540,"Inclusion of Sensitive Information in Source Code",Base,Incomplete,"Source code on a web server or repository often contains sensitive information and should generally not be accessible to users.","There are situations where it is critical to remove source code from an area or server. For example, obtaining Perl source code on a system allows an attacker to understand the logic of the script and extract extremely useful information such as code bugs or logins and passwords.",::NATURE:ChildOf:CWE ID:538:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Implementation::","",,"::SCOPE:Confidentiality:IMPACT:Read Application Data::","","::PHASE:Architecture and Design System Configuration:DESCRIPTION:Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.::","",,,"",,"",
541,"Inclusion of Sensitive Information in an Include File",Variant,Incomplete,"If an include file source is accessible, the file can contain usernames and passwords, as well as sensitive information pertaining to the application and system.","",::NATURE:ChildOf:CWE ID:540:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Implementation::","",,"::SCOPE:Confidentiality:IMPACT:Read Application Data::","","::PHASE:Architecture and Design:DESCRIPTION:Do not store sensitive information in include files.::PHASE:Architecture and Design System Configuration:DESCRIPTION:Protect include files from being exposed.::","",,,"",,"",
543,"Use of Singleton Pattern Without Synchronization in a Multithreaded Context",Variant,Incomplete,"The product uses the singleton pattern when creating a resource within a multithreaded environment.","The use of a singleton pattern may not be thread-safe.",::NATURE:ChildOf:CWE ID:820:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:662:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:662:VIEW ID:1340:ORDINAL:Primary::,"",::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Other:SCOPE:Integrity:IMPACT:Other:IMPACT:Modify Application Data::","","::PHASE:Architecture and Design:DESCRIPTION:Use the Thread-Specific Storage Pattern. See References.::PHASE:Implementation:DESCRIPTION:Do not use member fields to store information in the Servlet. In multithreading environments, storing user data in Servlet member fields introduces a data access race condition.::PHASE:Implementation:DESCRIPTION:Avoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209).:EFFECTIVENESS:Limited::","",,,"::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:MSC07-J:ENTRY NAME:Prevent multiple instantiations of singleton objects::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP19:ENTRY NAME:Missing Lock::",,"",
544,"Missing Standardized Error Handling Mechanism",Base,Draft,"The product does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses.","If the product handles error messages individually, on a one-by-one basis, this is likely to result in inconsistent error handling. The causes of errors may be lost. Also, detailed information about the causes of an error may be unintentionally returned to the user.",::NATURE:ChildOf:CWE ID:755:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::","",,"::SCOPE:Integrity:SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Unexpected State:IMPACT:Varies by Context::","","::PHASE:Architecture and Design:DESCRIPTION:define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.::","",,,"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ERR00-C:ENTRY NAME:Adopt and implement a consistent and comprehensive error-handling policy::",,"",
546,"Suspicious Comment",Variant,Draft,"The code contains comments that suggest the presence of bugs, incomplete functionality, or weaknesses.","Many suspicious comments, such as BUG, HACK, FIXME, LATER, LATER2, TODO, in the code indicate missing security functionality and checking. Others indicate code problems that programmers should fix, such as hard-coded variables, error handling, not using stored procedures, and performance issues.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Quality Degradation:NOTE:Suspicious comments could be an indication that there are problems in the source code that may need to be fixed and is an indication of poor quality. This could lead to further bugs and the introduction of weaknesses.::","","::PHASE:Documentation:DESCRIPTION:Remove comments that suggest the presence of bugs, incomplete functionality, or weaknesses, before deploying the application.::","",,,"",,"",
547,"Use of Hard-coded, Security-relevant Constants",Variant,Draft,"The product uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change.","If the developer does not find all occurrences of the hard-coded constants, an incorrect policy decision may be made if one of the constants is not changed. Making changes to these values will require code changes that may be difficult or impossible once the system is released to the field. In addition, these hard-coded values may become available to attackers if the code is ever disclosed.",::NATURE:ChildOf:CWE ID:1078:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","","::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Varies by Context:IMPACT:Quality Degradation:NOTE:The existence of hardcoded constants could cause unexpected behavior and the introduction of weaknesses during code maintenance or when making changes to the code if all occurrences are not modified. The use of hardcoded constants is an indication of poor quality.::","","::PHASE:Implementation:DESCRIPTION:Avoid using hard-coded constants. Configuration files offer a more flexible solution.::","",,,"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:DCL06-C:ENTRY NAME:Use meaningful symbolic constants to represent literal values in program logic::",,"",
548,"Exposure of Information Through Directory Listing",Variant,Draft,"A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers.","A directory listing provides an attacker with the complete index of all the resources located inside of the directory. The specific risks and consequences vary depending on which files are listed and accessible.",::NATURE:ChildOf:CWE ID:497:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Implementation::PHASE:Operation::","",,"::SCOPE:Confidentiality:IMPACT:Read Files or Directories:NOTE:Exposing the contents of a directory can lead to an attacker gaining access to source code or providing useful information for the attacker to devise exploits, such as creation times of files or any information that may be encoded in file names. The directory listing may also compromise private or confidential data.::","","::PHASE:Architecture and Design System Configuration:DESCRIPTION:Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.::","",,,"::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A10:ENTRY NAME:Insecure Configuration Management:MAPPING FIT:CWE More Specific::TAXONOMY NAME:WASC:ENTRY ID:16:ENTRY NAME:Directory Indexing::",,"",
549,"Missing Password Field Masking",Base,Draft,"The product does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords.","",::NATURE:ChildOf:CWE ID:522:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Implementation::","",,"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::","","::PHASE:Implementation Requirements:DESCRIPTION:Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.::","",,,"",,"",
550,"Server-generated Error Message Containing Sensitive Information",Variant,Incomplete,"Certain conditions, such as network failure, will cause a server error message to be displayed.","While error messages in and of themselves are not dangerous, per se, it is what an attacker can glean from them that might cause eventual problems.",::NATURE:ChildOf:CWE ID:209:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::","",,"::SCOPE:Confidentiality:IMPACT:Read Application Data::","","::PHASE:Architecture and Design System Configuration:DESCRIPTION:Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed.::","",,,"",,"",
551,"Incorrect Behavior Order: Authorization Before Parsing and Canonicalization",Base,Incomplete,"If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.","For instance, the character strings /./ and / both mean current directory. If /SomeDirectory is a protected directory and an attacker requests /./SomeDirectory, the attacker may be able to gain access to the resource if /./ is not converted to / before the authorization check is performed.",::NATURE:ChildOf:CWE ID:863:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:696:VIEW ID:1000::,"",,"","","::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::","",,"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::","","::PHASE:Architecture and Design:DESCRIPTION:URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked.::","",,,"",,"",
552,"Files or Directories Accessible to External Parties",Base,Draft,"The product makes files or directories accessible to unauthorized actors, even though they should not be.","Web servers, FTP servers, and similar servers may store a set of files underneath a root directory that is accessible to the server's users. Applications may store sensitive files underneath this root without also using access control to limit which users may request those files, if any. Alternately, an application might package multiple files or directories into an archive file (e.g., ZIP or tar), but the application might not exclude sensitive files that are underneath those directories. In cloud technologies and containers, this weakness might present itself in the form of public (i.e., anonymous) access being allowed/overwritten to storage accounts.",::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:668:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:285:VIEW ID:1000::,"",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Not Technology-Specific:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:Cloud Computing:TECHNOLOGY PREVALENCE:Undetermined::,"","","::PHASE:Implementation:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Operation:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::","",,"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories::","","::PHASE:Implementation System Configuration Operation:DESCRIPTION:When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.::","",,::File or Directory::,"::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A10:ENTRY NAME:Insecure Configuration Management:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:FIO15-C:ENTRY NAME:Ensure that file operations are performed in a secure directory::",::150::639::,"",
553,"Command Shell in Externally Accessible Directory",Variant,Incomplete,"A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.","",::NATURE:ChildOf:CWE ID:552:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Implementation::PHASE:Operation::","",,"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:IMPACT:Execute Unauthorized Code or Commands::","","::PHASE:Installation System Configuration:DESCRIPTION:Remove any Shells accessible under the web root folder and children directories.::","",,,"",::650::,"",
554,"ASP.NET Misconfiguration: Not Using Input Validation Framework",Variant,Draft,"The ASP.NET application does not use an input validation framework.","",::NATURE:ChildOf:CWE ID:1173:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::LANGUAGE NAME:ASP.NET:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Integrity:IMPACT:Unexpected State:NOTE:Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.::","","::PHASE:Architecture and Design:DESCRIPTION:Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only T or F Free-form strings are of a reasonable length and composition::","",,,"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::",,"",
555,"J2EE Misconfiguration: Plaintext Password in Configuration File",Variant,Draft,"The J2EE application stores a plaintext password in a configuration file.","Storing a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resource, making it an easy target for attackers.",::NATURE:ChildOf:CWE ID:260:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::","","::PHASE:Architecture and Design:DESCRIPTION:Do not hardwire passwords into your software.::PHASE:Architecture and Design:DESCRIPTION:Use industry standard libraries to encrypt passwords before storage in configuration files.::","",,,"",,"",
556,"ASP.NET Misconfiguration: Use of Identity Impersonation",Variant,Incomplete,"Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges.","The use of impersonated credentials allows an ASP.NET application to run with either the privileges of the client on whose behalf it is executing or with arbitrary privileges granted in its configuration.",::NATURE:ChildOf:CWE ID:266:VIEW ID:1000:ORDINAL:Primary::,"",,"","","::PHASE:Implementation::PHASE:Operation::","",,"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity::","","::PHASE:Architecture and Design:DESCRIPTION:Use the least privilege principle.::","",,,"",,"",
558,"Use of getlogin() in Multithreaded Application",Variant,Draft,"The product uses the getlogin() function in a multithreaded context, potentially causing it to return incorrect values.","The getlogin() function returns a pointer to a string that contains the name of the user associated with the calling process. The function is not reentrant, meaning that if it is called from another process, the contents are not locked out and the value of the string can be changed by another process. This makes it very risky to use because the username can be changed by other processes, so the results of the function cannot be trusted.",::NATURE:ChildOf:CWE ID:663:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Integrity:SCOPE:Access Control:SCOPE:Other:IMPACT:Modify Application Data:IMPACT:Bypass Protection Mechanism:IMPACT:Other::","","::PHASE:Architecture and Design:DESCRIPTION:Using names for security purposes is not advised. Names are easy to forge and can have overlapping user IDs, potentially causing confusion or impersonation.::PHASE:Implementation:DESCRIPTION:Use getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username.::","",,,"::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:Often Misused: Authentication::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP3:ENTRY NAME:Use of an improper API::",,"",
560,"Use of umask() with chmod-style Argument",Variant,Draft,"The product calls umask() with an incorrect argument that is specified as if it is an argument to chmod().","",::NATURE:ChildOf:CWE ID:687:VIEW ID:1000:ORDINAL:Primary::,"",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Access Control:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories:IMPACT:Bypass Protection Mechanism::","","::PHASE:Implementation:DESCRIPTION:Use umask() with the correct argument.::PHASE:Testing:DESCRIPTION:If you suspect misuse of umask(), you can use grep to spot call instances of umask().::","",,,"",,"::TYPE:Other:NOTE:Some umask() manual pages begin with the false statement: umask sets the umask to mask & 0777 Although this behavior would better align with the usage of chmod(), where the user provided argument specifies the bits to enable on the specified file, the behavior of umask() is in fact opposite: umask() sets the umask to ~mask & 0777. The documentation goes on to describe the correct usage of umask(): The umask is used by open() to set initial file permissions on a newly-created file. Specifically, permissions in the umask are turned off from the mode argument to open(2) (so, for example, the common umask default value of 022 results in new files being created with permissions 0666 & ~022 = 0644 = rw-r--r-- in the usual case where the mode is specified as 0666).::",
561,"Dead Code",Base,Draft,"The product contains dead code, which can never be executed.","Dead code is code that can never be executed in a running program. The surrounding code makes it impossible for a section of code to ever be executed.",::NATURE:ChildOf:CWE ID:1164:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Quality Degradation:NOTE:Dead code that results from code that can never be executed is an indication of problems with the source code that needs to be fixed and is an indication of poor quality.::SCOPE:Other:IMPACT:Reduce Maintainability::","::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution:EFFECTIVENESS:SOAR Partial::METHOD:Automated Static Analysis:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Permission Manifest Analysis:EFFECTIVENESS:SOAR Partial::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source Code Quality Analyzer Cost effective for partial coverage: Warning Flags Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::","::PHASE:Implementation:DESCRIPTION:Remove dead code before deploying the application.::PHASE:Testing:DESCRIPTION:Use a static analysis tool to spot dead code.::","::REFERENCE:CVE-2014-1266:DESCRIPTION:chain: incorrect goto in Apple SSL product bypasses certificate validation, allowing Adversary-in-the-Middle (AITM) attack (Apple goto fail bug). CWE-705 (Incorrect Control Flow Scoping) -> CWE-561 (Dead Code) -> CWE-295 (Improper Certificate Validation) -> CWE-393 (Return of Wrong Status Code) -> CWE-300 (Channel Accessible by Non-Endpoint).:LINK:https://www.cve.org/CVERecord?id=CVE-2014-1266::",,,"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MSC07-C:ENTRY NAME:Detect and remove dead code::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:MSC00-PL:ENTRY NAME:Detect and remove dead code:MAPPING FIT:Exact::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP2:ENTRY NAME:Unused Entities::TAXONOMY NAME:OMG ASCMM:ENTRY ID:ASCMM-MNT-20::",,"",
562,"Return of Stack Variable Address",Base,Draft,"A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.","Because local variables are allocated on the stack, when a program returns a pointer to a local variable, it is returning a stack address. A subsequent function call is likely to re-use this same stack address, thereby overwriting the value of the pointer, which no longer corresponds to the same variable since a function's stack frame is invalidated when it returns. At best this will cause the value of the pointer to change unexpectedly. In many cases it causes the program to crash the next time the pointer is dereferenced.",::NATURE:ChildOf:CWE ID:758:VIEW ID:1000:ORDINAL:Primary::NATURE:CanPrecede:CWE ID:672:VIEW ID:1000::NATURE:CanPrecede:CWE ID:825:VIEW ID:1000::,"::ORDINALITY:Indirect::ORDINALITY:Primary::",::LANGUAGE NAME:C:LANGUAGE PREVALENCE:Undetermined::LANGUAGE NAME:C++:LANGUAGE PREVALENCE:Undetermined::,"","","::PHASE:Implementation::","",,"::SCOPE:Availability:SCOPE:Integrity:SCOPE:Confidentiality:IMPACT:Read Memory:IMPACT:Modify Memory:IMPACT:Execute Unauthorized Code or Commands:IMPACT:DoS: Crash, Exit, or Restart:NOTE:If the returned stack buffer address is dereferenced after the return, then an attacker may be able to modify or read memory, depending on how the address is used. If the address is used for reading, then the address itself may be exposed, or the contents that the address points to. If the address is used for writing, this can lead to a crash and possibly code execution.::","","::PHASE:Testing:DESCRIPTION:Use static analysis tools to spot return of the address of a stack variable.::","",,,"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:DCL30-C:ENTRY NAME:Declare objects with appropriate storage durations:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:POS34-C:ENTRY NAME:Do not call putenv() with a pointer to an automatic variable as the argument::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP1:ENTRY NAME:Glitch in computation::",,"",
563,"Assignment to Variable without Use",Variant,Draft,"The variable's value is assigned but never used, making it a dead store.","After the assignment, the variable is either assigned another value or goes out of scope. It is likely that the variable is simply vestigial, but it is also possible that the unused variable points out a bug.",::NATURE:ChildOf:CWE ID:1164:VIEW ID:1000:ORDINAL:Primary::,"::ORDINALITY:Indirect::",,"","::TERM:Unused Variable::","::PHASE:Implementation::","",,"::SCOPE:Other:IMPACT:Quality Degradation:IMPACT:Varies by Context:NOTE:This weakness could be an indication of a bug in the program or a deprecated variable that was not removed and is an indication of poor quality. This could lead to further bugs and the introduction of weaknesses.::","","::PHASE:Implementation:DESCRIPTION:Remove unused variables from the code.::","",,,"::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:MSC00-C:ENTRY NAME:Compile cleanly at high warning levels::TAXONOMY NAME:SEI CERT Perl Coding Standard:ENTRY ID:MSC01-PL:ENTRY NAME:Detect and remove unused variables:MAPPING FIT:Imprecise::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP2:ENTRY NAME:Unused Entities::",,"",
564,"SQL Injection: Hibernate",Variant,Incomplete,"Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.","",::NATURE:ChildOf:CWE ID:89:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:89:VIEW ID:928:ORDINAL:Primary::NATURE:ChildOf:CWE ID:89:VIEW ID:1305:ORDINAL:Primary::,"",,"","","::PHASE:Architecture and Design::PHASE:Implementation::","",,"::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Application Data:IMPACT:Modify Application Data::","","::PHASE:Requirements:DESCRIPTION:A non-SQL style database which is not subject to this flaw may be chosen.::PHASE:Architecture and Design:DESCRIPTION:Follow the principle of least privilege when creating user accounts to a SQL database. Users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Implementation:DESCRIPTION:Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.::PHASE:Implementation:DESCRIPTION:Use vigorous allowlist style checking on any user input that may be used in a SQL command. Rather than escape meta-characters, it is safest to disallow them entirely. Reason: Later use of data that have been entered in the database may neglect to escape meta-characters before use. Narrowly define the set of safe characters based on the expected value of the parameter in the request.::","",,,"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::",::109::,"",
565,"Reliance on Cookies without Validation and Integrity Checking",Base,Incomplete,"The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.","Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways.",::NATURE:ChildOf:CWE ID:642:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:669:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:602:VIEW ID:1000::,"",,"","","::PHASE:Architecture and Design:NOTE:OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.::PHASE:Implementation::","",,"::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to escalate an attacker's privileges to an administrative level.::","","::PHASE:Architecture and Design:DESCRIPTION:Avoid using cookie data for a security-related decision.::PHASE:Implementation:DESCRIPTION:Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.::PHASE:Architecture and Design:DESCRIPTION:Add integrity checks to detect tampering.::PHASE:Architecture and Design:DESCRIPTION:Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.::","",,,"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP29:ENTRY NAME:Faulty endpoint authentication::",::226::31::39::,"::TYPE:Relationship:NOTE:This problem can be primary to many types of weaknesses in web applications. A developer may perform proper validation against URL parameters while assuming that attackers cannot modify cookies. As a result, the program might skip basic input validation to enable cross-site scripting, SQL injection, price tampering, and other attacks..::",
566,"Authorization Bypass Through User-Controlled SQL Primary Key",Variant,Incomplete,"The product uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.","When a user can set a primary key to any value, then the user can modify the key to point to unauthorized records. Database access control errors occur when: Data enters a program from an untrusted source. The data is used to specify the value of a primary key in a SQL query. The untrusted source does not have the permissions to be able to access all rows in the associated table.",::NATURE:ChildOf:CWE ID:639:VIEW ID:1000:ORDINAL:Primary::,"",::TECHNOLOGY NAME:Database Server:TECHNOLOGY PREVALENCE:Often::,"","","::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::PHASE:Implementation::","",,"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Access Control:IMPACT:Read Application Data:IMPACT:Modify Application Data:IMPACT:Bypass Protection Mechanism::","","::PHASE:Implementation:DESCRIPTION:Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an accept known good validation strategy.::PHASE:Implementation:DESCRIPTION:Use a parameterized query AND make sure that the accepted values conform to the business rules. Construct your SQL statement accordingly.::","",,,"::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP25:ENTRY NAME:Tainted input to variable::",,"",