'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
298,"UDP Ping",Detailed,Stable,"An adversary sends a UDP datagram to the remote host to determine if the host is alive. If a UDP datagram is sent to an open UDP port there is very often no response, so a typical strategy for using a UDP ping is to send the datagram to a random high port on the target. The goal is to solicit an 'ICMP port unreachable' message from the target, indicating that the host is alive. UDP pings are useful because some firewalls are not configured to block UDP datagrams sent to strange or typically unused ports, like ports in the 65K range. Additionally, while some firewalls may filter incoming ICMP, weaknesses in firewall rule-sets may allow certain types of ICMP (host unreachable, port unreachable) which are useful for UDP ping attempts.","",,Low,"::NATURE:ChildOf:CAPEC ID:292::","","::The adversary requires the ability to send a UDP datagram to a remote host and receive a response.::The adversary requires the ability to craft custom UDP Packets for use during network reconnaissance.::The target's firewall must not be configured to block egress ICMP messages.::","","::UDP pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","::Configure your firewall to block egress ICMP messages.::","","::200::","","",
299,"TCP SYN Ping",Detailed,Stable,"An adversary uses TCP SYN packets as a means towards host discovery. Typical RFC 793 behavior specifies that when a TCP port is open, a host must respond to an incoming SYN synchronize packet by completing stage two of the 'three-way handshake' - by sending an SYN/ACK in response. When a port is closed, RFC 793 behavior is to respond with a RST reset packet. This behavior can be used to 'ping' a target to see if it is alive by sending a TCP SYN packet to a port and then looking for a RST or an ACK packet in response.","",,Low,"::NATURE:ChildOf:CAPEC ID:292::","","::The ability to send a TCP SYN packet to a remote target. Depending upon the operating system, the ability to craft SYN packets may require elevated privileges.::","::SKILL:The adversary needs to know how to craft and send protocol commands from the command line or within a tool.:LEVEL:Low::","::SYN pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","","",
3,"Using Leading 'Ghost' Character Sequences to Bypass Input Filters",Detailed,Draft,"Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ghost characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.","",Medium,Medium,"::NATURE:ChildOf:CAPEC ID:267::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and injects various leading 'Ghost' character sequences to determine how to application filters them.:TECHNIQUE:Add additional characters to common sequences such as ../ to see how the application will filter them.:TECHNIQUE:Try repeating special characters (?, @, #, *, etc.) at the beginning of user input to see how the application filters these out.::STEP:3:PHASE:Exploit:DESCRIPTION:[Bypass input filtering] Using what the adversary learned about how the application filters input data, they craft specific input data that bypasses the filter. This can lead to directory traversal attacks, arbitrary shell command execution, corruption of files, etc.::","::The targeted API must ignore the leading ghost characters that are used to get past the filters for the semantics to be the same.::","::SKILL:The ability to make an API request, and knowledge of ghost characters that will not be filtered by any input validation. These ghost characters must be known to not affect the way in which the request will be interpreted.:LEVEL:Medium::","","","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Use an allowlist rather than a denylist input validation.::Canonicalize all data prior to validation.::Take an iterative approach to input validation (defense in depth).::","::Alternate Encoding with Ghost Characters in FTP and Web Servers Some web and FTP servers fail to detect prohibited upward directory traversals if the user-supplied pathname contains extra characters such as an extra leading dot. For example, a program that will disallow access to the pathname ../test.txt may erroneously allow access to that file if the pathname is specified as .../test.txt. This attack succeeds because 1) the input validation logic fails to detect the triple-dot as a directory traversal attempt (since it isn't dot-dot), 2) some part of the input processing decided to strip off the extra dot, leaving the dot-dot behind. Using the file system API as the target, the following strings are all equivalent to many programs: .../../../test.txt............/../../test.txt..?/../../test.txt..????????/../../test.txt../test.txt As you can see, there are many ways to make a semantically equivalent request. All these strings ultimately result in a request for the file ../test.txt.::","::173::41::172::179::180::181::183::184::20::74::697::707::","","",
30,"Hijacking a Privileged Thread of Execution",Standard,Draft,"An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.","",Low,Very High,"::NATURE:ChildOf:CAPEC ID:233::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target thread] The adversary determines the underlying system thread that is subject to user-control::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain handle to thread] The adversary then gains a handle to a process thread.:TECHNIQUE:Use the OpenThread API call in Windows on a known thread.:TECHNIQUE:Cause an exception in a java privileged block public function and catch it, or catch a normal signal. The thread is then hanging and the adversary can attempt to gain a handle to it.::STEP:3:PHASE:Experiment:DESCRIPTION:[Alter process memory] Once the adversary has a handle to the target thread, they will suspend the thread and alter the memory using native OS calls.:TECHNIQUE:On Windows, use SuspendThread followed by VirtualAllocEx, WriteProcessMemory, and SetThreadContext.::STEP:4:PHASE:Exploit:DESCRIPTION:[Resume thread execution] Once the process memory has been altered to execute malicious code, the thread is then resumed.:TECHNIQUE:On Windows, use ResumeThread.::","::The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal users::In order to feasibly execute this class of attacks, the adversary must have the ability to hijack a privileged thread. This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or calling native OS calls that can suspend and alter process memory. This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.::","::SKILL:Hijacking a thread involves knowledge of how processes and threads function on the target platform, the design of the target application as well as the ability to identify the primitives to be used or manipulated to hijack the thread.:LEVEL:High::","::None: No specialized resources are required to execute this type of attack. The adversary needs to be able to latch onto a privileged thread. The adversary does, however, need to be able to program, compile, and link to the victim binaries being executed so that it will turn control of a privileged thread over to the adversary's malicious code. This is the case even if the adversary conducts the attack remotely.::","","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::","::Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.::Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.::","::Adversary targets an application written using Java's AWT, with the 1.2.2 era event model. In this circumstance, any AWTEvent originating in the underlying OS (such as a mouse click) would return a privileged thread (e.g., a system call). The adversary could choose to not return the AWT-generated thread upon consuming the event, but instead leveraging its privilege to conduct privileged operations.::","::270::","TAXONOMY NAME:ATTACK:ENTRY ID:1055.003:ENTRY NAME:Process Injection: Thread Execution Hijacking::","",
300,"Port Scanning",Standard,Stable,"An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.","",,Low,"::NATURE:ChildOf:CAPEC ID:169::","","::The adversary requires logical access to the target's network in order to carry out this type of attack.::","","::The adversary requires a network mapping/scanning tool, or must conduct socket programming on the command line. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","TAXONOMY NAME:ATTACK:ENTRY ID:1046:ENTRY NAME:Network Service Scanning::","TYPE:Other:NOTE:There are four types of port status that this type of attack aims to identify: 1) Open Port: The port is open and a firewall does not block access to the port, 2) Closed Port: The port is closed (i.e. no service resides there) and a firewall does not block access to the port, 3) Filtered Port: A firewall or ACL rule is blocking access to the port in some manner, although the presence of a listening service on the port cannot be verified, and 4) Unfiltered Port: A firewall or ACL rule is not blocking access to the port, although the presence of a listening service on the port cannot be verified.::",
301,"TCP Connect Scan",Detailed,Stable,"An adversary uses full TCP connection attempts to determine if a port is open on the target system. The scanning process involves completing a 'three-way handshake' with a remote port, and reports the port as closed if the full handshake cannot be established. An advantage of TCP connect scanning is that it works against any TCP/IP stack.","",,Low,"::NATURE:ChildOf:CAPEC ID:300::","::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary attempts to initialize a TCP connection with with the target port.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the result of their TCP connection to determine the state of the target port. A successful connection indicates a port is open with a service listening on it while a failed connection indicates the port is not open.::","::The adversary requires logical access to the target network. The TCP connect Scan requires the ability to connect to an available port and complete a 'three-way-handshake' This scanning technique does not require any special privileges in order to perform. This type of scan works against all TCP/IP stack implementations.::","","::The adversary can leverage a network mapper or scanner, or perform this attack via routine socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network to see the response.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::","::Employ a robust network defense posture that includes an IDS/IPS system.::","","::200::","","",
302,"TCP FIN Scan",Detailed,Stable,"An adversary uses a TCP FIN scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the FIN bit set in the packet header. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow the adversary to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.","",,Low,"::NATURE:ChildOf:CAPEC ID:300::","::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends TCP packets with the FIN flag but not associated with an existing connection to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.::","::FIN scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.::","","::This attack pattern requires the ability to send TCP FIN segments to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","::FIN scans are detected via heuristic (non-signature) based algorithms, much in the same way as other scan types are detected. An IDS/IPS system with heuristic algorithms is required to detect them.::","","::200::","","TYPE:Other:NOTE:Many operating systems, however, do not implement RFC 793 exactly and for this reason FIN scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports. FIN scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, FIN scanning a system protected by a stateful firewall may indicate all ports being open. For these reasons, FIN scanning results must always be interpreted as part of a larger scanning strategy.::",
303,"TCP Xmas Scan",Detailed,Stable,"An adversary uses a TCP XMAS scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with all possible flags set in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.","",,Low,"::NATURE:ChildOf:CAPEC ID:300::","::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends TCP packets with all flags set but not associated with an existing connection to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.::","::The adversary needs logical access to the target network. XMAS scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.::","","::This attack can be carried out with a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::SCOPE:Availability:TECHNICAL IMPACT:Unreliable Execution::","::Employ a robust network defensive posture that includes a managed IDS/IPS.::","","::200::","","TYPE:Other:NOTE:Many operating systems do not implement RFC 793 exactly and for this reason XMAS scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing the adversary from distinguishing between open and closed ports. XMAS scans are limited by the range of platforms against which they work.::",
304,"TCP Null Scan",Detailed,Stable,"An adversary uses a TCP NULL scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with no flags in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.","",,Low,"::NATURE:ChildOf:CAPEC ID:300::","::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends TCP packets with no flags set and that are not associated with an existing connection to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.::","::The adversary requires logical access to the target network. NULL scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.::","","::This attack can be carried out via a network mapper/scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","::Employ a robust network defensive posture that includes a managed IDS/IPS.::","","::200::","","TYPE:Other:NOTE:Many operating systems do not implement RFC 793 exactly and for this reason NULL scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing the adversary from distinguishing between open and closed ports. NULL scans are limited by the range of platforms against which they work.::",
305,"TCP ACK Scan",Detailed,Stable,"An adversary uses TCP ACK segments to gather information about firewall or ACL configuration. The purpose of this type of scan is to discover information about filter configurations rather than port state. This type of scanning is rarely useful alone, but when combined with SYN scanning, gives a more complete picture of the type of firewall rules that are present.","",,Low,"::NATURE:ChildOf:CAPEC ID:300::","::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends TCP packets with the ACK flag set and that are not associated with an existing connection to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. If a RST packet is received the target port is either closed or the ACK was sent out-of-sync. If no response is received, the target is likely using a stateful firewall.::","::The adversary requires logical access to the target network. ACK scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.::","","::This attack can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","","TYPE:Other:NOTE:If a SYN solicits a SYN/ACK or a RST and an ACK solicits a RST, the port is unfiltered by any firewall type. If a SYN solicits a SYN/ACK, but an ACK generates no response, the port is statefully filtered. When a SYN generates neither a SYN/ACK or a RST, but an ACK generates a RST, the port is statefully filtered. When neither SYN nor ACK generates any response, the port is blocked by a specific firewall rule, which can occur via any type of firewall.::",
306,"TCP Window Scan",Detailed,Stable,"An adversary engages in TCP Window scanning to analyze port status and operating system type. TCP Window scanning uses the ACK scanning method but examine the TCP Window Size field of response RST packets to make certain inferences. While TCP Window Scans are fast and relatively stealthy, they work against fewer TCP stack implementations than any other type of scan. Some operating systems return a positive TCP window size when a RST packet is sent from an open port, and a negative value when the RST originates from a closed port. TCP Window scanning is one of the most complex scan types, and its results are difficult to interpret. Window scanning alone rarely yields useful information, but when combined with other types of scanning is more useful. It is a generally more reliable means of making inference about operating system versions than port status.","",,Low,"::NATURE:ChildOf:CAPEC ID:300::","::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends TCP packets with the ACK flag set and that are not associated with an existing connection to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. Specifically, the adversary views the TCP window size from the returned RST packet if one was received. Depending on the target operating system, a positive window size may indicate an open port while a negative window size may indicate a closed port.::","::TCP Window scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.::","","::The ability to send TCP segments with a custom window size to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","","",
307,"TCP RPC Scan",Detailed,Stable,"An adversary scans for RPC services listing on a Unix/Linux host.","",,Low,"::NATURE:ChildOf:CAPEC ID:300::","::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends RCP packets to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine which, if any, RPC service is running on that port. Responses will vary based on which RPC service is running.::","::RPC scanning requires no special privileges when it is performed via a native system utility.::","","::The ability to craft custom RPC datagrams for use during network reconnaissance via native OS utilities or a port scanning tool. By tailoring the bytes injected one can scan for specific RPC-registered services. Depending upon the method used it may be necessary to sniff the network in order to see the response.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","::Typically, an IDS/IPS system is very effective against this type of attack.::","","::200::","","",
308,"UDP Scan",Detailed,Stable,"An adversary engages in UDP scanning to gather information about UDP port status on the target system. UDP scanning methods involve sending a UDP datagram to the target port and looking for evidence that the port is closed. Open UDP ports usually do not respond to UDP datagrams as there is no stateful mechanism within the protocol that requires building or establishing a session. Responses to UDP datagrams are therefore application specific and cannot be relied upon as a method of detecting an open port. UDP scanning relies heavily upon ICMP diagnostic messages in order to determine the status of a remote port.","",,Low,"::NATURE:ChildOf:CAPEC ID:300::","::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends UDP packets to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. Whether a port responds to a UDP packet is dependant on what application is listening on that port. No response does not indicate the port is not open.::","::The ability to send UDP datagrams to a host and receive ICMP error messages from that host. In cases where particular types of ICMP messaging is disallowed, the reliability of UDP scanning drops off sharply.::","","::The ability to craft custom UDP Packets for use during network reconnaissance. This can be accomplished via the use of a port scanner, or via socket manipulation in a programming or scripting language. Packet injection tools are also useful. It is also necessary to trap ICMP diagnostic messages during this process. Depending upon the method used it may be necessary to sniff the network in order to see the response.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","::Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.::UDP scanning is complicated by rate limiting mechanisms governing ICMP error messages.::","","::200::","","",
309,"Network Topology Mapping",Standard,Draft,"An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.","",,Low,"::NATURE:ChildOf:CAPEC ID:169::NATURE:CanPrecede:CAPEC ID:664::","","::None::","","::Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::","","","::200::","TAXONOMY NAME:ATTACK:ENTRY ID:1016:ENTRY NAME:System Network Configuration Discovery::::TAXONOMY NAME:ATTACK:ENTRY ID:1049:ENTRY NAME:System Network Connections Discovery::::TAXONOMY NAME:ATTACK:ENTRY ID:1590:ENTRY NAME:Gather Victim Network Information::","",
31,"Accessing/Intercepting/Modifying HTTP Cookies",Detailed,Draft,"This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.","",High,High,"::NATURE:ChildOf:CAPEC ID:39::NATURE:ChildOf:CAPEC ID:157::","::STEP:1:PHASE:Explore:DESCRIPTION:[Obtain copy of cookie] The adversary first needs to obtain a copy of the cookie. The adversary may be a legitimate end user wanting to escalate privilege, or could be somebody sniffing on a network to get a copy of HTTP cookies.:TECHNIQUE:Sniff cookie using a network sniffer such as Wireshark:TECHNIQUE:Obtain cookie using a utility such as the Firefox Cookie Manager, Chrome DevTools or AnEC Cookie Editor.:TECHNIQUE:Steal cookie via a cross-site scripting attack.:TECHNIQUE:Guess cookie contents if it contains predictable information.::STEP:2:PHASE:Experiment:DESCRIPTION:[Obtain sensitive information from cookie] The adversary may be able to get sensitive information from the cookie. The web application developers may have assumed that cookies are not accessible by end users, and thus, may have put potentially sensitive information in them.:TECHNIQUE:If cookie shows any signs of being encoded using a standard scheme such as base64, decode it.:TECHNIQUE:Analyze the cookie's contents to determine whether it contains any sensitive information.::STEP:3:PHASE:Experiment:DESCRIPTION:[Modify cookie to subvert security controls.] The adversary may be able to modify or replace cookies to bypass security controls in the application.:TECHNIQUE:Modify logical parts of cookie and send it back to server to observe the effects.:TECHNIQUE:Modify numeric parts of cookie arithmetically and send it back to server to observe the effects.:TECHNIQUE:Modify cookie bitwise and send it back to server to observe the effects.:TECHNIQUE:Replace cookie with an older legitimate cookie and send it back to server to observe the effects. This technique would be helpful in cases where the cookie contains a points balance for a given user where the points have some value. The user may spend their points and then replace their cookie with an older one to restore their balance.::","::Target server software must be a HTTP daemon that relies on cookies.::The cookies must contain sensitive information.::The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply.::","::SKILL:To overwrite session cookie data, and submit targeted attacks via HTTP:LEVEL:Low::SKILL:Exploiting a remote buffer overflow generated by attack:LEVEL:High::","::A utility that allows for the viewing and modification of cookies. Many modern web browsers support this behavior.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Design: Use input validation for cookies::Design: Generate and validate MAC for cookies::Implementation: Use SSL/TLS to protect cookie in transit::Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software.::","::There are two main attack vectors for exploiting poorly protected session variables like cookies. One is the local machine itself which can be exploited directly at the physical level or indirectly through XSS and phishing. In addition, the adversary in the middle attack (CAPEC-94) relies on a network sniffer, proxy, or other intermediary to intercept the subject's credentials and use them to impersonate the digital subject on the host. The issue is that once the credentials are intercepted, impersonation is trivial for the adversary to accomplish if no other protection mechanisms are in place. See also: CVE-2010-5148 , CVE-2016-0353::","::565::302::311::113::539::20::315::384::472::602::642::","TAXONOMY NAME:ATTACK:ENTRY ID:1539:ENTRY NAME:Steal Web Session Cookie::","",
310,"Scanning for Vulnerable Software",Detailed,Draft,"An attacker engages in scanning activity to find vulnerable software versions or types, such as operating system versions or network services. Vulnerable or exploitable network configurations, such as improperly firewalled systems, or misconfigured systems in the DMZ or external network, provide windows of opportunity for an attacker. Common types of vulnerable software include unpatched operating systems or services (e.g FTP, Telnet, SMTP, SNMP) running on open ports that the attacker has identified. Attackers usually begin probing for vulnerable software once the external network has been port scanned and potential targets have been revealed.","",,Low,"::NATURE:ChildOf:CAPEC ID:541::","","::Access to the network on which the targeted system resides.::Software tools used to probe systems over a range of ports and protocols.::","::SKILL:To probe a system remotely without detection requires careful planning and patience.:LEVEL:Medium::","::Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","","",
311,"DEPRECATED: OS Fingerprinting",Standard,Deprecated,"This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level patterns CAPEC-312 : Active OS Fingerprinting or CAPEC-313 : Passive OS Fingerprinting going forward, or to any of the detailed patterns that are children of them.","",,,"","","","","","","","","","","","",
312,"Active OS Fingerprinting",Standard,Stable,"An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:224::","","::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::","","::Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges. A tool capable of sending and receiving packets from a remote system.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Hide Activities::","","","::200::","TAXONOMY NAME:ATTACK:ENTRY ID:1082:ENTRY NAME:System Information Discovery::","",
313,"Passive OS Fingerprinting",Standard,Stable,"An adversary engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods, it is generally better able to evade detection.","",High,Low,"::NATURE:ChildOf:CAPEC ID:224::","","::The ability to monitor network communications.Access to at least one host, and the privileges to interface with the network interface card.::","","::Any tool capable of monitoring network communications, like a packet sniffer (e.g., Wireshark)::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Hide Activities::","","","::200::","TAXONOMY NAME:ATTACK:ENTRY ID:1082:ENTRY NAME:System Information Discovery::","",
314,"DEPRECATED: IP Fingerprinting Probes",Standard,Deprecated,"This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level pattern CAPEC-312 : Active OS Fingerprinting going forward, or to any of the detailed patterns that children of CAPEC-312.","",,,"","","","","","","","","","","","",
315,"DEPRECATED: TCP/IP Fingerprinting Probes",Standard,Deprecated,"This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level pattern CAPEC-312 : Active OS Fingerprinting going forward, or to any of the detailed patterns that are children of CAPEC-312.","",,,"","","","","","","","","","","","",
316,"DEPRECATED: ICMP Fingerprinting Probes",Standard,Deprecated,"This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level pattern CAPEC-312 : Active OS Fingerprinting going forward, or to any of the detailed patterns that are children of CAPEC-312.","",,,"","","","","","","","","","","","",
317,"IP ID Sequencing Probe",Detailed,Stable,"This OS fingerprinting probe analyzes the IP 'ID' field sequence number generation algorithm of a remote host. Operating systems generate IP 'ID' numbers differently, allowing an attacker to identify the operating system of the host by examining how is assigns ID numbers when generating response packets. RFC 791 does not specify how ID numbers are chosen or their ranges, so ID sequence generation differs from implementation to implementation. There are two kinds of IP 'ID' sequence number analysis - IP 'ID' Sequencing: analyzing the IP 'ID' sequence generation algorithm for one protocol used by a host and Shared IP 'ID' Sequencing: analyzing the packet ordering via IP 'ID' values spanning multiple protocols, such as between ICMP and TCP.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:312::","","","","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","","",
318,"IP 'ID' Echoed Byte-Order Probe",Detailed,Stable,"This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'ID' value from the probe packet. An attacker sends a UDP datagram with an arbitrary IP 'ID' value to a closed port on the remote host to observe the manner in which this bit is echoed back in the ICMP error message. The identification field (ID) is typically utilized for reassembling a fragmented packet. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within an ICMP error message.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:312::","","","","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","","",
319,"IP (DF) 'Don't Fragment Bit' Echoing Probe",Detailed,Stable,"This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'DF' (Don't Fragment) bit in a response packet. An attacker sends a UDP datagram with the DF bit set to a closed port on the remote host to observe whether the 'DF' bit is set in the response packet. Some operating systems will echo the bit in the ICMP error message while others will zero out the bit in the response packet.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:312::","","","","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","","",
32,"XSS Through HTTP Query Strings",Detailed,Draft,"An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser.","",High,High,"::NATURE:ChildOf:CAPEC ID:591::NATURE:ChildOf:CAPEC ID:588::NATURE:ChildOf:CAPEC ID:592::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for public links] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find.:TECHNIQUE:Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe public links for XSS vulnerability] The adversary uses the public links gathered in the Explore phase as a target list and requests variations on the URLs they spidered before. They send parameters that include variations of payloads. They record all the responses from the server that include unmodified versions of their script.:TECHNIQUE:Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.:TECHNIQUE:Change a URL parameter to include a malicious script tag.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.:TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::","::Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation.::","::SKILL:To place malicious payload on server via HTTP:LEVEL:Low::SKILL:Exploiting any information gathered by HTTP Query on script host:LEVEL:High::","::Ability to send HTTP post to scripting host and collect output::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::","::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content, including remote and user-generated content::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Session tokens for specific host::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode::","::http://user:host@example.com:8080/oradb<script>alert('Hi')</script>::Web applications that accept name value pairs in a HTTP Query string are inherently at risk to any value (or name for that matter) that an adversary would like to enter in the query string. This can be done manually via web browser or trivially scripted to post the query string to multiple sites. In the latter case, in the instance of many sites using similar infrastructure with predictable http queries being accepted and operated on (such as blogging software, Google applications, and so on), a single malicious payload can be scripted to target a wide variety of sites. Web 2.0 type sites like Technorati and del.icio.us rely on user generated content like tags to build http links that are displayed to other users. del.icio.us allows users to identify sites, tag them with metadata and provide URL, descriptions and more data. This data is then echoed back to any other web browser that is interested in the link. If the data is not validated by the del.icio.us site properly then an arbitrary code can be added into the standard http string sent to del.icio.us by the adversary, for example formatted as normal content with a URL and description and tagged as Java, and available to be clicked on (and executed by) any user browsing for Java content that clicks on this trojaned content.::","::80::","","",
320,"TCP Timestamp Probe",Detailed,Stable,"This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:312::","::STEP:1:PHASE:Explore:DESCRIPTION:[Determine if timestamps are present.] The adversary sends a probe packet to the remote host to identify if timestamps are present.::STEP:2:PHASE:Experiment:DESCRIPTION:[Record and analyze timestamp values.] If the remote host is using timestamp, obtain several timestamps, analyze them and compare them to known values.:TECHNIQUE:The adversary sends several requests and records the timestamp values.:TECHNIQUE:The adversary analyzes the timestamp values and determines an average increments per second in the timestamps for the target.:TECHNIQUE:The adversary compares this result to a database of known TCP timestamp increments for a possible match.::","::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.The target OS must support the TCP timestamp option in order to obtain a fingerprint.::","","::Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges. A tool capable of sending and receiving packets from a remote system.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism::","","","::200::","","",
321,"TCP Sequence Number Probe",Detailed,Stable,"This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:312::","","::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::","","::A tool capable of sending and receiving packets from a remote system.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","","",
322,"TCP (ISN) Greatest Common Divisor Probe",Detailed,Stable,"This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:312::","","::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::","","::A tool capable of sending and receiving packets from a remote system.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","","",
323,"TCP (ISN) Counter Rate Probe",Detailed,Stable,"This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:312::","","::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::","","::Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges. A tool capable of sending and receiving packets from a remote system.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","","",
324,"TCP (ISN) Sequence Predictability Probe",Detailed,Stable,"This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:312::","","::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::","","::A tool capable of sending and receiving packets from a remote system.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","","",
325,"TCP Congestion Control Flag (ECN) Probe",Detailed,Stable,"This OS fingerprinting probe checks to see if the remote host supports explicit congestion notification (ECN) messaging. ECN messaging was designed to allow routers to notify a remote host when signal congestion problems are occurring. Explicit Congestion Notification messaging is defined by RFC 3168. Different operating systems and versions may or may not implement ECN notifications, or may respond uniquely to particular ECN flag types.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:312::","","::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::","","::A tool capable of sending and receiving packets from a remote system.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","","",
326,"TCP Initial Window Size Probe",Detailed,Stable,"This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the connected state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:312::","","::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::","","::A tool capable of sending and receiving packets from a remote system.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","","",
327,"TCP Options Probe",Detailed,Stable,"This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:312::","","::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::","","::A tool capable of sending and receiving packets from a remote system.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","","",
328,"TCP 'RST' Flag Checksum Probe",Detailed,Stable,"This OS fingerprinting probe performs a checksum on any ASCII data contained within the data portion or a RST packet. Some operating systems will report a human-readable text message in the payload of a 'RST' (reset) packet when specific types of connection errors occur. RFC 1122 allows text payloads within reset packets but not all operating systems or routers implement this functionality.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:312::","","::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::","","::A tool capable of sending and receiving packets from a remote system.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","","",
329,"ICMP Error Message Quoting Probe",Detailed,Stable,"An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the amount of data returned or Quoted from the originating request that generated the ICMP error message.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:312::","","::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::","","::A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, Port Unreachable..::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","","",
33,"HTTP Request Smuggling",Detailed,Stable,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.","::TERM:HTTP Desync:DESCRIPTION:Modification/manipulation of HTTP message headers, request-line and body parameters to disrupt and interfere in the interpretation and parsing of HTTP message lengths/boundaries for consecutive HTTP messages by HTTP agents in a HTTP chain or network path.::",Medium,High,"::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:273::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.:TECHNIQUE:Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.::STEP:1:PHASE:Experiment:DESCRIPTION:[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP requests to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.:TECHNIQUE:Continue the monitoring of HTTP traffic.:TECHNIQUE:Utilize various combinations of HTTP Headers within a single HTTP Request such as: Content-Length & Transfer-Encoding (CL;TE), Transfer-Encoding & Content-Length (TE;CL), or double Transfer-Encoding (TE;TE), so that additional embedded requests or data in the body of the original request are unprocessed and treated as part of subsequent requests by the intended target HTTP agent. From these HTTP Header combinations the adversary observes any timing delays (usually in the form of HTTP 404 Error response) or any other unintended consequences. For CL;TE and TE;CL HTTP header combinations, the first HTTP agent, in the HTTP message path that receives the HTTP request, takes precedence or only processes one header but not the other, while the second/final HTTP agent processes the opposite header, allowing for embedded HTTP requests to be ignored and smuggled to the intended target HTTP agent. For TE;TE HTTP headers combination, all HTTP agents in HTTP message path process Transfer-Encoding header, however, adversary obfuscation (see Mitigations for details) of one of the Transfer-Encoding headers, by not adhering strictly to the protocol specification, can cause it to be unprocessed/ignored by a designated HTTP agent, hence allowing embedded HTTP requests to be smuggled. .:TECHNIQUE:Construct a very large HTTP request using multiple Content-Length headers of various data lengths that can potentially cause subsequent requests to be ignored by an intermediary HTTP agent (firewall) and/or eventually parsed separately by the target HTTP agent (web server). Note that most modern HTTP infrastructure reject HTTP requests with multiple Content-Length headers.:TECHNIQUE:Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request.::STEP:1:PHASE:Exploit:DESCRIPTION:[Perform HTTP Request Smuggling attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.:TECHNIQUE:Leverage techniques identified in the Experiment Phase.::","::An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.::Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.::HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.::","::SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:Medium::SKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:Medium::SKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium::","::Tools capable of crafting malicious HTTP messages and monitoring HTTP message responses.::","::Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.::","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::","::When using Haproxy 1.5.3 version as front-end proxy server with with Node.js version 14.13.1 or 12.19.0 as the back-end web server it is possible to use two same header fields for example: two Transfer-Encoding, Transfer-Encoding: chunked and Transfer-Encoding: chunked-false, to bypass Haproxy /flag URI restriction and receive the Haproxy flag value, since Node.js identifies the first header but ignores the second header. See also: CVE-2020-8287::When using Sun Java System Web Proxy Server 3.x or 4.x in conjunction with Sun ONE/iPlanet 6.x, Sun Java System Application Server 7.x or 8.x, it is possible to bypass certain application firewall protections, hijack web sessions, perform Cross Site Scripting or poison the web proxy cache using HTTP Request Smuggling. Differences in the way HTTP requests are parsed by the Proxy Server and the Application Server enable malicious requests to be smuggled through to the Application Server, thereby exposing the Application Server to aforementioned attacks. See also: CVE-2006-6276::Apache server 2.0.45 and version before 1.3.34, when used as a proxy, easily lead to web cache poisoning and bypassing of application firewall restrictions because of non-standard HTTP behavior. Although the HTTP/1.1 specification clearly states that a request with both Content-Length and a Transfer-Encoding: chunked headers is invalid, vulnerable versions of Apache accept such requests and reassemble the ones with Transfer-Encoding: chunked header without replacing the existing Content-Length header or adding its own. This leads to HTTP Request Smuggling using a request with a chunked body and a header with Content-Length: 0. See also: CVE-2005-2088::","::444::","TAXONOMY NAME:WASC:ENTRY ID:26:ENTRY NAME:HTTP Request Smuggling::","TYPE:Terminology:NOTE:HTTP Splitting – the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender’s intension. The messages sent are 100% valid and RFC compliant [REF-117].::::TYPE:Terminology:NOTE:HTTP Smuggling – the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender’s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way [REF-117].::::TYPE:Relationship:NOTE:HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against.::",
330,"ICMP Error Message Echoing Integrity Probe",Detailed,Stable,"An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the integrity of data returned or Quoted from the originating request that generated the error message.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:312::","","::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::","","::A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, Port Unreachable..::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::200::","","",
331,"ICMP IP Total Length Field Probe",Detailed,Stable,"An adversary sends a UDP packet to a closed port on the target machine to solicit an IP Header's total length field value within the echoed 'Port Unreachable error message. This type of behavior is useful for building a signature-base of operating system responses, particularly when error messages contain other types of information that is useful identifying specific operating system responses.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:312::","","::The ability to monitor and interact with network communications. Access to at least one host, and the privileges to interface with the network interface card.::","","::A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, Port Unreachable.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::204::","","",
332,"ICMP IP 'ID' Field Error Message Probe",Detailed,Stable,"An adversary sends a UDP datagram having an assigned value to its internet identification field (ID) to a closed port on a target to observe the manner in which this bit is echoed back in the ICMP error message. This allows the attacker to construct a fingerprint of specific OS behaviors.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:312::","","::The ability to monitor and interact with network communications. Access to at least one host, and the privileges to interface with the network interface card.::","","::A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, Port Unreachable.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::","","","::204::","","",
34,"HTTP Response Splitting",Detailed,Stable,"An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site. See CanPrecede relationships for possible consequences.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:105::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets:TECHNIQUE:Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.::STEP:1:PHASE:Experiment:DESCRIPTION:[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data (in the form of HTTP headers with custom strings and embedded web scripts and objects) into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP responses by intermediary and front-end client/victim HTTP agents. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses to intermediary and front-end client/victim HTTP agents, will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.:TECHNIQUE:Continue the monitoring of HTTP traffic.:TECHNIQUE:Utilize different sequences of special characters (CR - Carriage Return, LF - Line Feed, HT - Horizontal Tab, SP - Space and etc.) to bypass filtering and back-end encoding and to embed: additional HTTP Requests with their own headers malicious web scripts into parameters of HTTP Request headers (e.g., browser cookies like Set-Cookie or Ajax web/browser object parameters like XMLHttpRequest) adversary chosen encoding (e.g., UTF-7) to utilize additional special characters (e.g., > and <) filtered by the target HTTP agent. Note that certain special characters and character encoding may be applicable only to intermediary and front-end agents with rare configurations or that are not RFC compliant.:TECHNIQUE:Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request.::STEP:1:PHASE:Exploit:DESCRIPTION:[Perform HTTP Response Splitting attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.:TECHNIQUE:Leverage techniques identified in the Experiment Phase.::","::A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).::Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.::HTTP headers capable of being user-manipulated.::HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.::","::SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:Medium::SKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:Medium::SKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium::","::Tools capable of monitoring HTTP messages, and crafting malicious HTTP messages and/or injecting malicious content into HTTP messages.::","::Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool.::","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::","::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::","::In the PHP 5 session extension mechanism, a user-supplied session ID is sent back to the user within the Set-Cookie HTTP header. Since the contents of the user-supplied session ID are not validated, it is possible to inject arbitrary HTTP headers into the response body. This immediately enables HTTP Response Splitting by simply terminating the HTTP response header from within the session ID used in the Set-Cookie directive. See also: CVE-2006-0207::","::74::113::138::436::","TAXONOMY NAME:WASC:ENTRY ID:25:ENTRY NAME:HTTP Response Splitting::","TYPE:Terminology:NOTE:HTTP Splitting – the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender’s intension. The messages sent are 100% valid and RFC compliant [REF-117].::::TYPE:Terminology:NOTE:HTTP Smuggling – the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender’s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way [REF-117].::::TYPE:Relationship:NOTE:HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against.::",
35,"Leverage Executable Code in Non-Executable Files",Detailed,Draft,"An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:636::NATURE:PeerOf:CAPEC ID:23::NATURE:PeerOf:CAPEC ID:75::","","::The attacker must have the ability to modify non-executable files consumed by the target software.::","::SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low::","::Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Design: Enforce principle of least privilege::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.::Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute.::","::Virtually any system that relies on configuration files for runtime behavior is open to this attack vector. The configuration files are frequently stored in predictable locations, so an attacker that can fingerprint a server process such as a web server or database server can quickly identify the likely locale where the configuration is stored. And this is of course not limited to server processes. Unix shells rely on profile files to store environment variables, search paths for programs and so on. If the aliases are changed, then a standard Unix cp command can be rerouted to rm or other standard command so the user's intention is subverted.::The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser.::Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/) http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client's browser process.::The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name public grants all users with the public role the ability to use the administration functionality. < security-constraint><description>Security processing rules for admin screens</description><url-pattern>/admin/*</url-pattern><http-method>POST</http-method><http-method>GET</http-method><auth-constraint><role-name>administrator</role-name><role-name>public</role-name> </auth-constraint> </security-constraint> The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control.::","::94::96::95::97::272::59::282::270::","TAXONOMY NAME:ATTACK:ENTRY ID:1027.006:ENTRY NAME:Obfuscated Files or Information: HTML Smuggling::::TAXONOMY NAME:ATTACK:ENTRY ID:1027.009:ENTRY NAME:Obfuscated Files or Information: Embedded Payloads::::TAXONOMY NAME:ATTACK:ENTRY ID:1564.009:ENTRY NAME:Hide Artifacts: Resource Forking::","",
36,"Using Unpublished Interfaces or Functionality",Standard,Draft,"An adversary searches for and invokes interfaces or functionality that the target system designers did not intend to be publicly available. If interfaces fail to authenticate requests, the attacker may be able to invoke functionality they are not authorized for.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:113::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify services] Discover a service of interest by exploring service registry listings or by connecting on a known port or some similar means.:TECHNIQUE:Search via internet for known, published services.:TECHNIQUE:Use automated tools to scan known ports to identify internet-enabled services.:TECHNIQUE:Dump the code from the chip and then perform reverse engineering to analyze the code.::STEP:2:PHASE:Explore:DESCRIPTION:[Authenticate to service] Authenticate to the service, if required, in order to explore it.:TECHNIQUE:Use published credentials to access system.:TECHNIQUE:Find unpublished credentials to access service.:TECHNIQUE:Use other attack pattern or weakness to bypass authentication.::STEP:3:PHASE:Explore:DESCRIPTION:[Identify all interfaces] Determine the exposed interfaces by querying the registry as well as probably sniffing to expose interfaces that are not explicitly listed.:TECHNIQUE:For any published services, determine exposed interfaces via the documentation provided.:TECHNIQUE:For any services found, use error messages from poorly formed service calls to determine valid interfaces. In some cases, services will respond to poorly formed calls with valid ones.::STEP:4:PHASE:Experiment:DESCRIPTION:[Attempt to discover unpublished functions] Using manual or automated means, discover unpublished or undocumented functions exposed by the service.:TECHNIQUE:Manually attempt calls to the service using an educated guess approach, including the use of terms like' 'test', 'debug', 'delete', etc.:TECHNIQUE:Use automated tools to scan the service to attempt to reverse engineer exposed, but undocumented, features.::STEP:5:PHASE:Exploit:DESCRIPTION:[Exploit unpublished functions] Using information determined via experimentation, exploit the unpublished features of the service.:TECHNIQUE:Execute features that are not intended to be used by general system users.:TECHNIQUE:Craft malicious calls to features not intended to be used by general system users that take advantage of security flaws found in the functions.::","::The architecture under attack must publish or otherwise make available services that clients can attach to, either in an unauthenticated fashion, or having obtained an authentication token elsewhere. The service need not be 'discoverable', but in the event it isn't it must have some way of being discovered by an attacker. This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service.::","::SKILL:A number of web service digging tools are available for free that help discover exposed web services and their interfaces. In the event that a web service is not listed, the attacker does not need to know much more in addition to the format of web service messages that they can sniff/monitor for.:LEVEL:Low::","::None: No specialized resources are required to execute this type of attack. Web service digging tools may be helpful.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.::","::To an extent, Google services (such as Google Maps) are all well-known examples. Calling these services, or extending them for one's own (perhaps very different) purposes is as easy as knowing they exist. Their unencumbered public use, however, is a purposeful aspect of Google's business model. Most organizations, however, do not have the same business model. Organizations publishing services usually fall back on thoughts that Attackers will not know services exist and that even if they did, they wouldn't be able to access them because they're not on the local LAN. Simple threat modeling exercises usually uncovers simple attack vectors that can invalidate these assumptions.::","::306::693::695::1242::","","",
37,"Retrieve Embedded Sensitive Data",Detailed,Draft,"An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:167::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target] Attacker identifies client components to extract information from. These may be binary executables, class files, shared libraries (e.g., DLLs), configuration files, or other system files.:TECHNIQUE:Binary file extraction. The attacker extracts binary files from zips, jars, wars, PDFs or other composite formats.:TECHNIQUE:Package listing. The attacker uses a package manifest provided with the software installer, or the filesystem itself, to identify component files suitable for attack.::STEP:2:PHASE:Exploit:DESCRIPTION:[Retrieve Embedded Data] The attacker then uses a variety of techniques, such as sniffing, reverse-engineering, and cryptanalysis to retrieve the information of interest.:TECHNIQUE:API Profiling. The attacker monitors the software's use of registry keys or other operating system-provided storage locations that can contain sensitive information.:TECHNIQUE:Execution in simulator. The attacker physically removes mass storage from the system and explores it using a simulator, external system, or other debugging harness.:TECHNIQUE:Common decoding methods. The attacker applies methods to decode such encodings and compressions as Base64, unzip, unrar, RLE decoding, gzip decompression and so on.:TECHNIQUE:Common data typing. The attacker looks for common file signatures for well-known file types (JPEG, TIFF, ASN.1, LDIF, etc.). If the signatures match, they attempt decoding in that format.::","::In order to feasibly execute this type of attack, some valuable data must be present in client software.::Additionally, this information must be unprotected, or protected in a flawed fashion, or through a mechanism that fails to resist reverse engineering, statistical, or other attack.::","::SKILL:The attacker must possess knowledge of client code structure as well as ability to reverse-engineer or decompile it or probe it in other ways. This knowledge is specific to the technology and language used for the client distribution:LEVEL:Medium::","::The attacker must possess access to the system or code being exploited. Such access, for this set of attacks, will likely be physical. The attacker will make use of reverse engineering technologies, perhaps for data or to extract functionality from the binary. Such tool use may be as simple as Strings or a hex editor. Removing functionality may require the use of only a hex editor, or may require aspects of the toolchain used to construct the application: for instance the Adobe Flash development environment. Attacks of this nature do not require network access or undue CPU, memory, or other hardware-based resources.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","","::Using a tool such as 'strings' or similar to pull out text data, perhaps part of a database table, that extends beyond what a particular user's purview should be.::An attacker can also use a decompiler to decompile a downloaded Java applet in order to look for information such as hardcoded IP addresses, file paths, passwords or other such contents.::Attacker uses a tool such as a browser plug-in to pull cookie or other token information that, from a previous user at the same machine (perhaps a kiosk), allows the attacker to log in as the previous user.::","::226::311::525::312::314::315::318::1239::1258::1266::1272::1278::1301::1330::","TAXONOMY NAME:ATTACK:ENTRY ID:1005:ENTRY NAME:Data from Local System::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.004:ENTRY NAME:Unsecured Credentials: Private Keys::","",
38,"Leveraging/Manipulating Configuration File Search Paths",Detailed,Draft,"This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:159::","","::The attacker must be able to write to redirect search paths on the victim host.::","::SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low::","","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Design: Enforce principle of least privilege::Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program::Implementation: Host integrity monitoring::","::Another method is to redirect commands by aliasing one legitimate command to another to create unexpected results. the Unix command rm could be aliased to mv and move all files the victim thinks they are deleting to a directory the attacker controls. In a Unix shell .profile setting alias rm=mv /usr/home/attacker In this case the attacker retains a copy of all the files the victim attempts to remove.::A standard UNIX path looks similar to this /bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin If the attacker modifies the path variable to point to a locale that includes malicious resources then the user unwittingly can execute commands on the attackers' behalf: /evildir/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin This is a form of usurping control of the program and the attack can be done on the classpath, database resources, or any other resources built from compound parts. At runtime detection and blocking of this attack is nearly impossible, because the configuration allows execution.::","::426::427::","TAXONOMY NAME:ATTACK:ENTRY ID:1574.007:ENTRY NAME:Hijack Execution Flow: Path Interception by PATH Environment Variable::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.009:ENTRY NAME:Hijack Execution Flow: Path Interception by Unquoted Path::","",
383,"Harvesting Information via API Event Monitoring",Detailed,Draft,"An adversary hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the adversary creating an event within the sub-application. Assume the adversary hosts a virtual sale of rare items. As other users enter the event, the attacker records via AiTM (CAPEC-94) proxy the user_ids and usernames of everyone who attends. The adversary would then be able to spam those users within the application using an automated script.","",,Low,"::NATURE:ChildOf:CAPEC ID:407::NATURE:CanPrecede:CAPEC ID:94::","","::The target software is utilizing application framework APIs::","","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to gather information to potentially support further nefarious activities.::","::Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind.::","","::311::319::419::602::","TAXONOMY NAME:ATTACK:ENTRY ID:1056.004:ENTRY NAME:Input Capture: Credential API Hooking::","",
384,"Application API Message Manipulation via Man-in-the-Middle",Standard,Draft,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true Adversary-in-the-Middle attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.","",,Low,"::NATURE:ChildOf:CAPEC ID:94::","","::Targeted software is utilizing application framework APIs::","","::A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.::","","","","","::471::345::346::602::311::","","",
385,"Transaction or Event Tampering via Application API Manipulation",Detailed,Draft,"An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process.","",,Medium,"::NATURE:ChildOf:CAPEC ID:384::","","::Targeted software is utilizing application framework APIs::","","::A software program that allows the use of adversary-in-the-middle communications (CAPEC-94) between the client and server, such as a man-in-the-middle proxy.::","","","","","::471::345::346::602::311::","","",
386,"Application API Navigation Remapping",Standard,Draft,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.","",,Medium,"::NATURE:ChildOf:CAPEC ID:94::","","::Targeted software is utilizing application framework APIs::","","::A software program that allows the use of adversary-in-the-middle (CAPEC-94) communications between the client and server, such as a man-in-the-middle proxy.::","","","","","::471::345::346::602::311::","","",
387,"Navigation Remapping To Propagate Malicious Content",Detailed,Draft,"An adversary manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic.","",,Medium,"::NATURE:ChildOf:CAPEC ID:386::","","::Targeted software is utilizing application framework APIs::","","::A software program that allows the use of adversary-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.::","","","","","::471::345::346::602::311::","","",
388,"Application API Button Hijacking",Detailed,Draft,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination.","",,Medium,"::NATURE:ChildOf:CAPEC ID:386::","","::Targeted software is utilizing application framework APIs::","","::A software program that allows the use of adversary-in-the-middle (CAPEC-94) communications between the client and server, such as a adversary-in-the-middle (CAPEC-94) proxy.::","","","","::An in-game event occurs and the attacker traps the result, which turns out to be a form that will be populated to their primary profile. The attacker, using a MITM proxy, observes the following data: [Button][Claim_Item]Sourdough_Cookie[URL_IMG]foo[/URL_IMG][Claim_Link]bar[/Claim_Link] By altering the destination of Claim_Link to point to the attackers' server an unwitting victim can be enticed to click the link. Another example would be for the attacker to rewrite the button destinations for an event so that clicking Yes or No causes the user to load the attackers' code.::","::471::345::346::602::311::","","",