CWE-ID,Name,Weakness Abstraction,Status,Description
318,Cleartext Storage of Sensitive Information in Executable,Variant,Draft,The product stores sensitive information in cleartext in an executable.
319,Cleartext Transmission of Sensitive Information,Base,Draft,The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.
321,Use of Hard-coded Cryptographic Key,Variant,Draft,The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.
322,Key Exchange without Entity Authentication,Base,Draft,The product performs a key exchange with an actor without verifying the identity of that actor.
323,Reusing a Nonce, Key Pair in Encryption,Variant,Incomplete,Nonces should be used for the present occasion and only once.
324,Use of a Key Past its Expiration Date,Base,Draft,The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.
325,Missing Cryptographic Step,Base,Draft,The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by the algorithm.
326,Inadequate Encryption Strength,Class,Draft,The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.
327,Use of a Broken or Risky Cryptographic Algorithm,Class,Draft,The product uses a broken or risky cryptographic algorithm or protocol.
328,Use of Weak Hash,Base,Draft,The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).
329,Generation of Predictable IV with CBC Mode,Variant,Draft,The product generates and uses a predictable initialization Vector (IV) with Cipher Block Chaining (CBC) Mode, which causes algorithms to be susceptible to dictionary attacks when they are encrypted under the same key.
330,Use of Insufficiently Random Values,Class,Stable,The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.
331,Insufficient Entropy,Base,Draft,The product uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.
332,Insufficient Entropy in PRNG,Variant,Draft,The lack of entropy available for, or used by, a Pseudo-Random Number Generator (PRNG) can be a stability and security threat.
333,Improper Handling of Insufficient Entropy in TRNG,Variant,Draft,True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block.
334,Small Space of Random Values,Base,Draft,The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks.
335,Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG),Base,Draft,The product uses a Pseudo-Random Number Generator (PRNG) but does not correctly manage seeds.
336,Same Seed in Pseudo-Random Number Generator (PRNG),Variant,Draft,A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized.
337,Predictable Seed in Pseudo-Random Number Generator (PRNG),Variant,Draft,A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.
338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG),Base,Draft,The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong.
339,Small Seed Space in PRNG,Variant,Draft,A Pseudo-Random Number Generator (PRNG) uses a relatively small seed space, which makes it more susceptible to brute force attacks.
340,Generation of Predictable Numbers or Identifiers,Class,Incomplete,The product uses a scheme that generates numbers or identifiers that are more predictable than required.
341,Predictable from Observable State,Base,Draft,A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc.
342,Predictable Exact Value from Previous Values,Base,Draft,An exact value or random number can be precisely predicted by observing previous values.
343,Predictable Value Range from Previous Values,Base,Draft,The product's random number generator produces a series of values which, when observed, can be used to infer a relatively small range of possibilities for the next value that could be generated.
344,Use of Invariant Value in Dynamically Changing Context,Base,Draft,The product uses a constant value, name, or reference, but this value can (or should) vary across different environments.
345,Insufficient Verification of Data Authenticity,Class,Draft,The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.
346,Origin Validation Error,Class,Draft,The product does not properly verify that the source of data or communication is valid.
347,Improper Verification of Cryptographic Signature,Base,Draft,The product does not verify, or incorrectly verifies, the cryptographic signature for data.
348,Use of Less Trusted Source,Base,Draft,The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.
349,Acceptance of Extraneous Untrusted Data With Trusted Data,Base,Draft,The product, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.
350,Reliance on Reverse DNS Resolution for a Security-Critical Action,Variant,Draft,The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.
351,Insufficient Type Distinction,Base,Draft,The product does not properly distinguish between different types of elements in a way that leads to insecure behavior.
352,Cross-Site Request Forgery (CSRF),Compound,Stable,The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.
353,Missing Support for Integrity Check,Base,Draft,The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.
354,Improper Validation of Integrity Check Value,Base,Draft,The product does not validate or incorrectly validates the integrity check values or checksums of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.
356,Product UI does not Warn User of Unsafe Actions,Base,Incomplete,The product's user interface does not warn the user before undertaking an unsafe action on behalf of that user. This makes it easier for attackers to trick users into inflicting damage to their system.
357,Insufficient UI Warning of Dangerous Operations,Base,Draft,The user interface provides a warning to a user regarding dangerous or sensitive operations, but the warning is not noticeable enough to warrant attention.
358,Improperly Implemented Security Check for Standard,Base,Draft,The product does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique.
359,Exposure of Private Personal Information to an Unauthorized Actor,Base,Incomplete,The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.
360,Trust of System Event Data,Base,Incomplete,Security based on event locations are insecure and can be spoofed.
362,Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'),Class,Draft,The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.
363,Race Condition Enabling Link Following,Base,Draft,The product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.
364,Signal Handler Race Condition,Base,Incomplete,The product uses a signal handler that introduces a race condition.
366,Race Condition within a Thread,Base,Draft,If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.
367,Time-of-check Time-of-use (TOCTOU) Race Condition,Base,Incomplete,The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.
368,Context Switching Race Condition,Base,Draft,A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.
369,Divide By Zero,Base,Draft,The product divides a value by zero.
370,Missing Check for Certificate Revocation after Initial Check,Variant,Draft,The product does not check the revocation status of a certificate after its initial revocation check, which can cause the product to perform privileged actions even after the certificate is revoked at a later time.
372,Incomplete Internal State Distinction,Base,Draft,The product does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.
374,Passing Mutable Objects to an Untrusted Method,Base,Draft,The product sends non-cloned mutable data as an argument to a method or function.
375,Returning a Mutable Object to an Untrusted Caller,Base,Draft,Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function.
377,Insecure Temporary File,Class,Incomplete,Creating and using insecure temporary files can leave application and system data vulnerable to attack.
378,Creation of Temporary File With Insecure Permissions,Base,Draft,Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack.
379,Creation of Temporary File in Directory with Insecure Permissions,Base,Incomplete,The product creates a temporary file in a directory whose permissions allow unintended actors to determine the file's existence or otherwise access that file.
382,J2EE Bad Practices: Use of System.exit(),Variant,Draft,A J2EE application uses System.exit(), which also shuts down its container.
383,J2EE Bad Practices: Direct Use of Threads,Variant,Draft,Thread management in a Web application is forbidden in some circumstances and is always highly error prone.
384,Session Fixation,Compound,Incomplete,Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.
385,Covert Timing Channel,Base,Incomplete,Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.
386,Symbolic Name not Mapping to Correct Object,Base,Draft,A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time.
390,Detection of Error Condition Without Action,Base,Draft,The product detects a specific error, but takes no actions to handle the error.
391,Unchecked Error Condition,Base,Incomplete,[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES AND CONSIDER CWE-252, CWE-248, OR CWE-1069.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.
392,Missing Report of Error Condition,Base,Draft,The product encounters an error but does not provide a status code or return value to indicate that an error has occurred.
393,Return of Wrong Status Code,Base,Draft,A function or operation returns an incorrect return value or status code that does not indicate an error, but causes the product to modify its behavior based on the incorrect result.
394,Unexpected Status Code or Return Value,Base,Draft,The product does not properly check when a function or operation returns a value that is legitimate for the function, but is not expected by the product.
395,Use of NullPointerException Catch to Detect NULL Pointer Dereference,Base,Draft,Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.
396,Declaration of Catch for Generic Exception,Base,Draft,Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.
397,Declaration of Throws for Generic Exception,Base,Draft,Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.
400,Uncontrolled Resource Consumption,Class,Draft,The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.
401,Missing Release of Memory after Effective Lifetime,Variant,Draft,The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.
402,Transmission of Private Resources into a New Sphere ('Resource Leak'),Class,Draft,The product makes resources available to untrusted parties when those resources are only intended to be accessed by the product.
403,Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak'),Base,Draft,A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors.
404,Improper Resource Shutdown or Release,Class,Draft,The product does not release or incorrectly releases a resource before it is made available for re-use.
405,Asymmetric Resource Consumption (Amplification),Class,Incomplete,The product does not properly control situations in which an adversary can cause the product to consume or produce excessive resources without requiring the adversary to invest equivalent work or otherwise prove authorization, i.e., the adversary's influence is asymmetric.
406,Insufficient Control of Network Message Volume (Network Amplification),Class,Incomplete,The product does not sufficiently monitor or control transmitted network traffic volume, so that an actor can cause the product to transmit more traffic than should be allowed for that actor.
407,Inefficient Algorithmic Complexity,Class,Incomplete,An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.
408,Incorrect Behavior Order: Early Amplification,Base,Draft,The product allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place.
409,Improper Handling of Highly Compressed Data (Data Amplification),Base,Incomplete,The product does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output.
410,Insufficient Resource Pool,Base,Incomplete,The product's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources.
412,Unrestricted Externally Accessible Lock,Base,Incomplete,The product properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control.
413,Improper Resource Locking,Base,Draft,The product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.
414,Missing Lock Check,Base,Draft,A product does not check to see if a lock is present before performing sensitive operations on a resource.
415,Double Free,Variant,Draft,The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.
416,Use After Free,Variant,Stable,Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.
419,Unprotected Primary Channel,Base,Draft,The product uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.
420,Unprotected Alternate Channel,Base,Draft,The product protects a primary channel, but it does not use the same level of protection for an alternate channel.
421,Race Condition During Access to Alternate Channel,Base,Draft,The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors.
422,Unprotected Windows Messaging Channel ('Shatter'),Variant,Draft,The product does not properly verify the source of a message in the Windows Messaging System while running at elevated privileges, creating an alternate channel through which an attacker can directly send a message to the product.
424,Improper Protection of Alternate Path,Class,Draft,The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.
425,Direct Request ('Forced Browsing'),Base,Incomplete,The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.
426,Untrusted Search Path,Base,Stable,The product searches for critical resources using an externally-supplied search path that can point to resources that are not under the product's direct control.
427,Uncontrolled Search Path Element,Base,Draft,The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.
428,Unquoted Search Path or Element,Base,Draft,The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path.
430,Deployment of Wrong Handler,Base,Incomplete,The wrong handler is assigned to process an object.
431,Missing Handler,Base,Draft,A handler is not available or implemented.
432,Dangerous Signal Handler not Disabled During Sensitive Operations,Base,Draft,The product uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running.
433,Unparsed Raw Web Content Delivery,Variant,Incomplete,The product stores raw content or supporting code under the web document root with an extension that is not specifically handled by the server.
434,Unrestricted Upload of File with Dangerous Type,Base,Draft,The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.
435,Improper Interaction Between Multiple Correctly-Behaving Entities,Pillar,Draft,An interaction error occurs when two entities have correct behavior when running independently of each other, but when they are integrated as components in a larger system or process, they introduce incorrect behaviors that may cause resultant weaknesses.
436,Interpretation Conflict,Class,Incomplete,Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.
437,Incomplete Model of Endpoint Features,Base,Incomplete,A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model.
439,Behavioral Change in New Version or Environment,Base,Draft,A's behavior or functionality changes with a new version of A, or a new environment, which is not known (or manageable) by B.
440,Expected Behavior Violation,Base,Draft,A feature, API, or function does not perform according to its specification.
441,Unintended Proxy or Intermediary ('Confused Deputy'),Class,Draft,The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.
444,Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling'),Base,Incomplete,The product acts as an intermediary HTTP agent (such as a proxy or firewall) in the data flow between two entities such as a client and server, but it does not interpret malformed HTTP requests or responses in ways that are consistent with how the messages will be processed by those entities that are at the ultimate destination.
446,UI Discrepancy for Security Feature,Class,Incomplete,The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state.
447,Unimplemented or Unsupported Feature in UI,Base,Draft,A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented.
448,Obsolete Feature in UI,Base,Draft,A UI function is obsolete and the product does not warn the user.
449,The UI Performs the Wrong Action,Base,Incomplete,The UI performs the wrong action with respect to the user's request.
450,Multiple Interpretations of UI Input,Base,Draft,The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation.
451,User Interface (UI) Misrepresentation of Critical Information,Class,Draft,The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.
453,Insecure Default Variable Initialization,Variant,Draft,The product, by default, initializes an internal variable with an insecure or less secure value than is possible.
454,External Initialization of Trusted Variables or Data Stores,Base,Draft,The product initializes critical internal variables or data stores using inputs that can be modified by untrusted actors.
455,Non-exit on Failed Initialization,Base,Draft,The product does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error or a hardware security module (HSM) cannot be activated, which can cause the product to execute in a less secure fashion than intended by the administrator.
456,Missing Initialization of a Variable,Variant,Draft,The product does not initialize critical variables, which causes the execution environment to use unexpected values.
457,Use of Uninitialized Variable,Variant,Draft,The code uses a variable that has not been initialized, leading to unpredictable or unintended results.
459,Incomplete Cleanup,Base,Draft,The product does not properly clean up and remove temporary or supporting resources after they have been used.
460,Improper Cleanup on Thrown Exception,Base,Draft,The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.
462,Duplicate Key in Associative List (Alist),Base,Incomplete,Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.
463,Deletion of Data Structure Sentinel,Base,Incomplete,The accidental deletion of a data-structure sentinel can cause serious programming logic problems.
464,Addition of Data Structure Sentinel,Base,Incomplete,The accidental addition of a data-structure sentinel can cause serious programming logic problems.
466,Return of Pointer Value Outside of Expected Range,Base,Draft,A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.
467,Use of sizeof() on a Pointer Type,Variant,Draft,The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.
468,Incorrect Pointer Scaling,Base,Incomplete,In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled.
469,Use of Pointer Subtraction to Determine Size,Base,Draft,The product subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.
470,Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection'),Base,Draft,The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.
471,Modification of Assumed-Immutable Data (MAID),Base,Draft,The product does not properly protect an assumed-immutable element from being modified by an attacker.
472,External Control of Assumed-Immutable Web Parameter,Base,Draft,The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.
473,PHP External Variable Modification,Variant,Draft,A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.
474,Use of Function with Inconsistent Implementations,Base,Draft,The code uses a function that has inconsistent implementations across operating systems and versions.
475,Undefined Behavior for Input to API,Base,Incomplete,The behavior of this function is undefined unless its control parameter is set to a specific value.
476,NULL Pointer Dereference,Base,Stable,A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.
477,Use of Obsolete Function,Base,Draft,The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.
478,Missing Default Case in Multiple Condition Expression,Base,Draft,The code does not have a default case in an expression with multiple conditions, such as a switch statement.
479,Signal Handler Use of a Non-reentrant Function,Variant,Draft,The product defines a signal handler that calls a non-reentrant function.
480,Use of Incorrect Operator,Base,Draft,The product accidentally uses the wrong operator, which changes the logic in security-relevant ways.
481,Assigning instead of Comparing,Variant,Draft,The code uses an operator for assignment when the intention was to perform a comparison.
482,Comparing instead of Assigning,Variant,Draft,The code uses an operator for comparison when the intention was to perform an assignment.
483,Incorrect Block Delimitation,Base,Draft,The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error.
484,Omitted Break Statement in Switch,Base,Draft,The product omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.
486,Comparison of Classes by Name,Variant,Draft,The product compares classes by name, which can cause it to use the wrong class when multiple classes can have the same name.
487,Reliance on Package-level Scope,Base,Incomplete,Java packages are not inherently closed; therefore, relying on them for code security is not a good practice.
488,Exposure of Data Element to Wrong Session,Base,Draft,The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.
489,Active Debug Code,Base,Draft,The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.
491,Public cloneable() Method Without Final ('Object Hijack'),Variant,Draft,A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state.
492,Use of Inner Class Containing Sensitive Data,Variant,Draft,Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers.
493,Critical Public Variable Without Final Modifier,Variant,Draft,The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values.
494,Download of Code Without Integrity Check,Base,Draft,The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.
495,Private Data Structure Returned From A Public Method,Variant,Draft,The product has a method that is declared public, but returns a reference to a private data structure, which could then be modified in unexpected ways.
496,Public Data Assigned to Private Array-Typed Field,Variant,Incomplete,Assigning public data to a private array is equivalent to giving public access to the array.
497,Exposure of Sensitive System Information to an Unauthorized Control Sphere,Base,Incomplete,The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.
498,Cloneable Class Containing Sensitive Information,Variant,Draft,The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class.
499,Serializable Class Containing Sensitive Data,Variant,Draft,The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class.
500,Public Static Field Not Marked Final,Variant,Draft,An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.
501,Trust Boundary Violation,Base,Draft,The product mixes trusted and untrusted data in the same data structure or structured message.
502,Deserialization of Untrusted Data,Base,Draft,The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.
506,Embedded Malicious Code,Class,Incomplete,The product contains code that appears to be malicious in nature.
507,Trojan Horse,Base,Incomplete,The product appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator.
508,Non-Replicating Malicious Code,Base,Incomplete,Non-replicating malicious code only resides on the target system or product that is attacked; it does not attempt to spread to other systems.
509,Replicating Malicious Code (Virus or Worm),Base,Incomplete,Replicating malicious code, including viruses and worms, will attempt to attack other systems once it has successfully compromised the target system or the product.
510,Trapdoor,Base,Incomplete,A trapdoor is a hidden piece of code that responds to a special input, allowing its user access to resources without passing through the normal security enforcement mechanism.
511,Logic/Time Bomb,Base,Incomplete,The product contains code that is designed to disrupt the legitimate operation of the product (or its environment) when a certain time passes, or when a certain logical condition is met.
512,Spyware,Base,Incomplete,The product collects personally identifiable information about a human user or the user's activities, but the product accesses this information using other resources besides itself, and it does not require that user's explicit approval or direct input into the product.
514,Covert Channel,Class,Incomplete,A covert channel is a path that can be used to transfer information in a way not intended by the system's designers.
515,Covert Storage Channel,Base,Incomplete,A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information.
520,.NET Misconfiguration: Use of Impersonation,Variant,Incomplete,Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks.
521,Weak Password Requirements,Base,Draft,The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.
522,Insufficiently Protected Credentials,Class,Incomplete,The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.
523,Unprotected Transport of Credentials,Base,Incomplete,Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.
524,Use of Cache Containing Sensitive Information,Base,Incomplete,The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.
525,Use of Web Browser Cache Containing Sensitive Information,Variant,Incomplete,The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached.
526,Cleartext Storage of Sensitive Information in an Environment Variable,Variant,Incomplete,The product uses an environment variable to store unencrypted sensitive information.
527,Exposure of Version-Control Repository to an Unauthorized Control Sphere,Variant,Incomplete,The product stores a CVS, git, or other repository in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.
528,Exposure of Core Dump File to an Unauthorized Control Sphere,Variant,Draft,The product generates a core dump file in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.
529,Exposure of Access Control List Files to an Unauthorized Control Sphere,Variant,Incomplete,The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere.
530,Exposure of Backup File to an Unauthorized Control Sphere,Variant,Incomplete,A backup file is stored in a directory or archive that is made accessible to unauthorized actors.
531,Inclusion of Sensitive Information in Test Code,Variant,Incomplete,Accessible test applications can pose a variety of security risks. Since developers or administrators rarely consider that someone besides themselves would even know about the existence of these applications, it is common for them to contain sensitive information or functions.
532,Insertion of Sensitive Information into Log File,Base,Incomplete,Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.
535,Exposure of Information Through Shell Error Message,Variant,Incomplete,A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system.
536,Servlet Runtime Error Message Containing Sensitive Information,Variant,Incomplete,A servlet error message indicates that there exists an unhandled exception in your web application code and may provide useful information to an attacker.
537,Java Runtime Error Message Containing Sensitive Information,Variant,Incomplete,In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system.
538,Insertion of Sensitive Information into Externally-Accessible File or Directory,Base,Draft,The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.
539,Use of Persistent Cookies Containing Sensitive Information,Variant,Incomplete,The web application uses persistent cookies, but the cookies contain sensitive information.
540,Inclusion of Sensitive Information in Source Code,Base,Incomplete,Source code on a web server or repository often contains sensitive information and should generally not be accessible to users.
541,Inclusion of Sensitive Information in an Include File,Variant,Incomplete,If an include file source is accessible, the file can contain usernames and passwords, as well as sensitive information pertaining to the application and system.
543,Use of Singleton Pattern Without Synchronization in a Multithreaded Context,Variant,Incomplete,The product uses the singleton pattern when creating a resource within a multithreaded environment.
544,Missing Standardized Error Handling Mechanism,Base,Draft,The product does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses.
546,Suspicious Comment,Variant,Draft,The code contains comments that suggest the presence of bugs, incomplete functionality, or weaknesses.
547,Use of Hard-coded, Security-relevant Constants,Variant,Draft,The product uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change.
548,Exposure of Information Through Directory Listing,Variant,Draft,A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers.
549,Missing Password Field Masking,Base,Draft,The product does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords.
550,Server-generated Error Message Containing Sensitive Information,Variant,Incomplete,Certain conditions, such as network failure, will cause a server error message to be displayed.
551,Incorrect Behavior Order: Authorization Before Parsing and Canonicalization,Base,Incomplete,If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.
552,Files or Directories Accessible to External Parties,Base,Draft,The product makes files or directories accessible to unauthorized actors, even though they should not be.
553,Command Shell in Externally Accessible Directory,Variant,Incomplete,A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.
554,ASP.NET Misconfiguration: Not Using Input Validation Framework,Variant,Draft,The ASP.NET application does not use an input validation framework.
555,J2EE Misconfiguration: Plaintext Password in Configuration File,Variant,Draft,The J2EE application stores a plaintext password in a configuration file.
556,ASP.NET Misconfiguration: Use of Identity Impersonation,Variant,Incomplete,Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges.
558,Use of getlogin() in Multithreaded Application,Variant,Draft,The product uses the getlogin() function in a multithreaded context, potentially causing it to return incorrect values.
560,Use of umask() with chmod-style Argument,Variant,Draft,The product calls umask() with an incorrect argument that is specified as if it is an argument to chmod().
561,Dead Code,Base,Draft,The product contains dead code, which can never be executed.
562,Return of Stack Variable Address,Base,Draft,A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.
563,Assignment to Variable without Use,Variant,Draft,The variable's value is assigned but never used, making it a dead store.
564,SQL Injection: Hibernate,Variant,Incomplete,Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.
565,Reliance on Cookies without Validation and Integrity Checking,Base,Incomplete,The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.
566,Authorization Bypass Through User-Controlled SQL Primary Key,Variant,Incomplete,The product uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.
567,Unsynchronized Access to Shared Data in a Multithreaded Context,Base,Draft,The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.
568,finalize() Method Without super.finalize(),Variant,Draft,The product contains a finalize() method that does not call super.finalize().
570,Expression is Always False,Base,Draft,The product contains an expression that will always evaluate to false.
571,Expression is Always True,Base,Draft,The product contains an expression that will always evaluate to true.
572,Call to Thread run() instead of start(),Variant,Draft,The product calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.
573,Improper Following of Specification by Caller,Class,Draft,The product does not follow or incorrectly follows the specifications as required by the implementation language, environment, framework, protocol, or platform.
574,EJB Bad Practices: Use of Synchronization Primitives,Variant,Draft,The product violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.
575,EJB Bad Practices: Use of AWT Swing,Variant,Draft,The product violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing.
576,EJB Bad Practices: Use of Java I/O,Variant,Draft,The product violates the Enterprise JavaBeans (EJB) specification by using the java.io package.
577,EJB Bad Practices: Use of Sockets,Variant,Draft,The product violates the Enterprise JavaBeans (EJB) specification by using sockets.
578,EJB Bad Practices: Use of Class Loader,Variant,Draft,The product violates the Enterprise JavaBeans (EJB) specification by using the class loader.
579,J2EE Bad Practices: Non-serializable Object Stored in Session,Variant,Draft,The product stores a non-serializable object as an HttpSession attribute, which can hurt reliability.
580,clone() Method Without super.clone(),Variant,Draft,The product contains a clone() method that does not call super.clone() to obtain the new object.
581,Object Model Violation: Just One of Equals and Hashcode Defined,Base,Draft,The product does not maintain equal hashcodes for equal objects.
582,Array Declared Public, Final, and Static,Variant,Draft,The product declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.
583,finalize() Method Declared Public,Variant,Incomplete,The product violates secure coding principles for mobile code by declaring a finalize() method public.
584,Return Inside Finally Block,Base,Draft,The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded.
585,Empty Synchronized Block,Base,Draft,The product contains an empty synchronized block.
586,Explicit Call to Finalize(),Variant,Draft,The product makes an explicit call to the finalize() method from outside the finalizer.
587,Assignment of a Fixed Address to a Pointer,Base,Draft,The product sets a pointer to a specific address other than NULL or 0.
588,Attempt to Access Child of a Non-structure Pointer,Variant,Incomplete,Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.
589,Call to Non-ubiquitous API,Variant,Incomplete,The product uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.
590,Free of Memory not on the Heap,Variant,Incomplete,The product calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc().
591,Sensitive Data Storage in Improperly Locked Memory,Variant,Draft,The product stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors.
593,Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created,Variant,Draft,The product modifies the SSL context after connection creation has begun.
594,J2EE Framework: Saving Unserializable Objects to Disk,Variant,Incomplete,When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.
595,Comparison of Object References Instead of Object Contents,Variant,Incomplete,The product compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects.
597,Use of Wrong Operator in String Comparison,Variant,Draft,The product uses the wrong operator when comparing a string, such as using == when the .equals() method should be used instead.
598,Use of GET Request Method With Sensitive Query Strings,Variant,Draft,The web application uses the HTTP GET method to process a request and includes sensitive information in the query string of that request.
599,Missing Validation of OpenSSL Certificate,Variant,Incomplete,The product uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements.
600,Uncaught Exception in Servlet ,Base,Draft,The Servlet does not catch all exceptions, which may reveal sensitive debugging information.
