'ID,Name,Abstraction,Status,Description,Alternate Terms,Likelihood Of Attack,Typical Severity,Related Attack Patterns,Execution Flow,Prerequisites,Skills Required,Resources Required,Indicators,Consequences,Mitigations,Example Instances,Related Weaknesses,Taxonomy Mappings,Notes
36,"Using Unpublished Interfaces or Functionality",Standard,Draft,"An adversary searches for and invokes interfaces or functionality that the target system designers did not intend to be publicly available. If interfaces fail to authenticate requests, the attacker may be able to invoke functionality they are not authorized for.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:113::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify services] Discover a service of interest by exploring service registry listings or by connecting on a known port or some similar means.:TECHNIQUE:Search via internet for known, published services.:TECHNIQUE:Use automated tools to scan known ports to identify internet-enabled services.:TECHNIQUE:Dump the code from the chip and then perform reverse engineering to analyze the code.::STEP:2:PHASE:Explore:DESCRIPTION:[Authenticate to service] Authenticate to the service, if required, in order to explore it.:TECHNIQUE:Use published credentials to access system.:TECHNIQUE:Find unpublished credentials to access service.:TECHNIQUE:Use other attack pattern or weakness to bypass authentication.::STEP:3:PHASE:Explore:DESCRIPTION:[Identify all interfaces] Determine the exposed interfaces by querying the registry as well as probably sniffing to expose interfaces that are not explicitly listed.:TECHNIQUE:For any published services, determine exposed interfaces via the documentation provided.:TECHNIQUE:For any services found, use error messages from poorly formed service calls to determine valid interfaces. In some cases, services will respond to poorly formed calls with valid ones.::STEP:4:PHASE:Experiment:DESCRIPTION:[Attempt to discover unpublished functions] Using manual or automated means, discover unpublished or undocumented functions exposed by the service.:TECHNIQUE:Manually attempt calls to the service using an educated guess approach, including the use of terms like' 'test', 'debug', 'delete', etc.:TECHNIQUE:Use automated tools to scan the service to attempt to reverse engineer exposed, but undocumented, features.::STEP:5:PHASE:Exploit:DESCRIPTION:[Exploit unpublished functions] Using information determined via experimentation, exploit the unpublished features of the service.:TECHNIQUE:Execute features that are not intended to be used by general system users.:TECHNIQUE:Craft malicious calls to features not intended to be used by general system users that take advantage of security flaws found in the functions.::","::The architecture under attack must publish or otherwise make available services that clients can attach to, either in an unauthenticated fashion, or having obtained an authentication token elsewhere. The service need not be 'discoverable', but in the event it isn't it must have some way of being discovered by an attacker. This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service.::","::SKILL:A number of web service digging tools are available for free that help discover exposed web services and their interfaces. In the event that a web service is not listed, the attacker does not need to know much more in addition to the format of web service messages that they can sniff/monitor for.:LEVEL:Low::","::None: No specialized resources are required to execute this type of attack. Web service digging tools may be helpful.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.::","::To an extent, Google services (such as Google Maps) are all well-known examples. Calling these services, or extending them for one's own (perhaps very different) purposes is as easy as knowing they exist. Their unencumbered public use, however, is a purposeful aspect of Google's business model. Most organizations, however, do not have the same business model. Organizations publishing services usually fall back on thoughts that Attackers will not know services exist and that even if they did, they wouldn't be able to access them because they're not on the local LAN. Simple threat modeling exercises usually uncovers simple attack vectors that can invalidate these assumptions.::","::306::693::695::1242::","","",
37,"Retrieve Embedded Sensitive Data",Detailed,Draft,"An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:167::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target] Attacker identifies client components to extract information from. These may be binary executables, class files, shared libraries (e.g., DLLs), configuration files, or other system files.:TECHNIQUE:Binary file extraction. The attacker extracts binary files from zips, jars, wars, PDFs or other composite formats.:TECHNIQUE:Package listing. The attacker uses a package manifest provided with the software installer, or the filesystem itself, to identify component files suitable for attack.::STEP:2:PHASE:Exploit:DESCRIPTION:[Retrieve Embedded Data] The attacker then uses a variety of techniques, such as sniffing, reverse-engineering, and cryptanalysis to retrieve the information of interest.:TECHNIQUE:API Profiling. The attacker monitors the software's use of registry keys or other operating system-provided storage locations that can contain sensitive information.:TECHNIQUE:Execution in simulator. The attacker physically removes mass storage from the system and explores it using a simulator, external system, or other debugging harness.:TECHNIQUE:Common decoding methods. The attacker applies methods to decode such encodings and compressions as Base64, unzip, unrar, RLE decoding, gzip decompression and so on.:TECHNIQUE:Common data typing. The attacker looks for common file signatures for well-known file types (JPEG, TIFF, ASN.1, LDIF, etc.). If the signatures match, they attempt decoding in that format.::","::In order to feasibly execute this type of attack, some valuable data must be present in client software.::Additionally, this information must be unprotected, or protected in a flawed fashion, or through a mechanism that fails to resist reverse engineering, statistical, or other attack.::","::SKILL:The attacker must possess knowledge of client code structure as well as ability to reverse-engineer or decompile it or probe it in other ways. This knowledge is specific to the technology and language used for the client distribution:LEVEL:Medium::","::The attacker must possess access to the system or code being exploited. Such access, for this set of attacks, will likely be physical. The attacker will make use of reverse engineering technologies, perhaps for data or to extract functionality from the binary. Such tool use may be as simple as Strings or a hex editor. Removing functionality may require the use of only a hex editor, or may require aspects of the toolchain used to construct the application: for instance the Adobe Flash development environment. Attacks of this nature do not require network access or undue CPU, memory, or other hardware-based resources.::","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","","::Using a tool such as 'strings' or similar to pull out text data, perhaps part of a database table, that extends beyond what a particular user's purview should be.::An attacker can also use a decompiler to decompile a downloaded Java applet in order to look for information such as hardcoded IP addresses, file paths, passwords or other such contents.::Attacker uses a tool such as a browser plug-in to pull cookie or other token information that, from a previous user at the same machine (perhaps a kiosk), allows the attacker to log in as the previous user.::","::226::311::525::312::314::315::318::1239::1258::1266::1272::1278::1301::1330::","TAXONOMY NAME:ATTACK:ENTRY ID:1005:ENTRY NAME:Data from Local System::::TAXONOMY NAME:ATTACK:ENTRY ID:1552.004:ENTRY NAME:Unsecured Credentials: Private Keys::","",
38,"Leveraging/Manipulating Configuration File Search Paths",Detailed,Draft,"This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:159::","","::The attacker must be able to write to redirect search paths on the victim host.::","::SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low::","","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Design: Enforce principle of least privilege::Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program::Implementation: Host integrity monitoring::","::Another method is to redirect commands by aliasing one legitimate command to another to create unexpected results. the Unix command rm could be aliased to mv and move all files the victim thinks they are deleting to a directory the attacker controls. In a Unix shell .profile setting alias rm=mv /usr/home/attacker In this case the attacker retains a copy of all the files the victim attempts to remove.::A standard UNIX path looks similar to this /bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin If the attacker modifies the path variable to point to a locale that includes malicious resources then the user unwittingly can execute commands on the attackers' behalf: /evildir/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin This is a form of usurping control of the program and the attack can be done on the classpath, database resources, or any other resources built from compound parts. At runtime detection and blocking of this attack is nearly impossible, because the configuration allows execution.::","::426::427::","TAXONOMY NAME:ATTACK:ENTRY ID:1574.007:ENTRY NAME:Hijack Execution Flow: Path Interception by PATH Environment Variable::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.009:ENTRY NAME:Hijack Execution Flow: Path Interception by Unquoted Path::","",
383,"Harvesting Information via API Event Monitoring",Detailed,Draft,"An adversary hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the adversary creating an event within the sub-application. Assume the adversary hosts a virtual sale of rare items. As other users enter the event, the attacker records via AiTM (CAPEC-94) proxy the user_ids and usernames of everyone who attends. The adversary would then be able to spam those users within the application using an automated script.","",,Low,"::NATURE:ChildOf:CAPEC ID:407::NATURE:CanPrecede:CAPEC ID:94::","","::The target software is utilizing application framework APIs::","","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data:NOTE:The adversary is able to gather information to potentially support further nefarious activities.::","::Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind.::","","::311::319::419::602::","TAXONOMY NAME:ATTACK:ENTRY ID:1056.004:ENTRY NAME:Input Capture: Credential API Hooking::","",
384,"Application API Message Manipulation via Man-in-the-Middle",Standard,Draft,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true Adversary-in-the-Middle attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.","",,Low,"::NATURE:ChildOf:CAPEC ID:94::","","::Targeted software is utilizing application framework APIs::","","::A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.::","","","","","::471::345::346::602::311::","","",
385,"Transaction or Event Tampering via Application API Manipulation",Detailed,Draft,"An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process.","",,Medium,"::NATURE:ChildOf:CAPEC ID:384::","","::Targeted software is utilizing application framework APIs::","","::A software program that allows the use of adversary-in-the-middle communications (CAPEC-94) between the client and server, such as a man-in-the-middle proxy.::","","","","","::471::345::346::602::311::","","",
386,"Application API Navigation Remapping",Standard,Draft,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.","",,Medium,"::NATURE:ChildOf:CAPEC ID:94::","","::Targeted software is utilizing application framework APIs::","","::A software program that allows the use of adversary-in-the-middle (CAPEC-94) communications between the client and server, such as a man-in-the-middle proxy.::","","","","","::471::345::346::602::311::","","",
387,"Navigation Remapping To Propagate Malicious Content",Detailed,Draft,"An adversary manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic.","",,Medium,"::NATURE:ChildOf:CAPEC ID:386::","","::Targeted software is utilizing application framework APIs::","","::A software program that allows the use of adversary-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.::","","","","","::471::345::346::602::311::","","",
388,"Application API Button Hijacking",Detailed,Draft,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination.","",,Medium,"::NATURE:ChildOf:CAPEC ID:386::","","::Targeted software is utilizing application framework APIs::","","::A software program that allows the use of adversary-in-the-middle (CAPEC-94) communications between the client and server, such as a adversary-in-the-middle (CAPEC-94) proxy.::","","","","::An in-game event occurs and the attacker traps the result, which turns out to be a form that will be populated to their primary profile. The attacker, using a MITM proxy, observes the following data: [Button][Claim_Item]Sourdough_Cookie[URL_IMG]foo[/URL_IMG][Claim_Link]bar[/Claim_Link] By altering the destination of Claim_Link to point to the attackers' server an unwitting victim can be enticed to click the link. Another example would be for the attacker to rewrite the button destinations for an event so that clicking Yes or No causes the user to load the attackers' code.::","::471::345::346::602::311::","","",
389,"Content Spoofing Via Application API Manipulation",Detailed,Draft,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. The techniques require use of specialized software that allow the attacker to use adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system.","",,Low,"::NATURE:ChildOf:CAPEC ID:384::","","::Targeted software is utilizing application framework APIs::","","::A software program that allows the use of adversary-in-the-middle communications between the client and server, such as an adversary-in-the-middle proxy.::","","","","","::353::","","",
39,"Manipulating Opaque Client-based Data Tokens",Standard,Draft,"In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.","",High,Medium,"::NATURE:ChildOf:CAPEC ID:22::","::STEP:1:PHASE:Explore:DESCRIPTION:[Enumerate information passed to client side] The attacker identifies the parameters used as part of tokens to take business or security decisions:TECHNIQUE:Use WebScarab to reveal hidden fields while browsing.:TECHNIQUE:Use a sniffer to capture packets:TECHNIQUE:View source of web page to find hidden fields:TECHNIQUE:Examine URL to see if any opaque tokens are in it:TECHNIQUE:Disassemble or decompile client-side application:TECHNIQUE:Use debugging tools such as File Monitor, Registry Monitor, Debuggers, etc.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine protection mechanism for opaque token] The attacker determines the protection mechanism used to protect the confidentiality and integrity of these data tokens. They may be obfuscated or a full blown encryption may be used.:TECHNIQUE:Look for signs of well-known character encodings:TECHNIQUE:Look for cryptographic signatures:TECHNIQUE:Look for delimiters or other indicators of structure::STEP:3:PHASE:Experiment:DESCRIPTION:[Modify parameter/token values] Trying each parameter in turn, the attacker modifies the values:TECHNIQUE:Modify tokens logically:TECHNIQUE:Modify tokens arithmetically:TECHNIQUE:Modify tokens bitwise:TECHNIQUE:Modify structural components of tokens:TECHNIQUE:Modify order of parameters/tokens::STEP:4:PHASE:Experiment:DESCRIPTION:[Cycle through values for each parameter.] Depending on the nature of the application, the attacker now cycles through values of each parameter and observes the effects of this modification in the data returned by the server:TECHNIQUE:Use network-level packet injection tools such as netcat:TECHNIQUE:Use application-level data modification tools such as Tamper Data, WebScarab, TamperIE, etc.:TECHNIQUE:Use modified client (modified by reverse engineering):TECHNIQUE:Use debugging tools to modify data in client::","::An attacker already has some access to the system or can steal the client based data tokens from another user who has access to the system.::For an Attacker to viably execute this attack, some data (later interpreted by the application) must be held client-side in a way that can be manipulated without detection. This means that the data or tokens are not CRCd as part of their value or through a separate meta-data store elsewhere.::","::SKILL:If the client site token is obfuscated.:LEVEL:Medium::SKILL:If the client site token is encrypted.:LEVEL:High::","::The Attacker needs no special hardware-based resources in order to conduct this attack. Software plugins, such as Tamper Data for Firefox, may help in manipulating URL- or cookie-based data.::","","::SCOPE:Integrity:TECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.::Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)::Make sure that all session tokens use a good source of randomness::Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.::","::With certain price watching websites, that aggregate products available prices, the user can buy items through whichever vendors has product availability, the best price, or other differentiator. Once a user selects an item, the site must broker the purchase of that item with the vendor. Because vendors sell the same product through different channel partners at different prices, token exchange between price watching sites and selling vendors will often contain pricing information. With some price watching sites, manipulating URL-data (which is encrypted) even opaquely yields different prices charged by the fulfilling vendor. If the manipulated price turns out higher, the Attacker can cancel purchase. If the Attacker succeeded in manipulating the token and creating a lower price, they proceed.::Upon successful authentication user is granted an encrypted authentication cookie by the server and it is stored on the client. One piece of information stored in the authentication cookie reflects the access level of the user (e.g. u for user). The authentication cookie is encrypted using the Electronic Code Book (ECB) mode, that naively encrypts each of the plaintext blocks to each of the ciphertext blocks separately. An attacker knows the structure of the cookie and can figure out what bits (encrypted) store the information relating to the access level of the user. An attacker modifies the authentication cookie and effectively substitutes u for a by flipping some of the corresponding bits of ciphertext (trial and error). Once the correct flip is found, when the system is accessed, the attacker is granted administrative privileges in the system. Note that in this case an attacker did not have to figure out the exact encryption algorithm or find the secret key, but merely exploit the weakness inherent in using the ECB encryption mode.::Archangel Weblog 0.90.02 allows remote attackers to bypass authentication by setting the ba_admin cookie to 1. See also: CVE-2006-0944::","::353::285::302::472::565::315::539::384::233::","","",
390,"Bypassing Physical Security",Meta,Draft,"Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.","",,,"","","","","","","","","","","","",
391,"Bypassing Physical Locks",Standard,Draft,"An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.","",,,"::NATURE:ChildOf:CAPEC ID:390::","","","","","","","","","","","",
392,"Lock Bumping",Detailed,Draft,"An attacker uses a bump key to force a lock on a building or facility and gain entry. Lock Bumping is the use of a special type of key that can be tapped or bumped to cause the pins within the lock to fall into temporary alignment, allowing the lock to be opened. Lock bumping allows an attacker to open a lock without having the correct key. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A bump key is a specially constructed key that exploits this design. When the bump key is struck or firmly tapped, its teeth transfer the force of the tap into the key pins, causing the lock to momentarily shift into proper alignment for the mechanism to be opened.","",,,"::NATURE:ChildOf:CAPEC ID:391::","","","","","","","","","","","",
393,"Lock Picking",Detailed,Draft,"An attacker uses lock picking tools and techniques to bypass the locks on a building or facility. Lock picking is the use of a special set of tools to manipulate the pins within a lock. Different sets of tools are required for each type of lock. Lock picking attacks have the advantage of being non-invasive in that if performed correctly the lock will not be damaged. A standard lock pin-and-tumbler lock is secured by a set of internal pins that prevent the tumbler device from turning. Spring loaded driver pins push down on the key pins preventing rotation so that the bolt remains in a locked position.. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. Most common locks, such as domestic locks in the US, can be picked using a standard 2 tools (i.e. a torsion wrench and a hook pick).","",,,"::NATURE:ChildOf:CAPEC ID:391::","","","","","","","","","","","",
394,"Using a Snap Gun Lock to Force a Lock",Detailed,Draft,"An attacker uses a Snap Gun, also known as a Pick Gun, to force the lock on a building or facility. A Pick Gun is a special type of lock picking instrument that works on similar principles as lock bumping. A snap gun is a hand-held device with an attached metal pick. The metal pick strikes the pins within the lock, transferring motion from the key pins to the driver pins and forcing the lock into momentary alignment. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A Snap Gun exploits this design by using a metal pin to strike all of the key pins at once, forcing the driver pins to shift into an unlocked position. Unlike bump keys or lock picks, a Snap Gun may damage the lock more easily, leaving evidence that the lock has been tampered with.","",,,"::NATURE:ChildOf:CAPEC ID:391::","","","","","","","","","","","",
395,"Bypassing Electronic Locks and Access Controls",Standard,Draft,"An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.","",,,"::NATURE:ChildOf:CAPEC ID:390::","","","","","","","","","","","",
397,"Cloning Magnetic Strip Cards",Detailed,Draft,"An attacker duplicates the data on a Magnetic strip card (i.e. 'swipe card' or 'magstripe') to gain unauthorized access to a physical location or a person's private information. Magstripe cards encode data on a band of iron-based magnetic particles arrayed in a stripe along a rectangular card. Most magstripe card data formats conform to ISO standards 7810, 7811, 7813, 8583, and 4909. The primary advantage of magstripe technology is ease of encoding and portability, but this also renders magnetic strip cards susceptible to unauthorized duplication. If magstripe cards are used for access control, all an attacker need do is obtain a valid card long enough to make a copy of the card and then return the card to its location (i.e. a co-worker's desk). Magstripe reader/writers are widely available as well as software for analyzing data encoded on the cards. By swiping a valid card, it becomes trivial to make any number of duplicates that function as the original.","",,,"::NATURE:ChildOf:CAPEC ID:395::","","","","","","","","","","","",
398,"Magnetic Strip Card Brute Force Attacks",Detailed,Draft,"An adversary analyzes the data on two or more magnetic strip cards and is able to generate new cards containing valid sequences that allow unauthorized access and/or impersonation of individuals.","",,,"::NATURE:ChildOf:CAPEC ID:395::","","::The ability to calculate a card checksum and write out a valid checksum value. Some cards are protected by a checksum calculation, therefore it is necessary to determine what algorithm is being used to calculate the checksum and to employ that algorithm to calculate and write a new valid checksum for the card being created.::","","","","","","","","","",
399,"Cloning RFID Cards or Chips",Detailed,Draft,"An attacker analyzes data returned by an RFID chip and uses this information to duplicate a RFID signal that responds identically to the target chip. In some cases RFID chips are used for building access control, employee identification, or as markers on products being delivered along a supply chain. Some organizations also embed RFID tags inside computer assets to trigger alarms if they are removed from particular rooms, zones, or buildings. Similar to Magnetic strip cards, RFID cards are susceptible to duplication (cloning) and reuse.","",,,"::NATURE:ChildOf:CAPEC ID:395::","","","","","","","","","","","",
4,"Using Alternative IP Address Encodings",Detailed,Draft,"This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.","",Medium,High,"::NATURE:ChildOf:CAPEC ID:267::","::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for IP addresses as user input] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application where IP addresses are used.:TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and attempts alternate IP address encodings, observing application behavior. The adversary will also attempt to access the application through an alternate IP address encoding to see if access control changes:TECHNIQUE:Instead of using a URL, use the IP address that the URL resolves to:TECHNIQUE:Specify a port directly to a URL input:TECHNIQUE:Omit or add http:// or https:// to a URL to see if the application behaves differently::STEP:3:PHASE:Exploit:DESCRIPTION:[Bypass access control] Using an alternate IP address encoding, the adversary will either access the application or give the alternate encoding as input, bypassing access control restrictions.::","::The target software must fail to anticipate all of the possible valid encodings of an IP/web address.::The adversary must have the ability to communicate with the server.::","::SKILL:The adversary has only to try IP address format combinations.:LEVEL:Low::","::The adversary needs to have knowledge of an alternative IP address encoding that bypasses the access control policy of an application. Alternatively, the adversary can simply try to brute-force various encoding possibilities.::","","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::","::Design: Default deny access control policies::Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)::Implementation: Perform input validation for all remote content.::","::An adversary identifies an application server that applies a security policy based on the domain and application name. For example, the access control policy covers authentication and authorization for anyone accessing http://example.domain:8080/application. However, by using the IP address of the host instead (http://192.168.0.1:8080/application), the application authentication and authorization controls may be bypassed. The adversary relies on the victim applying policy to the namespace abstraction and not having a default deny policy in place to manage exceptions.::","::291::173::","","",
40,"Manipulating Writeable Terminal Devices",Standard,Draft,"This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.","",High,Very High,"::NATURE:ChildOf:CAPEC ID:248::","::STEP:1:PHASE:Explore:DESCRIPTION:[Identify attacker-writable terminals] Determine if users TTYs are writable by the attacker.:TECHNIQUE:Determine the permissions for the TTYs found on the system. Any that allow user write to the TTY may be vulnerable.:TECHNIQUE:Attempt to write to other user TTYs. This approach could leave a trail or alert a user.::STEP:2:PHASE:Exploit:DESCRIPTION:[Execute malicious commands] Using one or more vulnerable TTY, execute commands to achieve various impacts.:TECHNIQUE:Commands that allow reading or writing end user files can be executed.::","::User terminals must have a permissive access control such as world writeable that allows normal users to control data on other user's terminals.::","::SKILL:Ability to discover permissions on terminal devices. Of course, brute force can also be used.:LEVEL:Low::","::Access to a terminal on the target network::","","::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:Authorization:TECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:TECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::","::Design: Ensure that terminals are only writeable by named owner user and/or administrator::Design: Enforce principle of least privilege::","::Any system that allows other peers to write directly to its terminal process is vulnerable to this type of attack. If the terminals are available through being over-privileged (i.e. world-writable) or the attacker is an administrator, then a series of commands in this format can be used to echo commands out to victim terminals. $echo -e 033[30m033132 > /dev/ttyXX where XX is the tty number of the user under attack. This will paste the characters to another terminal (tty). Note this technique works only if the victim's tty is world writable (which it may not be). That is one reason why programs like write(1) and talk(1) in UNIX systems need to run setuid. [REF-1] If the victim continues to hit enter and execute the commands, there are an endless supply of vectors available to the attacker, copying files, open up network connections, ftp out to servers, and so on.::","::77::","","",
400,"RFID Chip Deactivation or Destruction",Detailed,Draft,"An attacker uses methods to deactivate a passive RFID tag for the purpose of rendering the tag, badge, card, or object containing the tag unresponsive. RFID tags are used primarily for access control, inventory, or anti-theft devices. The purpose of attacking the RFID chip is to disable or damage the chip without causing damage to the object housing it.","",,,"::NATURE:ChildOf:CAPEC ID:395::","","","","","","","","","","","",
401,"Physically Hacking Hardware",Standard,Stable,"An adversary exploits a weakness in access control to gain access to currently installed hardware and precedes to implement changes or secretly replace a hardware component which undermines the system's integrity for the purpose of carrying out an attack.","",Low,High,"::NATURE:ChildOf:CAPEC ID:440::","","","","","","","","::A malicious subcontractor or subcontractor's employee that is responsible for system maintenance secretly replaces a hard drive with one containing malicious code that will allow for backdoor access once deployed.::","::1263::","","",
402,"Bypassing ATA Password Security",Detailed,Draft,"An adversary exploits a weakness in ATA security on a drive to gain access to the information the drive contains without supplying the proper credentials. ATA Security is often employed to protect hard disk information from unauthorized access. The mechanism requires the user to type in a password before the BIOS is allowed access to drive contents. Some implementations of ATA security will accept the ATA command to update the password without the user having authenticated with the BIOS. This occurs because the security mechanism assumes the user has first authenticated via the BIOS prior to sending commands to the drive. Various methods exist for exploiting this flaw, the most common being installing the ATA protected drive into a system lacking ATA security features (a.k.a. hot swapping). Once the drive is installed into the new system the BIOS can be used to reset the drive password.","",,,"::NATURE:ChildOf:CAPEC ID:401::","","::Access to the system containing the ATA Drive so that the drive can be physically removed from the system.::","","","","","::Avoid using ATA password security when possible.::Use full disk encryption to protect the entire contents of the drive or sensitive partitions on the drive.::Leverage third-party utilities that interface with self-encrypting drives (SEDs) to provide authentication, while relying on the SED itself for data encryption.::","::The A-FF Repair Station tool is a data recovery utility that can be used for ATA password removal (both High and Maximum level) and firmware area recovery. An adversary with access to this tool could reset the ATA password to bypass this security feature and unlock the hard drive. The adversary could then obtain any data contained within the drive. [REF-702]::An adversary gains physical access to the targeted hard drive and installs it into a system that does not support ATA security features. Once the drive is installed in the feature-lacking system, the adversary is able to reset the hard drive password via the BIOS. As a result, the adversary is able to bypass ATA password security and access content on the drive.::","::285::","","",
406,"Dumpster Diving",Detailed,Stable,"An adversary cases an establishment and searches through trash bins, dumpsters, or areas where company information may have been accidentally discarded for information items which may be useful to the dumpster diver. The devastating nature of the items and/or information found can be anything from medical records, resumes, personal photos and emails, bank statements, account details or information about software, tech support logs and so much more, including hardware devices. By collecting this information an adversary may be able to learn important facts about the person or organization that play a role in helping the adversary in their attack.","",,Low,"::NATURE:ChildOf:CAPEC ID:150::NATURE:CanPrecede:CAPEC ID:163::NATURE:CanPrecede:CAPEC ID:675::","","::An adversary must have physical access to the dumpster or downstream processing facility.::","","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Documents and materials improperly disposed of can lead to information disclosure if an adversary comes across it.::","","","","","",
407,"Pretexting",Standard,Draft,"An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.","",Medium,Low,"::NATURE:ChildOf:CAPEC ID:416::NATURE:ChildOf:CAPEC ID:410::NATURE:CanPrecede:CAPEC ID:163::","","::The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the pretext that would influence the actions of the specific target.::","::SKILL:The adversary requires strong inter-personal and communication skills.:LEVEL:Low::","","","::SCOPE:Confidentiality:TECHNICAL IMPACT:Other:NOTE:Depending on the adversary's intentions and the specific nature their actions/requests, a successful pretexting attack can result in the compromise to the confidentiality of sensitive information in a variety of contexts.::","::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::","::The adversary dresses up like a jogger and runs in place by the entrance of a building, pretending to look for their access card. Because the hood obscures their face, it may be possible to solicit someone inside the building to let them inside.::","","TAXONOMY NAME:ATTACK:ENTRY ID:1589:ENTRY NAME:Gather Victim Identity Information::","",
41,"Using Meta-characters in E-mail Headers to Inject Malicious Payloads",Detailed,Draft,"This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.","",High,High,"::NATURE:ChildOf:CAPEC ID:242::NATURE:ChildOf:CAPEC ID:134::","::STEP:1:PHASE:Experiment:DESCRIPTION:[Identify and characterize metacharacter-processing vulnerabilities in email headers] An attacker creates emails with headers containing various metacharacter-based malicious payloads in order to determine whether the target application processes the malicious content and in what manner it does so.:TECHNIQUE:Use an automated tool (fuzzer) to create malicious emails headers containing metacharacter-based payloads.:TECHNIQUE:Manually tampering email headers to inject malicious metacharacter-based payload content in them.::STEP:2:PHASE:Exploit:DESCRIPTION:An attacker leverages vulnerabilities identified during the Experiment Phase to inject malicious email headers and cause the targeted email application to exhibit behavior outside of its expected constraints.:TECHNIQUE:Send emails with specifically-constructed, metacharacter-based malicious payloads in the email headers to targeted systems running email processing applications identified as vulnerable during the Experiment Phase.::","::This attack targets most widely deployed feature rich email applications, including web based email programs.::","::SKILL:To distribute email:LEVEL:Low::","","","::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:TECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Run Arbitrary Code::","::Design: Perform validation on email header data::Implementation: Implement email filtering solutions on mail server or on MTA, relay server.::Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names::","::To:<someone@example.com>From:<badguy@example.com>Header<SCRIPT>payme</SCRIPT>def: whatever::Meta-characters are among the most valuable tools attackers have to deceive users into taking some action on their behalf. E-mail is perhaps the most efficient and cost effective attack distribution tool available, this has led to the phishing pandemic. Meta-characters like w s d ^ can allow the attacker to escape out of the expected behavior to execute additional commands. Escaping out the process (such as email client) lets the attacker run arbitrary code in the user's process.::","::150::88::697::","","",
410,"Information Elicitation",Meta,Draft,"An adversary engages an individual using any combination of social engineering methods for the purpose of extracting information. Accurate contextual and environmental queues, such as knowing important information about the target company or individual can greatly increase the success of the attack and the quality of information gathered. Authentic mimicry combined with detailed knowledge increases the success of elicitation attacks.","",,Low,"","","","","","","","","","","","",
412,"Pretexting via Customer Service",Detailed,Draft,"An adversary engages in pretexting behavior, assuming the role of someone who works for Customer Service, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. One example of a scenario such as this would be to call an individual, articulate your false affiliation with a credit card company, and then attempt to get the individual to verify their credit card number.","",,Low,"::NATURE:ChildOf:CAPEC ID:407::","","","","","","","","","","","",
413,"Pretexting via Tech Support",Detailed,Draft,"An adversary engages in pretexting behavior, assuming the role of a tech support worker, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. An adversary who uses social engineering to impersonate a tech support worker can have devastating effects on a network. This is an effective attack vector, because it can give an adversary physical access to network computers. It only takes a matter of seconds for someone to compromise a computer with physical access. One of the best technological tools at the disposal of a social engineer, posing as a technical support person, is a USB thumb drive. These are small, easy to conceal, and can be loaded with different payloads depending on what task needs to be done. However, this form of attack does not require physical access as it can also be effectively carried out via phone or email.","",,Low,"::NATURE:ChildOf:CAPEC ID:407::","","","","","","","","","","","",